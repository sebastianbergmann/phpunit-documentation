<?xml version="1.0" encoding="utf-8" ?>

<chapter id="incomplete-and-skipped-tests">
  <title>不完全なテスト・テストの省略</title>

  <caution>
    <para>
      このドキュメントは、すでにサポートが終了したバージョンの PHPUnit に関するものです。
    </para>

    <para>
      最新版の PHPUnit のドキュメントは
      <ulink url="../../current/ja/index.html">こちら</ulink>にあります。
    </para>
  </caution>

  <section id="incomplete-and-skipped-tests.incomplete-tests">
    <title>不完全なテスト</title>

    <para>
      新しいテストケースクラスを作成する際には、
      これから書くべきテストの内容をはっきりさせるために、
      まず最初は以下のような空のテストメソッドを書きたくなることでしょう。
      <programlisting>public function testSomething()
{
}</programlisting>
      しかし、PHPUnit フレームワークでは空のメソッドを「成功した」
      と判断してしまうという問題があります。このような解釈ミスがあると、
      テスト結果のレポートが無意味になってしまいます。
      そのテストがほんとうに成功したのか、
      それともまだテストが実装されていないのかが判断できないからです。
      実装していないテストメソッドの中で <literal>$this-&gt;fail()</literal>
      をコールするようにしたところで事態は何も変わりません。
      こうすると、テストが「失敗した」と判断されてしまいます。
      これは未実装のテストが「成功」と判断されてしまうのと同じくらいまずいことです
      (訳注: レポートを見ても、そのテストがほんとうに失敗したのか、
      まだ実装されていないだけなのかがわかりません)。
    </para>

    <para>
      <indexterm><primary>Incomplete Test (不完全なテスト)</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_IncompleteTest</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_IncompleteTestError</primary></indexterm>

      テストの成功を青信号、失敗を赤信号と考えるなら、
      テストが未完成あるいは未実装であることを表すための黄信号が必要です。
      そのような場合に使用するインターフェイスが
      <literal>PHPUnit_Framework_IncompleteTest</literal> で、
      これは未完成あるいは未実装のテストメソッドで発生する例外を表すものです。
      このインターフェイスの標準的な実装が
      <literal>PHPUnit_Framework_IncompleteTestError</literal> です。
    </para>

    <para>
      <xref linkend="incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php" />
      では <literal>SampleTest</literal> というテストケースクラスを定義しています。
      便利なメソッド <literal>markTestIncomplete()</literal>
      (これは、自動的に <literal>PHPUnit_Framework_IncompleteTestError</literal>
      を発生させます) をテストメソッド内でコールすることで、
      このメソッドがまだ完成していないことをはっきりさせます。
    </para>

    <example id="incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php">
      <title>テストに未完成の印をつける</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';

class SampleTest extends PHPUnit_Framework_TestCase
{
    public function testSomething()
    {
        // オプション: お望みなら、ここで何かのテストをしてください。
        $this->assertTrue(TRUE, 'これは動いているはずです。');

        // ここで処理を止め、テストが未完成であるという印をつけます。
        $this->markTestIncomplete(
          'このテストは、まだ実装されていません。'
        );
    }
}
?>]]></programlisting>
    </example>

    <para>
      未完成のテストは、PHPUnit のコマンドライン版テストランナーでは以下のように
      <literal>I</literal> で表されます。
    </para>

    <screen><userinput>phpunit --verbose SampleTest</userinput>
PHPUnit 3.2.10 by Sebastian Bergmann.

SampleTest
I

Time: 0 seconds

There was 1 incomplete test:

1) testSomething(SampleTest)
このテストは、まだ実装されていません。
/home/sb/SampleTest.php:14

OK, but incomplete or skipped tests!
Tests: 1, Incomplete: 1.</screen>

    <para>
      <xref linkend="incomplete-and-skipped-tests.incomplete-tests.tables.api" />
      に、テストを未完成扱いにするための API を示します。
    </para>

    <table id="incomplete-and-skipped-tests.incomplete-tests.tables.api">
      <title>未完成のテスト用の API</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>メソッド</entry>
            <entry>意味</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void markTestIncomplete()</literal></entry>
            <entry>現在のテストを未完成扱いにします。</entry>
          </row>
          <row>
            <entry><literal>void markTestIncomplete(string $message)</literal></entry>
            <entry>現在のテストを未完成扱いにします。それを説明する文字列として <literal>$message</literal> を使用します。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="incomplete-and-skipped-tests.skipping-tests">
    <title>テストの省略</title>

    <para>
      すべてのテストがあらゆる環境で実行できるわけではありません。
      考えてみましょう。たとえば、データベースの抽象化レイヤーを使用しており、
      それがさまざまなドライバを使用してさまざまなデータベースシステムを
      サポートしているとします。MySQL ドライバのテストができるのは、
      当然 MySQL サーバが使用できる環境だけです。
    </para>

    <para>
      <xref linkend="incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php" />
      に示すテストケースクラス <literal>DatabaseTest</literal> には、
      テストメソッド <literal>testConnection()</literal> が含まれています。
      このクラスのテンプレートメソッド <literal>setUp()</literal> では、
      MySQLi 拡張モジュールが使用可能かを調べたうえで、もし使用できない場合は
      <literal>markTestSkipped()</literal> メソッドでテストを省略するようにしています。
    </para>

    <example id="incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php">
      <title>テストを省略する</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';

class DatabaseTest extends PHPUnit_Framework_TestCase
{
    protected function setUp()
    {
        if (!extension_loaded('mysqli')) {
            $this->markTestSkipped(
              'MySQLi 拡張モジュールが使用できません。'
            );
        }
    }

    public function testConnection()
    {
        // ...
    }
}
?>]]></programlisting>
    </example>

    <para>
      飛ばされたテストは、PHPUnit のコマンドライン版テストランナーでは以下のように
      <literal>S</literal> で表されます。
    </para>

    <screen><userinput>phpunit --verbose DatabaseTest</userinput>
PHPUnit 3.2.10 by Sebastian Bergmann.

DatabaseTest
S

Time: 0 seconds

There was 1 skipped test:

1) testConnection(DatabaseTest)
MySQLi 拡張モジュールが使用できません。
/home/sb/DatabaseTest.php:11

OK, but incomplete or skipped tests!
Tests: 1, Skipped: 1.</screen>

    <para>
      <xref linkend="incomplete-and-skipped-tests.skipped-tests.tables.api" />
      に、テストを省略するための API を示します。
    </para>

    <table id="incomplete-and-skipped-tests.skipped-tests.tables.api">
      <title>テストを省略するための API</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>メソッド</entry>
            <entry>意味</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void markTestSkipped()</literal></entry>
            <entry>現在のテストを省略扱いにします。</entry>
          </row>
          <row>
            <entry><literal>void markTestSkipped(string $message)</literal></entry>
            <entry>現在のテストを省略扱いにします。それを説明する文字列として <literal>$message</literal> を使用します。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
</chapter>
