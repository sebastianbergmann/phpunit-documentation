<?xml version="1.0" encoding="utf-8" ?>

<chapter id="automating-tests">
  <title>自动化测试</title>

  <para>
    再好的程序员也会犯错。好程序员不同于差程序员之处在于他们通过测试来尽早发现错误。测试进行的越早，发现错误的机会就越大，发现和修正的代价就越小。因此临近软件发布才进行测试是很有问题的做法。大多数错误都未能发现，而已发现的那些错误，修正它们的代价实在太大，于是根本不可能把它们全部修复，只能挑着处理其中的一部分。
  </para>

  <para>
    <indexterm><primary>Unit Test （单元测试）</primary></indexterm>

    使用 PHPUnit 进行测试与过往的做法并没有本质区别，只是方式有所不同。二者的区别在于<emphasis>测试</emphasis>与<emphasis>执行一系列测试</emphasis>，前者检查软件的行为是否符合预期，后者则利用一些可运行的代码片段来自动测试软件各个部分（单元）的正确性。这些可运行的代码片段称为单元测试。
  </para>

  <para>
    在本章中，我们将从基于 <literal>print</literal> 的简单测试代码开始，逐步前进至完全自动化的测试。假设我们需要对 PHP 内建的 <literal>array</literal> 进行测试。其中一个要测试的功能是 <literal>count()</literal> 函数。对于新建立的数组，我们预期 <literal>count()</literal> 函数将返回 <literal>0</literal>。添加一个元素之后，<literal>count()</literal> 函数应当返回 <literal>1</literal>。<xref linkend="automating-tests.examples.array-test.php" />展示了我们要测试的东西。
  </para>

  <example id="automating-tests.examples.array-test.php">
    <title>对数组操作进行测试</title>
    <programlisting><![CDATA[<?php
$fixture = array();
// $fixture 应当为空。

$fixture[] = 'element';
// $fixture 应当包含 1 个元素。
?>]]></programlisting>
  </example>

  <para>
   要检查我们是否得到了预期的结果，简单的办法是在添加元素前后分别输出 <literal>count()</literal> 的结果（见<xref linkend="automating-tests.examples.array-test2.php" />）。若前后分别得到 <literal>0</literal> 和 <literal>1</literal>，则 <literal>array</literal> 和 <literal>count()</literal> 的行为符合预期。
  </para>

  <example id="automating-tests.examples.array-test2.php">
    <title>使用 print 测试数组操作</title>
    <programlisting><![CDATA[<?php
$fixture = array();
print count($fixture) . "\n";

$fixture[] = 'element';
print count($fixture) . "\n";
?>]]></programlisting>
    <screen>0
1</screen>
  </example>

  <para>
    现在，我们要把需要人工对结果进行解读的测试修改成能自动运行。在<xref linkend="automating-tests.examples.array-test3.php" />中，我们在测试代码中加入了对预期值与实际值的比较，并且在两个值相等时输出 <literal>ok</literal>。一旦看到 <literal>not ok</literal> 讯息，我们就知道出错了。
  </para>

  <example id="automating-tests.examples.array-test3.php">
    <title>通过比较预期值与实际值来测试数组操作</title>
    <programlisting><![CDATA[<?php
$fixture = array();
print count($fixture) == 0 ? "ok\n" : "not ok\n";

$fixture[] = 'element';
print count($fixture) == 1 ? "ok\n" : "not ok\n";
?>]]></programlisting>
    <screen>ok
ok</screen>
  </example>

  <para>
    <indexterm><primary>Assertions （断言）</primary></indexterm>

    现在我们把对预期值和实际值进行比较的部分提取出来，成为独立的函数，在二个值存在差异时这个函数会抛出异常（<xref linkend="automating-tests.examples.array-test4.php" />）。这有两个好处：编写测试更容易了，并且只在出错时产生输出。
  </para>

  <example id="automating-tests.examples.array-test4.php">
    <title>使用断言函数测试数组操作</title>
    <programlisting><![CDATA[<?php
$fixture = array();
assertTrue(count($fixture) == 0);

$fixture[] = 'element';
assertTrue(count($fixture) == 1);

function assertTrue($condition)
{
    if (!$condition) {
        throw new Exception('Assertion failed.');
    }
}
?>]]></programlisting>
  </example>

  <para>
    <indexterm><primary>Automated Test （自动测试）</primary></indexterm>

    现在测试完全自动化了。在第一个版本里我们只是简单的<emphasis>测试</emphasis>，而这个版本已经是<emphasis>自动测试</emphasis>。
  </para>

  <para>
    使用自动化测试的目的是少犯错。虽然说就算有了极好的测试你的代码也仍然无法达到完美，但是一旦开始进行自动化测试，你很可能会发现缺陷显著减少了。自动化测试让你对自己的代码有充分的信心。这种信心将让你能够在设计上做出更大胆的跨越（重构）、同团队成员们合作地更好（跨团队测试）、与客户之间的关系有所改善，并且在每天晚上回家时都能确信，自己的努力使系统比当天早上更好。
  </para>
</chapter>
