<?xml version="1.0" encoding="utf-8" ?>

<chapter id="writing-tests-for-phpunit">
  <title>编写 PHPUnit 测试</title>

  <para>
    <indexterm><primary>PHPUnit_Framework_TestCase</primary></indexterm>

    <xref linkend="writing-tests-for-phpunit.examples.StackTest.php" />展示了如何用 PHPUnit 编写测试来对 PHP 数组操作进行测试。本例介绍了用 PHPUnit 编写测试的基本惯例与步骤：
  </para>

  <orderedlist>
    <listitem><para>针对类 <literal>Class</literal> 的测试写在类 <literal>ClassTest</literal> 中。</para></listitem>
    <listitem><para><literal>ClassTest</literal>（通常）继承自 <literal>PHPUnit_Framework_TestCase</literal>。</para></listitem>
    <listitem><indexterm><primary>Annotation （标注）</primary></indexterm><indexterm><primary>@test</primary></indexterm><para>测试都是命名为 <literal>test*</literal> 的公用方法。</para><para><indexterm><primary>Annotation （标注）</primary></indexterm>另外，你可以在方法的文档注释块(docblock)中使用 <literal>@test</literal> 标注将其标记为测试方法。</para></listitem>
    <listitem><para>在测试方法内，类似于 <literal>assertEquals()</literal>（参见<xref linkend="writing-tests-for-phpunit.assertions" />）这样的断言方法用来对实际值与预期值的匹配做出断言。</para></listitem>
  </orderedlist>

  <example id="writing-tests-for-phpunit.examples.StackTest.php">
    <title>用 PHPUnit 测试数组操作</title>
    <programlisting><![CDATA[<?php
class StackTest extends PHPUnit_Framework_TestCase
{
    public function testPushAndPop()
    {
        $stack = array();
        $this->assertEquals(0, count($stack));

        array_push($stack, 'foo');
        $this->assertEquals('foo', $stack[count($stack)-1]);
        $this->assertEquals(1, count($stack));

        $this->assertEquals('foo', array_pop($stack));
        $this->assertEquals(0, count($stack));
    }
}
?>]]></programlisting>
  </example>

  <blockquote>
    <attribution>Martin Fowler</attribution>
    <para>
      当你想把一些东西写到 <literal>print</literal> 语句或者调试表达式中时，别这么做，将其写成一个测试来代替。
    </para>
  </blockquote>

  <section id="writing-tests-for-phpunit.test-dependencies">
    <title>测试的依赖关系</title>

    <blockquote>
      <attribution>Adrian Kuhn et. al.</attribution>
      <para>
      单元测试主要是作为一种良好实践来编写的，它能帮助开发人员识别并修复 bug、重构代码，还可以看作被测软件单元的文档。要实现这些好处，理想的单元测试应当覆盖程序中所有可能的路径。一个单元测试通常覆盖一个函数或方法中的一个特定路径。但是，测试方法并不一定非要是一个封装良好的独立实体。测试方法之间经常有隐含的依赖关系暗藏在测试的实现方案中。
      </para>
    </blockquote>

    <para>
      <indexterm><primary>Test Dependencies （测试的依赖关系）</primary></indexterm>
      PHPUnit支持对测试方法之间的显式依赖关系进行声明。这种依赖关系并不是定义在测试方法的执行顺序中，而是允许生产者(producer)返回一个测试基境(fixture)的实例，并将此实例传递给依赖于它的消费者(consumer)们。
    </para>

    <itemizedlist>
      <listitem><para>生产者(producer)，是能生成被测单元并将其作为返回值的测试方法。</para></listitem>
      <listitem><para>消费者(consumer)，是依赖于一个或多个生产者及其返回值的测试方法。</para></listitem>
    </itemizedlist>

    <para>
      <indexterm><primary>Annotation （标注）</primary></indexterm>
      <indexterm><primary>@depends</primary></indexterm>

      <xref linkend="writing-tests-for-phpunit.examples.StackTest2.php" /> 展示了如何用 <literal>@depends</literal> 标注来表达测试方法之间的依赖关系。
    </para>

    <example id="writing-tests-for-phpunit.examples.StackTest2.php">
      <title>用 <literal>@depends</literal> 标注来表达依赖关系</title>
      <programlisting><![CDATA[<?php
class StackTest extends PHPUnit_Framework_TestCase
{
    public function testEmpty()
    {
        $stack = array();
        $this->assertEmpty($stack);

        return $stack;
    }

    /**
     * @depends testEmpty
     */
    public function testPush(array $stack)
    {
        array_push($stack, 'foo');
        $this->assertEquals('foo', $stack[count($stack)-1]);
        $this->assertNotEmpty($stack);

        return $stack;
    }

    /**
     * @depends testPush
     */
    public function testPop(array $stack)
    {
        $this->assertEquals('foo', array_pop($stack));
        $this->assertEmpty($stack);
    }
}
?>]]></programlisting>
    </example>

    <para>
      在上例中，第一个测试， <literal>testEmpty()</literal>，创建了一个新数组，并断言其为空。随后，此测试将此基境作为结果返回。第二个测试， <literal>testPush()</literal>，依赖于 <literal>testEmpty()</literal> ，并将所依赖的测试之结果作为参数传入。最后， <literal>testPop()</literal> 依赖于 <literal>testPush()</literal>。
    </para>

    <para>
      <indexterm><primary>Defect Localization （缺陷定位）</primary></indexterm>
      为了快速定位缺陷，我们希望把注意力集中于相关的失败测试上。这就是为什么当某个测试所依赖的测试失败时，PHPUnit 会跳过这个测试。通过利用测试之间的依赖关系，缺陷定位得到了改进，如<xref linkend="writing-tests-for-phpunit.examples.DependencyFailureTest.php" />中所示。
    </para>

    <example id="writing-tests-for-phpunit.examples.DependencyFailureTest.php">
      <title>利用测试之间的依赖关系</title>
      <programlisting><![CDATA[<?php
class DependencyFailureTest extends PHPUnit_Framework_TestCase
{
    public function testOne()
    {
        $this->assertTrue(FALSE);
    }

    /**
     * @depends testOne
     */
    public function testTwo()
    {
    }
}
?>]]></programlisting>

      <screen><userinput>phpunit --verbose DependencyFailureTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

FS

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) DependencyFailureTest::testOne
Failed asserting that false is true.

/home/sb/DependencyFailureTest.php:6

There was 1 skipped test:

1) DependencyFailureTest::testTwo
This test depends on "DependencyFailureTest::testOne" to pass.


FAILURES!
Tests: 1, Assertions: 1, Failures: 1, Skipped: 1.]]></screen>
    </example>

    <para>
      测试可以使用多于一个 <literal>@depends</literal> 标注。PHPUnit 不会更改测试的运行顺序，因此你需要自行保证某个测试所依赖的所有测试均出现于这个测试之前。
    </para>
  </section>

  <section id="writing-tests-for-phpunit.data-providers">
    <title>数据供给器</title>

    <para>
      <indexterm><primary>Annotation （标注）</primary></indexterm>
      <indexterm><primary>@dataProvider</primary></indexterm>
      测试方法可以接受任意参数。这些参数由数据供给器方法（在<xref linkend="writing-tests-for-phpunit.data-providers.examples.DataTest.php" />中，是 <literal>provider()</literal> 方法）提供。用 <literal>@dataProvider</literal> 标注来指定使用哪个数据供给器方法。
    </para>

    <para>
      数据供给器方法必须声明为 <literal>public</literal>，其返回值要么是一个数组，其每个元素也是数组；要么是一个实现了 <literal>Iterator</literal> 接口的对象，在对它进行迭代时每步产生一个数组。每个数组都是测试数据集的一部分，将以它的内容作为参数来调用测试方法。
    </para>

    <example id="writing-tests-for-phpunit.data-providers.examples.DataTest.php">
      <title>使用返回数组的数组的数据供给器</title>
      <programlisting><![CDATA[<?php
class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider provider
     */
    public function testAdd($a, $b, $c)
    {
        $this->assertEquals($c, $a + $b);
    }

    public function provider()
    {
        return array(
          array(0, 0, 0),
          array(0, 1, 1),
          array(1, 0, 1),
          array(1, 1, 3)
        );
    }
}
?>]]></programlisting>

    <screen><userinput>phpunit DataTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

...F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) DataTest::testAdd with data set #3 (1, 1, 3)
Failed asserting that 2 matches expected 3.

/home/sb/DataTest.php:9

FAILURES!
Tests: 4, Assertions: 4, Failures: 1.]]></screen>
    </example>

    <example id="writing-tests-for-phpunit.data-providers.examples.DataTest2.php">
      <title>使用返回迭代器对象的数据供给器</title>
      <programlisting><![CDATA[<?php
require 'CsvFileIterator.php';

class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider provider
     */
    public function testAdd($a, $b, $c)
    {
        $this->assertEquals($c, $a + $b);
    }

    public function provider()
    {
        return new CsvFileIterator('data.csv');
    }
}
?>]]></programlisting>

    <screen><userinput>phpunit DataTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

...F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) DataTest::testAdd with data set #3 ('1', '1', '3')
Failed asserting that 2 matches expected '3'.

/home/sb/DataTest.php:11

FAILURES!
Tests: 4, Assertions: 4, Failures: 1.]]></screen>
    </example>

    <example id="writing-tests-for-phpunit.data-providers.examples.CsvFileIterator.php">
      <title>CsvFileIterator 类</title>
      <programlisting><![CDATA[<?php
class CsvFileIterator implements Iterator {
    protected $file;
    protected $key = 0;
    protected $current;

    public function __construct($file) {
        $this->file = fopen($file, 'r');
    }

    public function __destruct() {
        fclose($this->file);
    }

    public function rewind() {
        rewind($this->file);
        $this->current = fgetcsv($this->file);
        $this->key = 0;
    }

    public function valid() {
        return !feof($this->file);
    }

    public function key() {
        return $this->key;
    }

    public function current() {
        return $this->current;
    }

    public function next() {
        $this->current = fgetcsv($this->file);
        $this->key++;
    }
}
?>]]></programlisting>
    </example>

    <note>
      <para>
        <indexterm><primary>Annotation （标注）</primary></indexterm>
        <indexterm><primary>@dataProvider</primary></indexterm>
        <indexterm><primary>@depends</primary></indexterm>
        如果测试同时从 <literal>@dataProvider</literal> 方法和一个或多个 <literal>@depends</literal> 测试接收数据，那么来自于数据供给器的参数将先于来自所依赖的测试的。
      </para>
    </note>

    <note>
      <para>
        <indexterm><primary>Annotation （标注）</primary></indexterm>
        <indexterm><primary>@dataProvider </primary></indexterm>
        <indexterm><primary>@depends</primary></indexterm>
        当一个测试依赖于另外一个使用了数据供给器的测试时，仅当被依赖的测试至少能在一组数据上成功时，依赖于它的测试才会运行。使用了数据供给器的测试，其运行结果是无法注入到依赖于此测试的其他测试中的。
      </para>
    </note>

    <note>
      <para>
        <indexterm><primary>Annotation （标注）</primary></indexterm>
        <indexterm><primary>@dataProvider</primary></indexterm>
        <indexterm><primary>@depends</primary></indexterm>
        所有的数据供给器方法的执行都是在对 <literal>setUpBeforeClass</literal> 静态方法的调用和第一次对 <literal>setUp</literal> 方法的调用之前完成的。因此，无法在数据供给器中使用创建于这两个方法内的变量。这是必须的，这样 PHPUnit 才能计算测试的总数量。
      </para>
    </note>
  </section>

  <section id="writing-tests-for-phpunit.exceptions">
    <title>对异常进行测试</title>

    <para>
      <indexterm><primary>Annotation （标注）</primary></indexterm>
      <indexterm><primary>@expectedException</primary></indexterm>
      <xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php" />展示了如何用 <literal>@expectedException</literal> 标注来测试被测代码中是否抛出了异常。
    </para>

    <example id="writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php">
      <title>使用 @expectedException 标注</title>
      <programlisting><![CDATA[<?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException InvalidArgumentException
     */
    public function testException()
    {
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ExceptionTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) ExceptionTest::testException
Expected exception InvalidArgumentException


FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>

    <para>
      <indexterm><primary>Annotation （标注）</primary></indexterm>
      <indexterm><primary>@expectedException</primary></indexterm>
      <indexterm><primary>@expectedExceptionMessage</primary></indexterm>
      <indexterm><primary>@expectedExceptionCode</primary></indexterm>
      另外，你可以将 <literal>@expectedExceptionMessage</literal> 和 <literal>@expectedExceptionCode</literal> 与 <literal>@expectedException</literal> 联合使用，来对异常的讯息与代号进行测试，如<xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php" />所示。
    </para>

    <example id="writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php">
      <title>使用 @expectedExceptionMessage 和 @expectedExceptionCode 标注</title>
      <programlisting><![CDATA[<?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException        InvalidArgumentException
     * @expectedExceptionMessage Right Message
     */
    public function testExceptionHasRightMessage()
    {
        throw new InvalidArgumentException('Some Message', 10);
    }

    /**
     * @expectedException     InvalidArgumentException
     * @expectedExceptionCode 20
     */
    public function testExceptionHasRightCode()
    {
        throw new InvalidArgumentException('Some Message', 10);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ExceptionTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

FF

Time: 0 seconds, Memory: 3.00Mb

There were 2 failures:

1) ExceptionTest::testExceptionHasRightMessage
Failed asserting that exception message 'Some Message' contains 'Right Message'.


2) ExceptionTest::testExceptionHasRightCode
Failed asserting that expected exception code 20 is equal to 10.


FAILURES!
Tests: 2, Assertions: 4, Failures: 2.]]></screen>
    </example>

    <para>
      关于 <literal>@expectedExceptionMessage</literal> 和 <literal>@expectedExceptionCode</literal>，分别在<xref linkend="appendixes.annotations.expectedExceptionMessage"/>和<xref linkend="appendixes.annotations.expectedExceptionCode"/>有更多相关范例。
    </para>

    <para>
      此外，还可以用 <literal>setExpectedException()</literal> 方法来设定所预期的异常，如<xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest3.php" />所示。
    </para>

    <example id="writing-tests-for-phpunit.exceptions.examples.ExceptionTest3.php">
      <title>预期被测代码将引发异常</title>
      <programlisting><![CDATA[<?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    public function testException()
    {
        $this->setExpectedException('InvalidArgumentException');
    }

    public function testExceptionHasRightMessage()
    {
        $this->setExpectedException(
          'InvalidArgumentException', 'Right Message'
        );
        throw new InvalidArgumentException('Some Message', 10);
    }

    public function testExceptionHasRightCode()
    {
        $this->setExpectedException(
          'InvalidArgumentException', 'Right Message', 20
        );
        throw new InvalidArgumentException('The Right Message', 10);
    }
}?>]]></programlisting>
      <screen><userinput>phpunit ExceptionTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

FFF

Time: 0 seconds, Memory: 3.00Mb

There were 3 failures:

1) ExceptionTest::testException
Expected exception InvalidArgumentException


2) ExceptionTest::testExceptionHasRightMessage
Failed asserting that exception message 'Some Message' contains 'Right Message'.


3) ExceptionTest::testExceptionHasRightCode
Failed asserting that expected exception code 20 is equal to 10.


FAILURES!
Tests: 3, Assertions: 6, Failures: 3.]]></screen>
    </example>

    <para>
      <xref linkend="writing-tests-for-phpunit.exceptions.tables.api" />中列举了用于对异常进行测试的各种方法。
    </para>

    <table id="writing-tests-for-phpunit.exceptions.tables.api">
      <title>用于对异常进行测试的方法</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>方法</entry>
            <entry>含义</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void setExpectedException(string $exceptionName[, string $exceptionMessage = '', integer $exceptionCode = NULL])</literal></entry>
            <entry>设定预期的 <literal>$exceptionName</literal>， <literal>$exceptionMessage</literal>，和 <literal>$exceptionCode</literal>。</entry>
          </row>
          <row>
            <entry><literal>String getExpectedException()</literal></entry>
            <entry>返回预期异常的名称。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      你可以用<xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest4.php" />中所示方法来对异常进行测试。
    </para>

    <example id="writing-tests-for-phpunit.exceptions.examples.ExceptionTest4.php">
      <title>另一种对异常进行测试的方法</title>
      <programlisting><![CDATA[<?php
class ExceptionTest extends PHPUnit_Framework_TestCase {
    public function testException() {
        try {
            // ... 预期会引发异常的代码 ...
        }

        catch (InvalidArgumentException $expected) {
            return;
        }

        $this->fail('预期的异常未出现。');
    }
}
?>]]></programlisting>
    </example>

    <para>
      当<xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest4.php" />中预期会引发异常的代码并没有引发异常时，后面对 <literal>fail()</literal> 的调用将会中止测试，并通告测试有问题。如果预期的异常出现了，将执行 <literal>catch</literal> 代码块，测试将会成功结束。
    </para>
  </section>

  <section id="writing-tests-for-phpunit.errors">
    <title>对 PHP 错误进行测试</title>
    <para>
      <indexterm><primary>Error Handler （错误处理）</primary></indexterm>
      <indexterm><primary>PHP Error （PHP 错误）</primary></indexterm>
      <indexterm><primary>PHP Notice （PHP 通知）</primary></indexterm>
      <indexterm><primary>PHP Warning （PHP 警告）</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_Error</primary></indexterm>
      默认情况下，PHPUnit 将测试在执行中触发的 PHP 错误、警告、通知都转换为异常。利用这些异常，就可以，比如说，预期测试将触发 PHP 错误，如<xref linkend="writing-tests-for-phpunit.exceptions.examples.ErrorTest.php" />所示。
    </para>


    <note>
      <para>
        PHP 的 <literal>error_reporting</literal> 运行时配置会对 PHPUnit 将哪些错误转换为异常有所限制。如果在这个特性上碰到问题，请确认 PHP 的配置中没有抑制想要测试的错误类型。
      </para>
    </note>

    <example id="writing-tests-for-phpunit.exceptions.examples.ErrorTest.php">
      <title>用 @expectedException 来预期 PHP 错误</title>
      <programlisting><![CDATA[<?php
class ExpectedErrorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException PHPUnit_Framework_Error
     */
    public function testFailingInclude()
    {
        include 'not_existing_file.php';
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit -d error_reporting=2 ExpectedErrorTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

.

Time: 0 seconds, Memory: 5.25Mb

OK (1 test, 1 assertion)</screen>
    </example>

    <para>
      <indexterm><primary>PHPUnit_Framework_Error_Notice</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_Error_Warning</primary></indexterm>
      <literal>PHPUnit_Framework_Error_Notice</literal> 和 <literal>PHPUnit_Framework_Error_Warning</literal> 分别代表 PHP 通知与 PHP 警告。
    </para>

    <note>
      <para>
        对异常进行测试是越明确越好的。对太笼统的类进行测试有可能导致不良副作用。因此，不再允许用 <literal>@expectedException</literal> 或 <literal>setExpectedException()</literal> 对 <literal>Exception</literal> 类进行测试。
      </para>
    </note>

    <para>
        如果测试依靠会触发错误的 PHP 函数，例如 <literal>fopen</literal>，有时候在测试中使用错误抑制符会很有用。通过抑制住错误通知，就能对返回值进行检查，否则错误通知将会导致抛出<literal>PHPUnit_Framework_Error_Notice</literal>。
        <example id="writing-tests-for-phpunit.exceptions.examples.TriggerErrorReturnValue.php">
            <title>对会引发PHP 错误的代码的返回值进行测试</title>
            <programlisting><![CDATA[<?php
class ErrorSuppressionTest extends PHPUnit_Framework_TestCase
{
    public function testFileWriting() {
        $writer = new FileWriter;
        $this->assertFalse(@$writer->write('/is-not-writeable/file', 'stuff'));
    }
}
class FileWriter
{
    public function write($file, $content) {
        $file = fopen($file, 'w');
        if($file == false) {
            return false;
        }
        // ...
    }
}

?>]]></programlisting>
      <screen><userinput>phpunit ErrorSuppressionTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

.

Time: 1 seconds, Memory: 5.25Mb

OK (1 test, 1 assertion)</screen>
        </example>
    如果不使用错误抑制符，此测试将会失败，并报告 <literal>fopen(/is-not-writeable/file): failed to open stream:
    No such file or directory</literal>。

    </para>
  </section>

  <section id="writing-tests-for-phpunit.output">
    <title>对输出进行测试</title>

    <para>
      有时候，想要断言，比如说，生成了预期的输出（例如，通过 <literal>echo</literal> 或 <literal>print</literal>）。<literal>PHPUnit_Framework_TestCase</literal> 类使用 PHP 的 <ulink url="http://www.php.net/manual/en/ref.outcontrol.php">输出缓冲</ulink> 特性来为此提供必要的功能。
    </para>

    <para>
      <xref linkend="writing-tests-for-phpunit.output.examples.OutputTest.php" />展示了如何用 <literal>expectOutputString()</literal> 方法来设定所预期的输出。如果没有产生预期的输出，测试将计为失败。
    </para>

    <example id="writing-tests-for-phpunit.output.examples.OutputTest.php">
      <title>对函数或方法的输出进行测试</title>
      <programlisting><![CDATA[<?php
class OutputTest extends PHPUnit_Framework_TestCase
{
    public function testExpectFooActualFoo()
    {
        $this->expectOutputString('foo');
        print 'foo';
    }

    public function testExpectBarActualBaz()
    {
        $this->expectOutputString('bar');
        print 'baz';
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit OutputTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

.F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) OutputTest::testExpectBarActualBaz
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'bar'
+'baz'


FAILURES!
Tests: 2, Assertions: 2, Failures: 1.</screen>
    </example>

    <para>
      <xref linkend="writing-tests-for-phpunit.output.tables.api" />中列举了用于对输出进行测试的各种方法。
    </para>

    <table id="writing-tests-for-phpunit.output.tables.api">
      <title>用于对输出进行测试的方法</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>方法</entry>
            <entry>含义</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void expectOutputRegex(string $regularExpression)</literal></entry>
            <entry>设定输出预期与 <literal>$regularExpression</literal> 正则表达式匹配。</entry>
          </row>
          <row>
            <entry><literal>void expectOutputString(string $expectedString)</literal></entry>
            <entry>设定输出预期与 <literal>$expectedString</literal> 字符串相等。</entry>
          </row>
          <row>
            <entry><literal>bool setOutputCallback(callable $callback)</literal></entry>
            <entry>设定回调函数，用于，比如说，将实际输出规范化。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <note>
      <para>
        请注意，PHPUnit 会吞掉测试执行期间所生成的所有输出。在严格模式下，测试本身产生输出将导致测试失败。
      </para>
    </note>
  </section>

  <section id="writing-tests-for-phpunit.assertions">
    <title>断言</title>

    <para>
      本节列举可用的各种断言方法。
    </para>

    <section id="writing-tests-for-phpunit.assertions.assertArrayHasKey">
      <title>assertArrayHasKey()</title>
      <indexterm><primary>assertArrayHasKey()</primary></indexterm>
      <indexterm><primary>assertArrayNotHasKey()</primary></indexterm>
      <para><literal>assertArrayHasKey(mixed $key, array $array[, string $message = ''])</literal></para>
      <para>当 <literal>$array</literal> 不包含 <literal>$key</literal> 时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertArrayNotHasKey()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertArrayHasKey.example">
        <title>assertArrayHasKey() 的用法</title>
        <programlisting><![CDATA[<?php
class ArrayHasKeyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertArrayHasKey('foo', array('bar' => 'baz'));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ArrayHasKeyTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) ArrayHasKeyTest::testFailure
Failed asserting that an array has the key 'foo'.

/home/sb/ArrayHasKeyTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertClassHasAttribute">
      <title>assertClassHasAttribute()</title>
      <indexterm><primary>assertClassHasAttribute()</primary></indexterm>
      <indexterm><primary>assertClassNotHasAttribute()</primary></indexterm>
      <para><literal>assertClassHasAttribute(string $attributeName, string $className[, string $message = ''])</literal></para>
      <para>当 <literal>$className::attributeName</literal> 不存在时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertClassNotHasAttribute()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertClassHasAttribute.example">
        <title>assertClassHasAttribute() 的用法</title>
        <programlisting><![CDATA[<?php
class ClassHasAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertClassHasAttribute('foo', 'stdClass');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ClassHasAttributeTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) ClassHasAttributeTest::testFailure
Failed asserting that class "stdClass" has attribute "foo".

/home/sb/ClassHasAttributeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertClassHasStaticAttribute">
      <title>assertClassHasStaticAttribute()</title>
      <indexterm><primary>assertClassHasStaticAttribute()</primary></indexterm>
      <indexterm><primary>assertClassNotHasStaticAttribute()</primary></indexterm>
      <para><literal>assertClassHasStaticAttribute(string $attributeName, string $className[, string $message = ''])</literal></para>
      <para>当 <literal>$className::attributeName</literal> 不存在时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertClassNotHasStaticAttribute()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertClassHasStaticAttribute.example">
        <title>assertClassHasStaticAttribute() 的用法</title>
        <programlisting><![CDATA[<?php
class ClassHasStaticAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertClassHasStaticAttribute('foo', 'stdClass');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ClassHasStaticAttributeTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) ClassHasStaticAttributeTest::testFailure
Failed asserting that class "stdClass" has static attribute "foo".

/home/sb/ClassHasStaticAttributeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertContains">
      <title>assertContains()</title>
      <indexterm><primary>assertContains()</primary></indexterm>
      <indexterm><primary>assertNotContains()</primary></indexterm>
      <indexterm><primary>assertAttributeContains()</primary></indexterm>
      <indexterm><primary>assertAttributeNotContains()</primary></indexterm>
      <para><literal>assertContains(mixed $needle, Iterator|array $haystack[, string $message = ''])</literal></para>
      <para>当 <literal>$needle</literal> 不是 <literal>$haystack</literal> 的某个元素时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertNotContains()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <para><literal>assertAttributeContains()</literal> 和 <literal>assertAttributeNotContains()</literal> 是两个便捷包装(convenience wrappers)，以某个类或对象的 <literal>public</literal>、 <literal>protected</literal> 或 <literal>private</literal> 属性为搜索范围。</para>
      <example id="writing-tests-for-phpunit.assertions.assertContains.example">
        <title>assertContains() 的用法</title>
        <programlisting><![CDATA[<?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertContains(4, array(1, 2, 3));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ContainsTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) ContainsTest::testFailure
Failed asserting that an array contains 4.

/home/sb/ContainsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
      </example>

      <para><literal>assertContains(string $needle, string $haystack[, string $message = ''])</literal></para>
      <para>当 <literal>$needle</literal> 不是 <literal>$haystack</literal> 的子字符串时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <example id="writing-tests-for-phpunit.assertions.assertContains.example2">
        <title>assertContains() 的用法</title>
        <programlisting><![CDATA[<?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertContains('baz', 'foobar');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ContainsTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) ContainsTest::testFailure
Failed asserting that 'foobar' contains "baz".

/home/sb/ContainsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertContainsOnly">
      <title>assertContainsOnly()</title>
      <indexterm><primary>assertContainsOnly()</primary></indexterm>
      <indexterm><primary>assertNotContainsOnly()</primary></indexterm>
      <indexterm><primary>assertAttributeContainsOnly()</primary></indexterm>
      <indexterm><primary>assertAttributeNotContainsOnly()</primary></indexterm>
      <para><literal>assertContainsOnly(string $type, Iterator|array $haystack[, boolean $isNativeType = NULL, string $message = ''])</literal></para>
      <para>当 <literal>$haystack</literal> 并非仅包含类型为 <literal>$type</literal> 的变量时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>$isNativeType</literal> 是一个标志，用来表明 <literal>$type</literal> 是否是原生 PHP 类型。</para>
      <para><literal>assertNotContainsOnly()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <para><literal>assertAttributeContainsOnly()</literal> 和 <literal>assertAttributeNotContainsOnly()</literal> 是两个便捷包装(convenience wrappers)，以某个类或对象的 <literal>public</literal>、 <literal>protected</literal> 或 <literal>private</literal> 属性为搜索范围。</para>
      <example id="writing-tests-for-phpunit.assertions.assertContainsOnly.example">
        <title>assertContainsOnly() 的用法</title>
        <programlisting><![CDATA[<?php
class ContainsOnlyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertContainsOnly('string', array('1', '2', 3));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ContainsOnlyTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) ContainsOnlyTest::testFailure
Failed asserting that Array (
    0 => '1'
    1 => '2'
    2 => 3
) contains only values of type "string".

/home/sb/ContainsOnlyTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>
	<section id="writing-tests-for-phpunit.assertions.assertContainsOnlyInstancesOf">
	  <title>assertContainsOnlyInstancesOf()</title>
      <indexterm><primary>assertContainsOnlyInstancesOf()</primary></indexterm>
      <para><literal>assertContainsOnlyInstancesOf(string $classname, Traversable|array $haystack[, string $message = ''])</literal></para>
      <para>当 <literal>$haystack</literal>  并非仅包含类 <literal>$classname</literal> 的实例时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <example id="writing-tests-for-phpunit.assertions.assertContainsOnlyInstancesOf.example">
        <title>assertContainsOnlyInstancesOf() 的用法</title>
        <programlisting><![CDATA[<?php
class ContainsOnlyInstancesOfTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertContainsOnlyInstancesOf('Foo', array(new Foo(), new Bar(), new Foo()));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ContainsOnlyInstancesOfTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) ContainsOnlyInstancesOfTest::testFailure
Failed asserting that Array ([0]=> Bar Object(...)) is an instance of class "Foo".

/home/sb/ContainsOnlyInstancesOfTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
	</section>
    <section id="writing-tests-for-phpunit.assertions.assertCount">
      <title>assertCount()</title>
      <indexterm><primary>assertCount()</primary></indexterm>
      <indexterm><primary>assertNotCount()</primary></indexterm>
      <para><literal>assertCount($expectedCount, $haystack[, string $message = ''])</literal></para>
      <para>当 <literal>$haystack</literal> 中的元素数量不是 <literal>$expectedCount</literal> 时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertNotCount()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertCount.example">
        <title>assertCount() 的用法</title>
        <programlisting><![CDATA[<?php
class CountTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertCount(0, array('foo'));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit CountTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) CountTest::testFailure
Failed asserting that actual size 1 matches expected size 0.

/home/sb/CountTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertEmpty">
      <title>assertEmpty()</title>
      <indexterm><primary>assertEmpty()</primary></indexterm>
      <indexterm><primary>assertNotEmpty()</primary></indexterm>
      <indexterm><primary>assertAttributeEmpty()</primary></indexterm>
      <indexterm><primary>assertAttributeNotEmpty()</primary></indexterm>
      <para><literal>assertEmpty(mixed $actual[, string $message = ''])</literal></para>
      <para>当 <literal>$actual</literal> 不是空的时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertNotEmpty()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <para><literal>assertAttributeEmpty()</literal> 和 <literal>assertAttributeNotEmpty()</literal> 是便捷包装(convenience wrappers)， 可以应用于某个类或对象的某个 <literal>public</literal>、 <literal>protected</literal> 或 <literal>private</literal> 属性。</para>
      <example id="writing-tests-for-phpunit.assertions.assertEmpty.example">
        <title>assertEmpty() 的用法</title>
        <programlisting><![CDATA[<?php
class EmptyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertEmpty(array('foo'));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EmptyTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) EmptyTest::testFailure
Failed asserting that an array is empty.

/home/sb/EmptyTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertEqualXMLStructure">
      <title>assertEqualXMLStructure()</title>
      <indexterm><primary>assertEqualXMLStructure()</primary></indexterm>
      <para><literal>assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement[, boolean $checkAttributes = FALSE, string $message = ''])</literal></para>
      <para>当 <literal>$actualElement</literal> 中的 DOMElement 的 XML 结构与 <literal>$expectedElement</literal> 中的 DOMElement的 XML 结构不相同时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <example id="writing-tests-for-phpunit.assertions.assertEqualXMLStructure.example">
        <title>assertEqualXMLStructure() 的用法</title>
        <programlisting><![CDATA[<?php
class EqualXMLStructureTest extends PHPUnit_Framework_TestCase
{
    public function testFailureWithDifferentNodeNames()
    {
        $expected = new DOMElement('foo');
        $actual = new DOMElement('bar');

        $this->assertEqualXMLStructure($expected, $actual);
    }

    public function testFailureWithDifferentNodeAttributes()
    {
        $expected = new DOMDocument;
        $expected->loadXML('<foo bar="true" />');

        $actual = new DOMDocument;
        $actual->loadXML('<foo/>');

        $this->assertEqualXMLStructure(
          $expected->firstChild, $actual->firstChild, TRUE
        );
    }

    public function testFailureWithDifferentChildrenCount()
    {
        $expected = new DOMDocument;
        $expected->loadXML('<foo><bar/><bar/><bar/></foo>');

        $actual = new DOMDocument;
        $actual->loadXML('<foo><bar/></foo>');

        $this->assertEqualXMLStructure(
          $expected->firstChild, $actual->firstChild
        );
    }

    public function testFailureWithDifferentChildren()
    {
        $expected = new DOMDocument;
        $expected->loadXML('<foo><bar/><bar/><bar/></foo>');

        $actual = new DOMDocument;
        $actual->loadXML('<foo><baz/><baz/><baz/></foo>');

        $this->assertEqualXMLStructure(
          $expected->firstChild, $actual->firstChild
        );
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EqualXMLStructureTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

FFFF

Time: 0 seconds, Memory: 5.75Mb

There were 4 failures:

1) EqualXMLStructureTest::testFailureWithDifferentNodeNames
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'foo'
+'bar'

/home/sb/EqualXMLStructureTest.php:9

2) EqualXMLStructureTest::testFailureWithDifferentNodeAttributes
Number of attributes on node "foo" does not match
Failed asserting that 0 matches expected 1.

/home/sb/EqualXMLStructureTest.php:22

3) EqualXMLStructureTest::testFailureWithDifferentChildrenCount
Number of child nodes of "foo" differs
Failed asserting that 1 matches expected 3.

/home/sb/EqualXMLStructureTest.php:35

4) EqualXMLStructureTest::testFailureWithDifferentChildren
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'bar'
+'baz'

/home/sb/EqualXMLStructureTest.php:48

FAILURES!
Tests: 4, Assertions: 8, Failures: 4.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertEquals">
      <title>assertEquals()</title>
      <indexterm><primary>assertEquals()</primary></indexterm>
      <indexterm><primary>assertNotEquals()</primary></indexterm>
      <indexterm><primary>assertAttributeEquals()</primary></indexterm>
      <indexterm><primary>assertAttributeNotEquals()</primary></indexterm>
      <para><literal>assertEquals(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para>当两个变量 <literal>$expected</literal> 与 <literal>$actual</literal> 不相等时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertNotEquals()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <para><literal>assertAttributeEquals()</literal> 和 <literal>assertAttributeNotEquals()</literal> 是便捷包装(convenience wrappers)， 以某个类或对象的某个 <literal>public</literal>、 <literal>protected</literal> 或 <literal>private</literal> 属性作为实际值来进行比较。</para>
      <example id="writing-tests-for-phpunit.assertions.assertEquals.example">
        <title>assertEquals() 的用法</title>
        <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertEquals(1, 0);
    }

    public function testFailure2()
    {
        $this->assertEquals('bar', 'baz');
    }

    public function testFailure3()
    {
        $this->assertEquals("foo\nbar\nbaz\n", "foo\nbah\nbaz\n");
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EqualsTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

FFF

Time: 0 seconds, Memory: 5.25Mb

There were 3 failures:

1) EqualsTest::testFailure
Failed asserting that 0 matches expected 1.

/home/sb/EqualsTest.php:6

2) EqualsTest::testFailure2
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'bar'
+'baz'

/home/sb/EqualsTest.php:11

3) EqualsTest::testFailure3
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
 'foo
-bar
+bah
 baz
 '

/home/sb/EqualsTest.php:16

FAILURES!
Tests: 3, Assertions: 3, Failures: 3.</screen>
      </example>

      <para>如果 <literal>$expected</literal> 和 <literal>$actual</literal> 是某些特定的类型，将使用更加专门的比较方式，请参阅下文。</para>

      <para><literal>assertEquals(float $expected, float $actual[, string $message = '', float $delta = 0])</literal></para>
      <para>当两个浮点数 <literal>$expected</literal> 和 <literal>$actual</literal> 之间的差值（的绝对值）大于 <literal>$delta</literal> 时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。 </para>
      <para>关于为什么 <literal>$delta</literal> 参数是必须的，请阅读《<ulink url="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html">关于浮点运算，每一位计算机科学家都应该知道的事实</ulink>》</para>
      <example id="writing-tests-for-phpunit.assertions.assertEquals.example2">
        <title>将assertEquals()应用于浮点数时的用法</title>
        <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testSuccess()
    {
        $this->assertEquals(1.0, 1.1, '', 0.2);
    }

    public function testFailure()
    {
        $this->assertEquals(1.0, 1.1);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EqualsTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

.F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that 1.1 matches expected 1.0.

/home/sb/EqualsTest.php:11

FAILURES!
Tests: 2, Assertions: 2, Failures: 1.</screen>
      </example>

      <para><literal>assertEquals(DOMDocument $expected, DOMDocument $actual[, string $message = ''])</literal></para>
      <para>当 <literal>$expected</literal> 和 <literal>$actual</literal> 这两个 DOMDocument 对象所表示的 XML 文档的无注释规范形式不相同时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <example id="writing-tests-for-phpunit.assertions.assertEquals.example3">
        <title>assertEquals()应用于 DOMDocument 对象时的用法</title>
        <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $expected = new DOMDocument;
        $expected->loadXML('<foo><bar/></foo>');

        $actual = new DOMDocument;
        $actual->loadXML('<bar><foo/></bar>');

        $this->assertEquals($expected, $actual);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EqualsTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that two DOM documents are equal.
--- Expected
+++ Actual
@@ @@
 <?xml version="1.0"?>
-<foo>
-  <bar/>
-</foo>
+<bar>
+  <foo/>
+</bar>

/home/sb/EqualsTest.php:12

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>

      <para><literal>assertEquals(object $expected, object $actual[, string $message = ''])</literal></para>
      <para>当 <literal>$expected</literal> 和 <literal>$actual</literal> 这两个对象的属性值不相等时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <example id="writing-tests-for-phpunit.assertions.assertEquals.example4">
        <title>assertEquals()应用于对象时的用法</title>
        <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $expected = new stdClass;
        $expected->foo = 'foo';
        $expected->bar = 'bar';

        $actual = new stdClass;
        $actual->foo = 'bar';
        $actual->baz = 'bar';

        $this->assertEquals($expected, $actual);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EqualsTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that two objects are equal.
--- Expected
+++ Actual
@@ @@
 stdClass Object (
-    'foo' => 'foo'
-    'bar' => 'bar'
+    'foo' => 'bar'
+    'baz' => 'bar'
 )

/home/sb/EqualsTest.php:14

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>

      <para><literal>assertEquals(array $expected, array $actual[, string $message = ''])</literal></para>
      <para>当 <literal>$expected</literal> 和 <literal>$actual</literal> 这两个数组不相等时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>

      <example id="writing-tests-for-phpunit.assertions.assertEquals.example5">
        <title>assertEquals() 应用于数组时的用法</title>
        <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertEquals(array('a', 'b', 'c'), array('a', 'c', 'd'));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EqualsTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
 Array (
     0 => 'a'
-    1 => 'b'
-    2 => 'c'
+    1 => 'c'
+    2 => 'd'
 )

/home/sb/EqualsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertFalse">
      <title>assertFalse()</title>
      <indexterm><primary>assertFalse()</primary></indexterm>
      <para><literal>assertFalse(bool $condition[, string $message = ''])</literal></para>
      <para>当 <literal>$condition</literal> 为 <literal>TRUE</literal> 时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <example id="writing-tests-for-phpunit.assertions.assertFalse.example">
        <title>assertFalse() 的用法</title>
        <programlisting><![CDATA[<?php
class FalseTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertFalse(TRUE);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit FalseTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) FalseTest::testFailure
Failed asserting that true is false.

/home/sb/FalseTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertFileEquals">
      <title>assertFileEquals()</title>
      <indexterm><primary>assertFileEquals()</primary></indexterm>
      <indexterm><primary>assertFileNotEquals()</primary></indexterm>
      <para><literal>assertFileEquals(string $expected, string $actual[, string $message = ''])</literal></para>
      <para>当 <literal>$expected</literal> 所指定的文件与 <literal>$actual</literal> 所指定的文件其内容不同时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertFileNotEquals()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertFileEquals.example">
        <title>assertFileEquals() 的用法</title>
        <programlisting><![CDATA[<?php
class FileEqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertFileEquals('/home/sb/expected', '/home/sb/actual');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit FileEqualsTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) FileEqualsTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'expected
+'actual
 '

/home/sb/FileEqualsTest.php:6

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertFileExists">
      <title>assertFileExists()</title>
      <indexterm><primary>assertFileExists()</primary></indexterm>
      <indexterm><primary>assertFileNotExists()</primary></indexterm>
      <para><literal>assertFileExists(string $filename[, string $message = ''])</literal></para>
      <para>当 <literal>$filename</literal> 所指定的文件不存在时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertFileNotExists()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertFileExists.example">
        <title>assertFileExists() 的用法</title>
        <programlisting><![CDATA[<?php
class FileExistsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertFileExists('/path/to/file');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit FileExistsTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) FileExistsTest::testFailure
Failed asserting that file "/path/to/file" exists.

/home/sb/FileExistsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertGreaterThan">
      <title>assertGreaterThan()</title>
      <indexterm><primary>assertGreaterThan()</primary></indexterm>
      <indexterm><primary>assertAttributeGreaterThan()</primary></indexterm>
      <para><literal>assertGreaterThan(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para>当 <literal>$actual</literal> 的值不大于 <literal>$expected</literal> 的值时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertAttributeGreaterThan()</literal> 是便捷包装(convenience wrappers)，以某个类或对象的某个 <literal>public</literal>、 <literal>protected</literal> 或 <literal>private</literal> 属性作为实际值来进行比较。</para>
      <example id="writing-tests-for-phpunit.assertions.assertGreaterThan.example">
        <title>assertGreaterThan() 的用法</title>
        <programlisting><![CDATA[<?php
class GreaterThanTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertGreaterThan(2, 1);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit GreaterThanTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) GreaterThanTest::testFailure
Failed asserting that 1 is greater than 2.

/home/sb/GreaterThanTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertGreaterThanOrEqual">
      <title>assertGreaterThanOrEqual()</title>
      <indexterm><primary>assertGreaterThanOrEqual()</primary></indexterm>
      <indexterm><primary>assertAttributeGreaterThanOrEqual()</primary></indexterm>
      <para><literal>assertGreaterThanOrEqual(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para>当 <literal>$actual</literal> 的值不大于且不等于 <literal>$expected</literal> 的值时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertAttributeGreaterThanOrEqual()</literal> 是便捷包装(convenience wrappers)，以某个类或对象的某个 <literal>public</literal>、 <literal>protected</literal> 或 <literal>private</literal> 属性作为实际值来进行比较。</para>
      <example id="writing-tests-for-phpunit.assertions.assertGreaterThanOrEqual.example">
        <title>assertGreaterThanOrEqual() 的用法</title>
        <programlisting><![CDATA[<?php
class GreatThanOrEqualTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertGreaterThanOrEqual(2, 1);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit GreaterThanOrEqualTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) GreatThanOrEqualTest::testFailure
Failed asserting that 1 is equal to 2 or is greater than 2.

/home/sb/GreaterThanOrEqualTest.php:6

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertInstanceOf">
      <title>assertInstanceOf()</title>
      <indexterm><primary>assertInstanceOf()</primary></indexterm>
      <indexterm><primary>assertNotInstanceOf()</primary></indexterm>
      <indexterm><primary>assertAttributeInstanceOf()</primary></indexterm>
      <indexterm><primary>assertAttributeNotInstanceOf()</primary></indexterm>
      <para><literal>assertInstanceOf($expected, $actual[, $message = ''])</literal></para>
      <para>当 <literal>$actual</literal> 不是 <literal>$expected</literal>的实例时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertNotInstanceOf()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <para><literal>assertAttributeInstanceOf()</literal> and <literal>assertAttributeNotInstanceOf()</literal> 是便捷包装(convenience wrappers)， 可以应用于某个类或对象的某个 <literal>public</literal>、 <literal>protected</literal> 或 <literal>private</literal> 属性。</para>
      <example id="writing-tests-for-phpunit.assertions.assertInstanceOf.example">
        <title>assertInstanceOf() 的用法</title>
        <programlisting><![CDATA[<?php
class InstanceOfTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertInstanceOf('RuntimeException', new Exception);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit InstanceOfTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) InstanceOfTest::testFailure
Failed asserting that Exception Object (...) is an instance of class "RuntimeException".

/home/sb/InstanceOfTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertInternalType">
      <title>assertInternalType()</title>
      <indexterm><primary>assertInternalType()</primary></indexterm>
      <indexterm><primary>assertNotInternalType()</primary></indexterm>
      <indexterm><primary>assertAttributeInternalType()</primary></indexterm>
      <indexterm><primary>assertAttributeNotInternalType()</primary></indexterm>
      <para><literal>assertInternalType($expected, $actual[, $message = ''])</literal></para>
      <para>当 <literal>$actual</literal> 不是 <literal>$expected</literal> 所指明的类型时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertNotInternalType()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <para><literal>assertAttributeInternalType()</literal> and <literal>assertAttributeNotInternalType()</literal> 是便捷包装(convenience wrappers)， 可以应用于某个类或对象的某个 <literal>public</literal>、 <literal>protected</literal> 或 <literal>private</literal> 属性.</para>
      <example id="writing-tests-for-phpunit.assertions.assertInternalType.example">
        <title>assertInternalType() 的用法</title>
        <programlisting><![CDATA[<?php
class InternalTypeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertInternalType('string', 42);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit InternalTypeTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) InternalTypeTest::testFailure
Failed asserting that 42 is of type "string".

/home/sb/InternalTypeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertJsonFileEqualsJsonFile">
      <title>assertJsonFileEqualsJsonFile()</title>
      <indexterm><primary>assertJsonFileEqualsJsonFile()</primary></indexterm>
      <indexterm><primary>assertJsonFileNotEqualsJsonFile()</primary></indexterm>
      <para><literal>assertJsonFileEqualsJsonFile(mixed $expectedFile, mixed $actualFile[, string $message = ''])</literal></para>
      <para>
        当 <literal>$actualFile</literal> 的值与 <literal>$expectedFile</literal> 的值不匹配时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。
      </para>
      <example id="writing-tests-for-phpunit.assertions.assertJsonFileEqualsJsonFile.example">
        <title>assertJsonFileEqualsJsonFile() 的用法</title>
        <programlisting><![CDATA[<?php
class JsonFileEqualsJsonFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertJsonFileEqualsJsonFile(
          'path/to/fixture/file', 'path/to/actual/file');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit JsonFileEqualsJsonFileTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) JsonFileEqualsJsonFile::testFailure
Failed asserting that '{"Mascott":"Tux"}' matches JSON string "["Mascott", "Tux", "OS", "Linux"]".

/home/sb/JsonFileEqualsJsonFileTest.php:5

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertJsonStringEqualsJsonFile">
      <title>assertJsonStringEqualsJsonFile()</title>
      <indexterm><primary>assertJsonStringEqualsJsonFile()</primary></indexterm>
      <indexterm><primary>assertJsonStringNotEqualsJsonFile()</primary></indexterm>
      <para><literal>assertJsonStringEqualsJsonFile(mixed $expectedFile, mixed $actualJson[, string $message = ''])</literal></para>
      <para>
        当 <literal>$actualJson</literal> 的值与 <literal>$expectedFile</literal>的值不匹配时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。
      </para>
      <example id="writing-tests-for-phpunit.assertions.assertJsonStringEqualsJsonFile.example">
        <title>assertJsonStringEqualsJsonFile() 的用法</title>
        <programlisting><![CDATA[<?php
class JsonStringEqualsJsonFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertJsonStringEqualsJsonFile(
          'path/to/fixture/file', json_encode(array("Mascott" => "ux"))
        );
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit JsonStringEqualsJsonFileTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) JsonStringEqualsJsonFile::testFailure
Failed asserting that '{"Mascott":"ux"}' matches JSON string "{"Mascott":"Tux"}".

/home/sb/JsonStringEqualsJsonFileTest.php:5

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertJsonStringEqualsJsonString">
      <title>assertJsonStringEqualsJsonString()</title>
      <indexterm><primary>assertJsonStringEqualsJsonString()</primary></indexterm>
      <indexterm><primary>assertJsonStringNotEqualsJsonString()</primary></indexterm>
      <para><literal>assertJsonStringEqualsJsonString(mixed $expectedJson, mixed $actualJson[, string $message = ''])</literal></para>
      <para>
        当 <literal>$actualJson</literal> 的值与 <literal>$expectedJson</literal> 的值不匹配时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。
      </para>
      <example id="writing-tests-for-phpunit.assertions.assertJsonStringEqualsJsonString.example">
        <title>assertJsonStringEqualsJsonString() 的用法</title>
        <programlisting><![CDATA[<?php
class JsonStringEqualsJsonStringTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertJsonStringEqualsJsonString(
          json_encode(array("Mascott" => "Tux")), json_encode(array("Mascott" => "ux"))
        );
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit JsonStringEqualsJsonStringTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) JsonStringEqualsJsonStringTest::testFailure
Failed asserting that two objects are equal.
--- Expected
+++ Actual
@@ @@
 stdClass Object (
 -    'Mascott' => 'Tux'
 +    'Mascott' => 'ux'
)

/home/sb/JsonStringEqualsJsonStringTest.php:5

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertLessThan">
      <title>assertLessThan()</title>
      <indexterm><primary>assertLessThan()</primary></indexterm>
      <indexterm><primary>assertAttributeLessThan()</primary></indexterm>
      <para><literal>assertLessThan(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para>当 <literal>$actual</literal> 的值不小于 <literal>$expected</literal> 的值时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertAttributeLessThan()</literal> 是便捷包装(convenience wrappers)，以某个类或对象的某个 <literal>public</literal>、 <literal>protected</literal> 或 <literal>private</literal> 属性作为实际值来进行比较。</para>
      <example id="writing-tests-for-phpunit.assertions.assertLessThan.example">
        <title>assertLessThan() 的用法</title>
        <programlisting><![CDATA[<?php
class LessThanTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertLessThan(1, 2);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit LessThanTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) LessThanTest::testFailure
Failed asserting that 2 is less than 1.

/home/sb/LessThanTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertLessThanOrEqual">
      <title>assertLessThanOrEqual()</title>
      <indexterm><primary>assertLessThanOrEqual()</primary></indexterm>
      <indexterm><primary>assertAttributeLessThanOrEqual()</primary></indexterm>
      <para><literal>assertLessThanOrEqual(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para>当 <literal>$actual</literal> 的值不小于且不等于 <literal>$expected</literal> 的值时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertAttributeLessThanOrEqual()</literal> 是便捷包装(convenience wrappers)，以某个类或对象的某个 <literal>public</literal>、 <literal>protected</literal> 或 <literal>private</literal> 属性作为实际值来进行比较。</para>
      <example id="writing-tests-for-phpunit.assertions.assertLessThanOrEqual.example">
        <title>assertLessThanOrEqual() 的用法</title>
        <programlisting><![CDATA[<?php
class LessThanOrEqualTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertLessThanOrEqual(1, 2);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit LessThanOrEqualTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) LessThanOrEqualTest::testFailure
Failed asserting that 2 is equal to 1 or is less than 1.

/home/sb/LessThanOrEqualTest.php:6

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertNull">
      <title>assertNull()</title>
      <indexterm><primary>assertNull()</primary></indexterm>
      <indexterm><primary>assertNotNull()</primary></indexterm>
      <para><literal>assertNull(mixed $variable[, string $message = ''])</literal></para>
      <para>当 <literal>$variable</literal> 不是 <literal>NULL</literal> 时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertNotNull()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertNull.example">
        <title>assertNull() 的用法</title>
        <programlisting><![CDATA[<?php
class NullTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertNull('foo');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit NotNullTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) NullTest::testFailure
Failed asserting that 'foo' is null.

/home/sb/NotNullTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertObjectHasAttribute">
      <title>assertObjectHasAttribute()</title>
      <indexterm><primary>assertObjectHasAttribute()</primary></indexterm>
      <indexterm><primary>assertObjectNotHasAttribute()</primary></indexterm>
      <para><literal>assertObjectHasAttribute(string $attributeName, object $object[, string $message = ''])</literal></para>
      <para>当 <literal>$object-&gt;attributeName</literal> 不存在时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertObjectNotHasAttribute()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertObjectHasAttribute.example">
        <title>assertObjectHasAttribute() 的用法</title>
        <programlisting><![CDATA[<?php
class ObjectHasAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertObjectHasAttribute('foo', new stdClass);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ObjectHasAttributeTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) ObjectHasAttributeTest::testFailure
Failed asserting that object of class "stdClass" has attribute "foo".

/home/sb/ObjectHasAttributeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertRegExp">
      <title>assertRegExp()</title>
      <indexterm><primary>assertRegExp()</primary></indexterm>
      <indexterm><primary>assertNotRegExp()</primary></indexterm>
      <para><literal>assertRegExp(string $pattern, string $string[, string $message = ''])</literal></para>
      <para>当 <literal>$string</literal> 与正则表达式 <literal>$pattern</literal> 不匹配时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertNotRegExp()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertRegExp.example">
        <title>assertRegExp() 的用法</title>
        <programlisting><![CDATA[<?php
class RegExpTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertRegExp('/foo/', 'bar');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit RegExpTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) RegExpTest::testFailure
Failed asserting that 'bar' matches PCRE pattern "/foo/".

/home/sb/RegExpTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertStringMatchesFormat">
      <title>assertStringMatchesFormat()</title>
      <indexterm><primary>assertStringMatchesFormat()</primary></indexterm>
      <indexterm><primary>assertStringNotMatchesFormat()</primary></indexterm>
      <para><literal>assertStringMatchesFormat(string $format, string $string[, string $message = ''])</literal></para>
      <para>当 <literal>$string</literal> 与格式串 <literal>$format</literal> 不匹配时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertStringNotMatchesFormat()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertStringMatchesFormat.example">
        <title>assertStringMatchesFormat() 的用法</title>
        <programlisting><![CDATA[<?php
class StringMatchesFormatTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertStringMatchesFormat('%i', 'foo');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit StringMatchesFormatTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) StringMatchesFormatTest::testFailure
Failed asserting that 'foo' matches PCRE pattern "/^[+-]?\d+$/s".

/home/sb/StringMatchesFormatTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
      <para>格式串中可以使用如下占位符：</para>
      <itemizedlist>
        <listitem><para><literal>%e</literal>：表示目录分隔符，以 Linux 系统为例，是 <literal>/</literal>。</para></listitem>
        <listitem><para><literal>%s</literal>：一个或多个除了换行符以外的任意字符（非空白字符或者空白字符）。</para></listitem>
        <listitem><para><literal>%S</literal>：零个或多个除了换行符以外的任意字符（非空白字符或者空白字符）。</para></listitem>
        <listitem><para><literal>%a</literal>：一个或多个包括换行符在内的任意字符（非空白字符或者空白字符）。</para></listitem>
        <listitem><para><literal>%A</literal>：零个或多个包括换行符在内的任意字符（非空白字符或者空白字符）。</para></listitem>
        <listitem><para><literal>%w</literal>：零个或多个空白字符。</para></listitem>
        <listitem><para><literal>%i</literal>：带符号整数值，例如 <literal>+3142</literal>、<literal>-3142</literal>。</para></listitem>
        <listitem><para><literal>%d</literal>：无符号整数值，例如 <literal>123456</literal>。</para></listitem>
        <listitem><para><literal>%x</literal>：一个或多个十六进制字符。所谓十六进制字符，指的是在以下范围内的字符：<literal>0-9</literal>、<literal>a-f</literal>、<literal>A-F</literal>。 </para></listitem>
        <listitem><para><literal>%f</literal>：浮点数，例如 <literal>3.142</literal>、<literal>-3.142</literal>、<literal>3.142E-10</literal>、<literal>3.142e+10</literal>。</para></listitem>
        <listitem><para><literal>%c</literal>：单个任意字符。</para></listitem>
      </itemizedlist>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertStringMatchesFormatFile">
      <title>assertStringMatchesFormatFile()</title>
      <indexterm><primary>assertStringMatchesFormatFile()</primary></indexterm>
      <indexterm><primary>assertStringNotMatchesFormatFile()</primary></indexterm>
      <para><literal>assertStringMatchesFormatFile(string $formatFile, string $string[, string $message = ''])</literal></para>
      <para>当 <literal>$string</literal> 与 <literal>$formatFile</literal> 的内容不匹配时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertStringNotMatchesFormatFile()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertStringMatchesFormatFile.example">
        <title>assertStringMatchesFormatFile() 的用法</title>
        <programlisting><![CDATA[<?php
class StringMatchesFormatFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertStringMatchesFormatFile('/path/to/expected.txt', 'foo');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit StringMatchesFormatFileTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) StringMatchesFormatFileTest::testFailure
Failed asserting that 'foo' matches PCRE pattern "/^[+-]?\d+
$/s".

/home/sb/StringMatchesFormatFileTest.php:6

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertSame">
      <title>assertSame()</title>
      <indexterm><primary>assertSame()</primary></indexterm>
      <indexterm><primary>assertNotSame()</primary></indexterm>
      <indexterm><primary>assertAttributeSame()</primary></indexterm>
      <indexterm><primary>assertAttributeNotSame()</primary></indexterm>
      <para><literal>assertSame(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para>当两个变量 <literal>$expected</literal> 和 <literal>$actual</literal> 的类型与值不完全相同时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertNotSame()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <para><literal>assertAttributeSame()</literal> and <literal>assertAttributeNotSame()</literal> 是便捷包装(convenience wrappers)， 以某个类或对象的某个 <literal>public</literal>、 <literal>protected</literal> 或 <literal>private</literal> 属性作为实际值来进行比较。</para>
      <example id="writing-tests-for-phpunit.assertions.assertSame.example">
        <title>assertSame() 的用法</title>
        <programlisting><![CDATA[<?php
class SameTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertSame('2204', 2204);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit SameTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) SameTest::testFailure
Failed asserting that 2204 is identical to '2204'.

/home/sb/SameTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
      </example>

      <para><literal>assertSame(object $expected, object $actual[, string $message = ''])</literal></para>
      <para>当两个变量 <literal>$expected</literal> 和 <literal>$actual</literal> 不是指向同一个对象的引用时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>

      <example id="writing-tests-for-phpunit.assertions.assertSame.example2">
        <title>assertSame() 应用于对象时的用法</title>
        <programlisting><![CDATA[<?php
class SameTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertSame(new stdClass, new stdClass);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit SameTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) SameTest::testFailure
Failed asserting that two variables reference the same object.

/home/sb/SameTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertSelectCount">
      <title>assertSelectCount()</title>
      <indexterm><primary>assertSelectCount()</primary></indexterm>
      <para><literal>assertSelectCount(array $selector, integer $count, mixed $actual[, string $message = '', boolean $isHtml = TRUE])</literal></para>
      <para>将 CSS 选择器 <literal>$selector</literal> 应用于 DOMNode <literal>$actual</literal>，当匹配元素的数量与 <literal>$count</literal> 不相符时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>$count</literal> 可以是以下类型之一：</para>
      <itemizedlist>
        <listitem><literal>boolean</literal>：断言存在符合条件的元素(<literal>TRUE</literal>)或不存在这样的元素(<literal>FALSE</literal>)。</listitem>
        <listitem><literal>integer</literal>：断言符合条件的元素的数量。</listitem>
        <listitem><literal>array</literal>：断言符合条件的元素的数量所在的区间，用 <literal>&lt;</literal>、<literal>&gt;</literal>、<literal>&lt;=</literal > 和 <literal>&gt;=</literal> 作为键名来指定相关信息。</listitem>
      </itemizedlist>
      <example id="writing-tests-for-phpunit.assertions.assertSelectCount.example">
        <title>assertSelectCount() 的用法</title>
        <programlisting><![CDATA[<?php
class SelectCountTest extends PHPUnit_Framework_TestCase
{
    protected function setUp()
    {
        $this->xml = new DomDocument;
        $this->xml->loadXML('<foo><bar/><bar/><bar/></foo>');
    }

    public function testAbsenceFailure()
    {
        $this->assertSelectCount('foo bar', FALSE, $this->xml);
    }

    public function testPresenceFailure()
    {
        $this->assertSelectCount('foo baz', TRUE, $this->xml);
    }

    public function testExactCountFailure()
    {
        $this->assertSelectCount('foo bar', 5, $this->xml);
    }

    public function testRangeFailure()
    {
        $this->assertSelectCount('foo bar', array('>'=>6, '<'=>8), $this->xml);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit SelectCountTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

FFFF

Time: 0 seconds, Memory: 5.50Mb

There were 4 failures:

1) SelectCountTest::testAbsenceFailure
Failed asserting that true is false.

/home/sb/SelectCountTest.php:12

2) SelectCountTest::testPresenceFailure
Failed asserting that false is true.

/home/sb/SelectCountTest.php:17

3) SelectCountTest::testExactCountFailure
Failed asserting that 3 matches expected 5.

/home/sb/SelectCountTest.php:22

4) SelectCountTest::testRangeFailure
Failed asserting that false is true.

/home/sb/SelectCountTest.php:27

FAILURES!
Tests: 4, Assertions: 4, Failures: 4.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertSelectEquals">
      <title>assertSelectEquals()</title>
      <indexterm><primary>assertSelectEquals()</primary></indexterm>
      <para><literal>assertSelectEquals(array $selector, string $content, integer $count, mixed $actual[, string $message = '', boolean $isHtml = TRUE])</literal></para>
      <para>将 CSS 选择器 <literal>$selector</literal> 应用于 DOMNode <literal>$actual</literal>，当匹配的元素中内容为 <literal>$content</literal> 的元素的数量与 <literal>$count</literal> 不相符时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>$count</literal> 可以是以下类型之一：</para>
      <itemizedlist>
        <listitem><literal>boolean</literal>：断言存在符合条件的元素(<literal>TRUE</literal>)或不存在这样的元素(<literal>FALSE</literal>)。</listitem>
        <listitem><literal>integer</literal>：断言符合条件的元素的数量。</listitem>
        <listitem><literal>array</literal>：断言符合条件的元素的数量所在的区间，用 <literal>&lt;</literal>、<literal>&gt;</literal>、<literal>&lt;=</literal > 和 <literal>&gt;=</literal> 作为键名来指定相关信息。</listitem>
      </itemizedlist>      <example id="writing-tests-for-phpunit.assertions.assertSelectEquals.example">
        <title>assertSelectEquals() 的用法</title>
        <programlisting><![CDATA[<?php
class SelectEqualsTest extends PHPUnit_Framework_TestCase
{
    protected function setUp()
    {
        $this->xml = new DomDocument;
        $this->xml->loadXML('<foo><bar>Baz</bar><bar>Baz</bar></foo>');
    }

    public function testAbsenceFailure()
    {
        $this->assertSelectEquals('foo bar', 'Baz', FALSE, $this->xml);
    }

    public function testPresenceFailure()
    {
        $this->assertSelectEquals('foo bar', 'Bat', TRUE, $this->xml);
    }

    public function testExactCountFailure()
    {
        $this->assertSelectEquals('foo bar', 'Baz', 5, $this->xml);
    }

    public function testRangeFailure()
    {
        $this->assertSelectEquals('foo bar', 'Baz', array('>'=>6, '<'=>8), $this->xml);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit SelectEqualsTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

FFFF

Time: 0 seconds, Memory: 5.50Mb

There were 4 failures:

1) SelectEqualsTest::testAbsenceFailure
Failed asserting that true is false.

/home/sb/SelectEqualsTest.php:12

2) SelectEqualsTest::testPresenceFailure
Failed asserting that false is true.

/home/sb/SelectEqualsTest.php:17

3) SelectEqualsTest::testExactCountFailure
Failed asserting that 2 matches expected 5.

/home/sb/SelectEqualsTest.php:22

4) SelectEqualsTest::testRangeFailure
Failed asserting that false is true.

/home/sb/SelectEqualsTest.php:27

FAILURES!
Tests: 4, Assertions: 4, Failures: 4.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertSelectRegExp">
      <title>assertSelectRegExp()</title>
      <indexterm><primary>assertSelectRegExp()</primary></indexterm>
      <para><literal>assertSelectRegExp(array $selector, string $pattern, integer $count, mixed $actual[, string $message = '', boolean $isHtml = TRUE])</literal></para>
      <para>将 CSS 选择器 <literal>$selector</literal> 应用于 DOMNode <literal>$actual</literal>，当匹配的元素中内容与正则表达式 <literal>$pattern</literal> 匹配的元素的数量与 <literal>$count</literal> 不相符时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>$count</literal> 可以是以下类型之一：</para>
      <itemizedlist>
        <listitem><literal>boolean</literal>：断言存在符合条件的元素(<literal>TRUE</literal>)或不存在这样的元素(<literal>FALSE</literal>)。</listitem>
        <listitem><literal>integer</literal>：断言符合条件的元素的数量。</listitem>
        <listitem><literal>array</literal>：断言符合条件的元素的数量所在的区间，用 <literal>&lt;</literal>、<literal>&gt;</literal>、<literal>&lt;=</literal > 和 <literal>&gt;=</literal> 作为键名来指定相关信息。</listitem>
      </itemizedlist>
      <example id="writing-tests-for-phpunit.assertions.assertSelectRegExp.example">
        <title>assertSelectRegExp() 的用法</title>
        <programlisting><![CDATA[<?php
class SelectRegExpTest extends PHPUnit_Framework_TestCase
{
    protected function setUp()
    {
        $this->xml = new DomDocument;
        $this->xml->loadXML('<foo><bar>Baz</bar><bar>Baz</bar></foo>');
    }

    public function testAbsenceFailure()
    {
        $this->assertSelectRegExp('foo bar', '/Ba.*/', FALSE, $this->xml);
    }

    public function testPresenceFailure()
    {
        $this->assertSelectRegExp('foo bar', '/B[oe]z]/', TRUE, $this->xml);
    }

    public function testExactCountFailure()
    {
        $this->assertSelectRegExp('foo bar', '/Ba.*/', 5, $this->xml);
    }

    public function testRangeFailure()
    {
        $this->assertSelectRegExp('foo bar', '/Ba.*/', array('>'=>6, '<'=>8), $this->xml);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit SelectRegExpTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

FFFF

Time: 0 seconds, Memory: 5.50Mb

There were 4 failures:

1) SelectRegExpTest::testAbsenceFailure
Failed asserting that true is false.

/home/sb/SelectRegExpTest.php:12

2) SelectRegExpTest::testPresenceFailure
Failed asserting that false is true.

/home/sb/SelectRegExpTest.php:17

3) SelectRegExpTest::testExactCountFailure
Failed asserting that 2 matches expected 5.

/home/sb/SelectRegExpTest.php:22

4) SelectRegExpTest::testRangeFailure
Failed asserting that false is true.

/home/sb/SelectRegExpTest.php:27

FAILURES!
Tests: 4, Assertions: 4, Failures: 4.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertStringEndsWith">
      <title>assertStringEndsWith()</title>
      <indexterm><primary>assertStringEndsWith()</primary></indexterm>
      <indexterm><primary>assertStringEndsNotWith()</primary></indexterm>
      <para><literal>assertStringEndsWith(string $suffix, string $string[, string $message = ''])</literal></para>
      <para>当 <literal>$string</literal> 不以 <literal>$suffix</literal> 结尾时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertStringEndsNotWith()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertStringEndsWith.example">
        <title>assertStringEndsWith() 的用法</title>
        <programlisting><![CDATA[<?php
class StringEndsWithTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertStringEndsWith('suffix', 'foo');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit StringEndsWithTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 1 second, Memory: 5.00Mb

There was 1 failure:

1) StringEndsWithTest::testFailure
Failed asserting that 'foo' ends with "suffix".

/home/sb/StringEndsWithTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertStringEqualsFile">
      <title>assertStringEqualsFile()</title>
      <indexterm><primary>assertStringEqualsFile()</primary></indexterm>
      <indexterm><primary>assertStringNotEqualsFile()</primary></indexterm>
      <para><literal>assertStringEqualsFile(string $expectedFile, string $actualString[, string $message = ''])</literal></para>
      <para>当 <literal>$expectedFile</literal> 所指定的文件其内容与 <literal>$actualString</literal> 不相同时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertStringNotEqualsFile()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertStringEqualsFile.example">
        <title>assertStringEqualsFile() 的用法</title>
        <programlisting><![CDATA[<?php
class StringEqualsFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertStringEqualsFile('/home/sb/expected', 'actual');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit StringEqualsFileTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) StringEqualsFileTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'expected
-'
+'actual'

/home/sb/StringEqualsFileTest.php:6

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertStringStartsWith">
      <title>assertStringStartsWith()</title>
      <indexterm><primary>assertStringStartsWith()</primary></indexterm>
      <indexterm><primary>assertStringStartsNotWith()</primary></indexterm>
      <para><literal>assertStringStartsWith(string $prefix, string $string[, string $message = ''])</literal></para>
      <para>当 <literal>$string</literal> 不以 <literal>$prefix</literal> 开头时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertStringStartsNotWith()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertStringStartsWith.example">
        <title>assertStringStartsWith() 的用法</title>
        <programlisting><![CDATA[<?php
class StringStartsWithTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertStringStartsWith('prefix', 'foo');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit StringStartsWithTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) StringStartsWithTest::testFailure
Failed asserting that 'foo' starts with "prefix".

/home/sb/StringStartsWithTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertTag">
      <title>assertTag()</title>
      <indexterm><primary>assertTag()</primary></indexterm>
      <indexterm><primary>assertNotTag()</primary></indexterm>
      <para><literal>assertTag(array $matcher, string $actual[, string $message = '', boolean $isHtml = TRUE])</literal></para>
      <para>当 <literal>$actual</literal> 与 <literal>$matcher</literal> 所指定的信息不匹配时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>$matcher</literal> 是关联数组，用来为断言指定匹配准则：</para>
      <itemizedlist>
        <listitem><literal>id</literal>： 节点必须具有指定 <literal>id</literal> 属性值。</listitem>
        <listitem><literal>tag</literal>：节点的类型必须与对应值相匹配。</listitem>
        <listitem><literal>attributes</literal>：节点的属性必须与 <literal>$attributes</literal> 关联数组中所描述的对应值相匹配。</listitem>
        <listitem><literal>content</literal>：文本内容必须与指定值相匹配。</listitem>
        <listitem><literal>parent</literal>：节点的父节点必须匹配于 <literal>$parent</literal> 关联数组。</listitem>
        <listitem><literal>child</literal>： 节点的直接子节点（immediate children，即节点的下一级节点）中要至少有一个与 <literal>$child</literal> 关联数组所描述的准则一致。</listitem>
        <listitem><literal>ancestor</literal>：节点的祖先节点中要至少有一个与 <literal>$ancestor</literal> 关联数组所描述的准则一致。</listitem>
        <listitem><literal>descendant</literal>：节点的后代节点中要至少有一个与 <literal>$descendant</literal> 关联数组所描述的准则一致。</listitem>
        <listitem><literal>children</literal>：关联数组，节点的子节点的计数信息。
          <itemizedlist>
            <listitem><literal>count</literal>：匹配的子节点数量必须等于此数字。</listitem>
            <listitem><literal>less_than</literal>：匹配的子节点数量必须小于此数字。</listitem>
            <listitem><literal>greater_than</literal>： 匹配的子节点数量必须大于此数字。</listitem>
            <listitem><literal>only</literal>：另一个关联数组，由用来对子节点进行匹配的键名组成，只有匹配的子节点才会进行计数。</listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
      <para><literal>assertNotTag()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertTag.example">
        <title>assertTag() 的用法</title>
        <programlisting><![CDATA[<?php
// 这个匹配器断言存在 id="my_id" 的元素。
$matcher = array('id' => 'my_id');

// 这个匹配器断言存在 "span" 标签。
$matcher = array('tag' => 'span');

// 这个匹配器断言存在内容为 "Hello World" 的 "span" 标签。
$matcher = array('tag' => 'span', 'content' => 'Hello World');

// 这个匹配器断言存在其内容与正则表达式模式相匹配的 "span" 标签。
$matcher = array('tag' => 'span', 'content' => 'regexp:/Try P(HP|ython)/');

// 这个匹配器断言存在class属性为 "list" 的 "span"。
$matcher = array(
  'tag'        => 'span',
  'attributes' => array('class' => 'list')
);

// 这个匹配器断言存在父元素为 "div" 的 "span"。
$matcher = array(
  'tag'    => 'span',
  'parent' => array('tag' => 'div')
);

// 这个匹配器断言存在某个 "span"，其祖先元素中有 "table"。
$matcher = array(
  'tag'      => 'span',
  'ancestor' => array('tag' => 'table')
);

// 这个匹配器断言存在某个 "span"，其直接子节点中至少有一个 "em"。
$matcher = array(
  'tag'   => 'span',
  'child' => array('tag' => 'em')
);

// 这个匹配器断言存在某个 "span"，其所有后代子节点中存在 "strong" 标签。
$matcher = array(
  'tag'        => 'span',
  'descendant' => array('tag' => 'strong')
);

// 这个匹配器断言存在某个 "span"，其直接子节点中包含有 5 到 10 个 "em" 标签。
$matcher = array(
  'tag'      => 'span',
  'children' => array(
    'less_than'    => 11,
    'greater_than' => 4,
    'only'         => array('tag' => 'em')
  )
);

// 这个匹配器断言存在一个 "div"，其祖先元素中有 "ul"，且其父元素是 class="enum" 的 "li"，
// 且其后代子节点中存在一个 id="my_test" 同时文本内容为 "Hello World" 的 "span"。
$matcher = array(
  'tag'        => 'div',
  'ancestor'   => array('tag' => 'ul'),
  'parent'     => array(
    'tag'        => 'li',
    'attributes' => array('class' => 'enum')
  ),
  'descendant' => array(
    'tag'   => 'span',
    'child' => array(
      'id'      => 'my_test',
      'content' => 'Hello World'
    )
  )
);

// 使用 assertTag() 来将 $matcher 应用到 $html 片段上。
$this->assertTag($matcher, $html);

// 使用 assertTag() 来将 $matcher 应用到 $xml 片段上。
$this->assertTag($matcher, $xml, '', FALSE);
?>]]></programlisting>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertThat">
      <title>assertThat()</title>
      <indexterm><primary>assertThat()</primary></indexterm>

      <para>
        可以用 <literal>PHPUnit_Framework_Constraint</literal> 类来订立更加复杂的断言。这些断言可以用 <literal>assertThat()</literal> 方法对其进行评定。
        <xref linkend="writing-tests-for-phpunit.assertions.assertThat.example" />展示了如何用 <literal>logicalNot()</literal> 和 <literal>equalTo()</literal> 约束条件来表达与 <literal>assertNotEquals()</literal> 等价的断言。
      </para>

      <para><literal>assertThat(mixed $value, PHPUnit_Framework_Constraint $constraint[, $message = ''])</literal></para>
      <para>当 <literal>$value</literal> 与 <literal>$constraint</literal> 不匹配时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <example id="writing-tests-for-phpunit.assertions.assertThat.example">
        <title>assertThat() 的用法</title>
        <programlisting><![CDATA[<?php
class BiscuitTest extends PHPUnit_Framework_TestCase
{
    public function testEquals()
    {
        $theBiscuit = new Biscuit('Ginger');
        $myBiscuit  = new Biscuit('Ginger');

        $this->assertThat(
          $theBiscuit,
          $this->logicalNot(
            $this->equalTo($myBiscuit)
          )
        );
    }
}
?>]]></programlisting>
      </example>

      <para>
        <xref linkend="writing-tests-for-phpunit.assertions.assertThat.tables.constraints" />列举了所有可用的 <literal>PHPUnit_Framework_Constraint</literal> 类。
      </para>

      <table id="writing-tests-for-phpunit.assertions.assertThat.tables.constraints">
        <title>约束条件</title>

        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>约束条件</entry>
              <entry>含义</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <indexterm><primary>attribute()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_Attribute attribute(PHPUnit_Framework_Constraint $constraint, $attributeName)</literal></entry>
              <entry>此约束将另外一个约束应用于某个类或对象的某个属性。</entry>
            </row>
            <row>
              <indexterm><primary>anything()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsAnything anything()</literal></entry>
              <entry>此约束接受任意输入值。</entry>
            </row>
            <row>
              <indexterm><primary>arrayHasKey()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_ArrayHasKey arrayHasKey(mixed $key)</literal></entry>
              <entry>此约束断言所评定的数组拥有指定键名。</entry>
            </row>
            <row>
              <indexterm><primary>contains()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_TraversableContains contains(mixed $value)</literal></entry>
              <entry>此约束断言所评定的 <literal>array</literal> 或实现了 <literal>Iterator</literal> 接口的对象包含有给定值。</entry>
            </row>
            <row>
              <indexterm><primary>containsOnly()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_TraversableContainsOnly containsOnly(string $type)</literal></entry>
              <entry>此约束断言所评定的 <literal>array</literal> 或实现了 <literal>Iterator</literal> 接口的对象仅包含给定类型的值。</entry>
            </row>
            <row>
              <indexterm><primary>containsOnlyInstancesOf()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_TraversableContainsOnly containsOnlyInstancesOf(string $classname)</literal></entry>
              <entry>此约束断言所评定的 <literal>array</literal> 或实现了 <literal>Iterator</literal> 接口的对象仅包含给定类名的类的实例。</entry>
            </row>
            <row>
              <indexterm><primary>equalTo()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsEqual equalTo($value, $delta = 0, $maxDepth = 10)</literal></entry>
              <entry>此约束检验一个值是否等于另外一个。</entry>
            </row>
            <row>
              <indexterm><primary>attributeEqualTo()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_Attribute attributeEqualTo($attributeName, $value, $delta = 0, $maxDepth = 10)</literal></entry>
              <entry>此约束检验一个值是否等于某个类或对象的某个属性。</entry>
            </row>
            <row>
              <indexterm><primary>fileExists()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_FileExists fileExists()</literal></entry>
              <entry>此约束检验所评定的文件（名）是否存在。</entry>
            </row>
            <row>
              <indexterm><primary>greaterThan()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_GreaterThan greaterThan(mixed $value)</literal></entry>
              <entry>此约束断言所评定的值大于给定值。</entry>
            </row>
            <row>
              <indexterm><primary>greaterThanOrEqual()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_Or greaterThanOrEqual(mixed $value)</literal></entry>
              <entry>此约束断言所评定的值大于或等于给定值。</entry>
            </row>
            <row>
              <indexterm><primary>classHasAttribute()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_ClassHasAttribute classHasAttribute(string $attributeName)</literal></entry>
              <entry>此约束断言所评定的类具有给定属性。</entry>
            </row>
            <row>
              <indexterm><primary>classHasStaticAttribute()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_ClassHasStaticAttribute classHasStaticAttribute(string $attributeName)</literal></entry>
              <entry>此约束断言所评定的类具有给定静态属性。</entry>
            </row>
            <row>
              <indexterm><primary>hasAttribute()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_ObjectHasAttribute hasAttribute(string $attributeName)</literal></entry>
              <entry>此约束断言所评定的对象具有给定属性。</entry>
            </row>
            <row>
              <indexterm><primary>identicalTo()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsIdentical identicalTo(mixed $value)</literal></entry>
              <entry>此约束断言所评定的值与另外一个值全等。</entry>
            </row>
            <row>
              <indexterm><primary>isFalse()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsFalse isFalse()</literal></entry>
              <entry>此约束断言所评定的值为 <literal>FALSE</literal>。</entry>
            </row>
            <row>
              <indexterm><primary>isInstanceOf()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsInstanceOf isInstanceOf(string $className)</literal></entry>
              <entry>此约束断言所评定的对象是给定类的实例。</entry>
            </row>
            <row>
              <indexterm><primary>isNull()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsNull isNull()</literal></entry>
              <entry>此约束断言所评定的值为 <literal>NULL</literal>。</entry>
            </row>
            <row>
              <indexterm><primary>isTrue()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsTrue isTrue()</literal></entry>
              <entry>此约束断言所评定的值为 <literal>TRUE</literal>。</entry>
            </row>
            <row>
              <indexterm><primary>isType()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsType isType(string $type)</literal></entry>
              <entry>此约束断言所评定的值是指定类型的。</entry>
            </row>
            <row>
              <indexterm><primary>lessThan()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_LessThan lessThan(mixed $value)</literal></entry>
              <entry>此约束断言所评定的值小于给定值。</entry>
            </row>
            <row>
              <indexterm><primary>lessThanOrEqual()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_Or lessThanOrEqual(mixed $value)</literal></entry>
              <entry>此约束断言所评定的值小于或等于给定值。</entry>
            </row>
            <row>
              <indexterm><primary>logicalAnd()</primary></indexterm>
              <entry><literal>logicalAnd()</literal></entry>
              <entry>逻辑与。</entry>
            </row>
            <row>
              <indexterm><primary>logicalNot()</primary></indexterm>
              <entry><literal>logicalNot(PHPUnit_Framework_Constraint $constraint)</literal></entry>
              <entry>逻辑非。</entry>
            </row>
            <row>
              <indexterm><primary>logicalOr()</primary></indexterm>
              <entry><literal>logicalOr()</literal></entry>
              <entry>逻辑或。</entry>
            </row>
            <row>
              <indexterm><primary>logicalXor()</primary></indexterm>
              <entry><literal>logicalXor()</literal></entry>
              <entry>逻辑异或。</entry>
            </row>
            <row>
              <indexterm><primary>matchesRegularExpression()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_PCREMatch matchesRegularExpression(string $pattern)</literal></entry>
              <entry>此约束断言所评定的字符串匹配于正则表达式。</entry>
            </row>
            <row>
              <indexterm><primary>stringContains()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_StringContains stringContains(string $string, bool $case)</literal></entry>
              <entry>此约束断言所评定的字符串包含指定字符串。</entry>
            </row>
            <row>
              <indexterm><primary>stringEndsWith()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_StringEndsWith stringEndsWith(string $suffix)</literal></entry>
              <entry>此约束断言所评定的字符串以给定后缀结尾。</entry>
            </row>
            <row>
              <indexterm><primary>stringStartsWith()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_StringStartsWith stringStartsWith(string $prefix)</literal></entry>
              <entry>此约束断言所评定的字符串以给定前缀开头。</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertTrue">
      <title>assertTrue()</title>
      <indexterm><primary>assertTrue()</primary></indexterm>
      <para><literal>assertTrue(bool $condition[, string $message = ''])</literal></para>
      <para>当 <literal>$condition</literal> 为 <literal>FALSE</literal>时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <example id="writing-tests-for-phpunit.assertions.assertTrue.example">
        <title>assertTrue() 的用法</title>
        <programlisting><![CDATA[<?php
class TrueTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertTrue(FALSE);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit TrueTest</userinput>
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) TrueTest::testFailure
Failed asserting that false is true.

/home/sb/TrueTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertXmlFileEqualsXmlFile">
      <title>assertXmlFileEqualsXmlFile()</title>
      <indexterm><primary>assertXmlFileEqualsXmlFile()</primary></indexterm>
      <indexterm><primary>assertXmlFileNotEqualsXmlFile()</primary></indexterm>
      <para><literal>assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile[, string $message = ''])</literal></para>
      <para>当 <literal>$actualFile</literal> 中的 XML 文档与 <literal>$expectedFile</literal> 中的 XML 文档不相等时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertXmlFileNotEqualsXmlFile()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertXmlFileEqualsXmlFile.example">
        <title>assertXmlFileEqualsXmlFile() 的用法</title>
        <programlisting><![CDATA[<?php
class XmlFileEqualsXmlFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertXmlFileEqualsXmlFile(
          '/home/sb/expected.xml', '/home/sb/actual.xml');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit XmlFileEqualsXmlFileTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) XmlFileEqualsXmlFileTest::testFailure
Failed asserting that two DOM documents are equal.
--- Expected
+++ Actual
@@ @@
 <?xml version="1.0"?>
 <foo>
-  <bar/>
+  <baz/>
 </foo>

/home/sb/XmlFileEqualsXmlFileTest.php:7

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertXmlStringEqualsXmlFile">
      <title>assertXmlStringEqualsXmlFile()</title>
      <indexterm><primary>assertXmlStringEqualsXmlFile()</primary></indexterm>
      <indexterm><primary>assertXmlStringNotEqualsXmlFile()</primary></indexterm>
      <para><literal>assertXmlStringEqualsXmlFile(string $expectedFile, string $actualXml[, string $message = ''])</literal></para>
      <para>当 <literal>$actualXml</literal> 中的 XML 文档与 <literal>$expectedFile</literal> 中的 XML 文档不相等时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertXmlStringNotEqualsXmlFile()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertXmlStringEqualsXmlFile.example">
        <title>assertXmlStringEqualsXmlFile() 的用法</title>
        <programlisting><![CDATA[<?php
class XmlStringEqualsXmlFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertXmlStringEqualsXmlFile(
          '/home/sb/expected.xml', '<foo><baz/></foo>');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit XmlStringEqualsXmlFileTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) XmlStringEqualsXmlFileTest::testFailure
Failed asserting that two DOM documents are equal.
--- Expected
+++ Actual
@@ @@
 <?xml version="1.0"?>
 <foo>
-  <bar/>
+  <baz/>
 </foo>

/home/sb/XmlStringEqualsXmlFileTest.php:7

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="writing-tests-for-phpunit.assertions.assertXmlStringEqualsXmlString">
      <title>assertXmlStringEqualsXmlString()</title>
      <indexterm><primary>assertXmlStringEqualsXmlString()</primary></indexterm>
      <indexterm><primary>assertXmlStringNotEqualsXmlString()</primary></indexterm>
      <para><literal>assertXmlStringEqualsXmlString(string $expectedXml, string $actualXml[, string $message = ''])</literal></para>
      <para>当 <literal>$actualXml</literal> 中的 XML 文档与 <literal>$expectedXml</literal> 中的 XML 文档不相等时，报告一个错误，错误讯息的内容由 <literal>$message</literal> 指定。</para>
      <para><literal>assertXmlStringNotEqualsXmlString()</literal> 是与之相反的断言，并接受相同的参数。</para>
      <example id="writing-tests-for-phpunit.assertions.assertXmlStringEqualsXmlString.example">
        <title>assertXmlStringEqualsXmlString() 的用法</title>
        <programlisting><![CDATA[<?php
class XmlStringEqualsXmlStringTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertXmlStringEqualsXmlString(
          '<foo><bar/></foo>', '<foo><baz/></foo>');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit XmlStringEqualsXmlStringTest</userinput><![CDATA[
PHPUnit 3.8.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) XmlStringEqualsXmlStringTest::testFailure
Failed asserting that two DOM documents are equal.
--- Expected
+++ Actual
@@ @@
 <?xml version="1.0"?>
 <foo>
-  <bar/>
+  <baz/>
 </foo>

/home/sb/XmlStringEqualsXmlStringTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>
  </section>

  <section id="writing-tests-for-phpunit.error-output">
    <title>错误相关信息的输出</title>

    <para>
      当有测试失败时，PHPUnit 全力提供尽可能多的有助于找出问题所在的上下文信息。
    </para>

    <example id="writing-tests-for-phpunit.error-output.examples.ArrayDiffTest.php">
      <title>数组比较失败时生成的错误相关信息输出</title>
      <programlisting><![CDATA[<?php
class ArrayDiffTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this->assertEquals(
            array(1,2,3 ,4,5,6),
            array(1,2,33,4,5,6)
        );
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ArrayDiffTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) ArrayDiffTest::testEquality
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
 Array (
     0 => 1
     1 => 2
-    2 => 3
+    2 => 33
     3 => 4
     4 => 5
     5 => 6
 )

/home/sb/ArrayDiffTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
    <para>
      在这个例子中，数组中只有一个值不同，但其他值也都同时显示出来，以提供关于错误发生的位置的上下文信息。
    </para>

    <para>
      当生成的输出很长而难以阅读时，PHPUnit 将对其进行分割，并在每个差异附近提供少数几行上下文信息。
    </para>
    <example id="writing-tests-for-phpunit.error-output.examples.LongArrayDiffTest.php">
      <title>长数组比较失败时生成的错误相关信息输出</title>
      <programlisting><![CDATA[<?php
class LongArrayDiffTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this->assertEquals(
            array(0,0,0,0,0,0,0,0,0,0,0,0,1,2,3 ,4,5,6),
            array(0,0,0,0,0,0,0,0,0,0,0,0,1,2,33,4,5,6)
        );
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit LongArrayDiffTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) LongArrayDiffTest::testEquality
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
     13 => 2
-    14 => 3
+    14 => 33
     15 => 4
     16 => 5
     17 => 6
 )


/home/sb/LongArrayDiffTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
    <section id="writing-tests-for-phpunit.error-output.edge-cases">
      <title>边缘情况</title>

      <para>
        当比较失败时，PHPUnit 为输入值建立文本表示，然后以此进行对比。这种实现导致在差异指示中显示出来的问题可能比实际上存在的多。
      </para>

      <para>
        这种情况只出现在对数组或者对象使用 assertEquals 或其他“弱”比较函数时。
      </para>

      <example id="writing-tests-for-phpunit.error-output.edge-cases.examples.ArrayWeakComparisonTest.php">
        <title>当使用弱比较时在生成的差异结果中出现的边缘情况</title>
        <programlisting><![CDATA[<?php
class ArrayWeakComparisonTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this->assertEquals(
            array(1  ,2,3 ,4,5,6),
            array('1',2,33,4,5,6)
        );
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ArrayWeakComparisonTest</userinput><![CDATA[
PHPUnit 3.6.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) ArrayWeakComparisonTest::testEquality
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
 Array (
-    0 => 1
+    0 => '1'
     1 => 2
-    2 => 3
+    2 => 33
     3 => 4
     4 => 5
     5 => 6
 )


/home/sb/ArrayWeakComparisonTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>

      </example>
      <para>
        在这个例子中，第一个索引项中的 <literal>1</literal> 和 <literal>'1'</literal> 在报告中被视为不同，但 assertEquals 仍认为这两个值是匹配的。
      </para>

    </section>
  </section>
</chapter>
