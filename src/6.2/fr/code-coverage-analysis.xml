<?xml version="1.0" encoding="utf-8" ?>

<chapter id="code-coverage-analysis">
  <title>Analyse de couverture de code</title>

  <blockquote>
    <attribution>Wikipedia</attribution>
    <para>
      En informatique, la couverture de code est une mesure utilisée pour décrire le
      taux de code source testé d'un programme lorsqu'il est testé par une suite de
      test particulière. Un programme avec un taux de couverture de code élevée a été plus complètement
      testé et a une plus faible chance de contenir des bugs logiciel qu'un programme
      avec un taux de couverture de code faible.
    </para>
  </blockquote>

  <para>
    <indexterm><primary>Couverture de code</primary></indexterm>
    <indexterm><primary>Xdebug</primary></indexterm>

    Dans ce chapitre, vous apprendrez tout sur la fonctionnalité de couverture
    de code de PHPUnit qui fournit une vision interne des parties du code de
    production qui sont exécutées quand les tests sont exécutés. Elle utilise le composant
    <ulink url="https://github.com/sebastianbergmann/php-code-coverage">PHP_CodeCoverage</ulink>
    qui tire parti de la fonctionnalité de couverture de code fournie par l'extension
    <ulink url="http://xdebug.org/">Xdebug</ulink> de PHP.
  </para>

  <note>
    <para>
      Xdebug n'est pas distribué au sein de PHPUnit. Si une notice indiquant que
      l'extension Xdebug n'est pas chargé en lançant les tests, cela signifie que
      Xdebug n'est pas installé ou n'est pas configuré correctement. Avant de pouvoir
      utiliser les fonctionnalités de couverture de code dans PHPUnit, vous devez lire
      <ulink url="http://xdebug.org/docs/install">le guide d'installation de Xdebug.</ulink>.
    </para>
  </note>

  <para>
    PHPUnit peut générer un rapport de couverture de code HTML aussi bien que
    des fichiers de log en XML avec les informations de couverture de code dans différents formats
    (Clover, Crap4J, PHPUnit). Les informations de couverture de code peuvent aussi être rapporté
    en text (et affiché vers STDOUT) et exporté en PHP pour un traitement
    ultérieur.
  </para>

  <para>
    Reportez-vous à <xref linkend="textui"/> pour obtenir la liste des options de ligne de commande
    qui contrôlent la fonctionnalité de couverture de code ainsi que <xref
    linkend="appendixes.configuration.logging"/> pour les paramètres de
    configuration appropriés.
  </para>

  <section id="code-coverage-analysis.metrics">
    <title>Indicateurs logiciels pour la couverture de code</title>

    <para>
      Différents indicateurs logiciels existent pour mesurer la couverture de code:
    </para>

    <variablelist>
      <varlistentry>
        <indexterm><primary>Couverture de code</primary><secondary>Couverture de ligne</secondary></indexterm>
        <term><emphasis>Couverture de ligne</emphasis></term>
        <listitem>
          <para>
            L'indicateur logiciel de <emphasis>couverture de ligne</emphasis> mesure
            si chaque ligne exécutable a été exécutée.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>Couverture de code</primary><secondary>Couverture de fonction de méthode</secondary></indexterm>
        <term><emphasis>Couverture de fonction de méthode</emphasis></term>
        <listitem>
          <para>
            L'indicateur logiciel de <emphasis>couverture de fonction de méthode</emphasis>
            mesure si chaque fonction ou méthode à été invoquée.
            PHP_CodeCoverage considère qu'une fonction ou une méthode a été couverte
            seulement quand toutes ses lignes executables sont couvertes.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>Couverture de code</primary><secondary>Couverture de classe et de trait</secondary></indexterm>
        <term><emphasis>Couverture de classe et de trait</emphasis></term>
        <listitem>
          <para>
            L'indicateur logiciel de <emphasis>couverture de classe et de trait</emphasis>
            mesure si chaque méthode d'une classe ou d'un trait est couverte.
            PHP_CodeCoverage considère qu'une classe ou un trait est couvert
            seulement quand toutes ses méthodes sont couvertes.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>Couverture de code</primary><secondary>Couverture d'opcode</secondary></indexterm>
        <term><emphasis>Couverture d'opcode</emphasis></term>
        <listitem>
          <para>
            L'indicateur logiciel de <emphasis>couverture d'opcode</emphasis> mesure
            si chaque opcode d'une fonction ou d'une méthode a été executé lors de l'execution
            de la suite de test. Une ligne de code se compile habituellement en plus
            d'un opcode. La couverture de ligne considère une ligne de code comme couverte
            dès que l'un de ses opcode est executé.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>Couverture de code</primary><secondary>Couverture de branche</secondary></indexterm>
        <term><emphasis>Couverture de branche</emphasis></term>
        <listitem>
          <para>
            L'indicateur logiciel de <emphasis>couverture de branche</emphasis> mesure
            si l'expression booléenne de chaque structure de contrôle a été évalué
            à <literal>true</literal> et à <literal>false</literal> pendant l'execution
            de la suite de test.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>Couverture de code</primary><secondary>Couverture de chemin</secondary></indexterm>
        <term><emphasis>Couverture de chemin</emphasis></term>
        <listitem>
          <para>
            L'indicateur logiciel de <emphasis>couverture de chemin</emphasis> mesure
            si chacun des chemins d'execution possible dans une fonction ou une méthode
            ont été suivit lors de l'execution de la suite de test. Un chemin d'execution est
            une séquence unique de branches depuis l'entrée de la fonction ou
            de la méthode jusqu'à sa sortie.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>L'index Change Risk Anti-Patterns (CRAP)</primary></indexterm>
        <term><emphasis>L'index Change Risk Anti-Patterns (CRAP)</emphasis></term>
        <listitem>
          <para>
            L'index <emphasis>Change Risk Anti-Patterns (CRAP)</emphasis> est
            calculé en se basant sur la complexité cyclomatique et la couverture de code
            d'une portion de code. Du code qui n'est pas trop complexe et qui a une couverture
            de code adéquate aurat un index CRAP faible. L'index CRAP peut être baissé
            en écrivant des tests et en refactorisant le code pour diminuer sa
            complexité.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <note>
      <para>
        L'indicateur logiciel de <emphasis>Couverture d'Opcode</emphasis>,
        <emphasis>Couverture de branche</emphasis>, et de
        <emphasis>Couverture de chemin</emphasis> ne sont pas encore
        supportés par PHP_CodeCoverage.
      </para>
    </note>
  </section>

  <section id="code-coverage-analysis.whitelisting-files">
    <title>Liste blanche de fichiers</title>

    <para>
      <indexterm><primary>Couverture de code</primary><secondary>Liste blanche</secondary></indexterm>

      Il est requis de configurer une <emphasis>liste blanche</emphasis> pour dire à
      PHPUnit quels fichiers de code source inclure dans le raport de couverture de code.
      Cela peut être fait en utilisant l'option de ligne de commande <literal>--whitelist</literal>
      ou via le fichier de configuration (voir <xref
      linkend="appendixes.configuration.whitelisting-files"/>).
    </para>

    <para>
      Optionnellement, tous les fichiers en liste blanche peut être ajouté au rapport
      de couverture de code en paramétrant <literal>addUncoveredFilesFromWhitelist="true"</literal>
      dans votre fichier de configuration PHPUnit (voir <xref
      linkend="appendixes.configuration.whitelisting-files"/>). Cela autorise
      l'inclusion de fichiers quine sont pas encore testé du tout. Si vous voulez avoir des
      information sur quelles lignes d'un fichier non couvert sont exécutable,
      par exemple, vous devez également définir
      <literal>processUncoveredFilesFromWhitelist="true"</literal> dans votre
      fichier de configuration PHPUnit (voir <xref
      linkend="appendixes.configuration.whitelisting-files"/>).
    </para>

    <note>
      <para>
        Notez que le chargement des fichiers de code source qui est effectué lorsque
        <literal>processUncoveredFilesFromWhitelist="true"</literal> est défini peut
        causer des problèmes quand un fichier de code source contient du code en dehors de la portée
        d'une classe ou d'une fonction, par exemple.
      </para>
    </note>
  </section>

  <section id="code-coverage-analysis.ignoring-code-blocks">
    <title>Ignorer des blocs de code</title>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnore</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnoreStart</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnoreEnd</primary></indexterm>

      Parfois, vous avez des blocs de code que vous ne pouvez pas tester et que vous pouvez vouloir
      ignorer lors de l'analyse de la couverture de code. PHPUnit vous permet de le faire
      en utilisant les annotations <literal>@codeCoverageIgnore</literal>,
      <literal>@codeCoverageIgnoreStart</literal> et
      <literal>@codeCoverageIgnoreEnd</literal> comme montré dans
      <xref linkend="code-coverage-analysis.ignoring-code-blocks.examples.Sample.php"/>.
    </para>

    <example id="code-coverage-analysis.ignoring-code-blocks.examples.Sample.php">
      <title>Utiliser les annotations <literal>@codeCoverageIgnore</literal>, <literal>@codeCoverageIgnoreStart</literal> et <literal>@codeCoverageIgnoreEnd</literal></title>
        <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

/**
 * @codeCoverageIgnore
 */
class Foo
{
    public function bar()
    {
    }
}

class Bar
{
    /**
     * @codeCoverageIgnore
     */
    public function foo()
    {
    }
}

if (false) {
    // @codeCoverageIgnoreStart
    print '*';
    // @codeCoverageIgnoreEnd
}

exit; // @codeCoverageIgnore
?>]]></programlisting>
    </example>

    <para>
      Les lignes de code ignorées (marquées comme ignorées à l'aide des annotations)
      sont comptées comme exécutées (si elles sont exécutables) et ne seront pas
      mises en évidence.
    </para>
  </section>

  <section id="code-coverage-analysis.specifying-covered-methods">
    <title>Spécifier les méthodes couvertes</title>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@covers</primary></indexterm>

      L'annotation <literal>@covers</literal> (voir
      <xref linkend="appendixes.annotations.covers.tables.annotations"/>) peut être
      utilisée dans le code de test pour indiquer quelle(s) méthode(s) une méthode de test
      veut tester. Si elle est fournie, seules les informations de couverture de code pour
      la(les) méthode(s) indiquées seront prises en considération.
      <xref linkend="code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php"/>
      montre un exemple.
    </para>

    <example id="code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php">
      <title>Tests qui indiquent quelle(s) méthode(s) ils veulent couvrir</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class BankAccountTest extends TestCase
{
    protected $ba;

    protected function setUp()
    {
        $this->ba = new BankAccount;
    }

    /**
     * @covers BankAccount::getBalance
     */
    public function testBalanceIsInitiallyZero()
    {
        $this->assertEquals(0, $this->ba->getBalance());
    }

    /**
     * @covers BankAccount::withdrawMoney
     */
    public function testBalanceCannotBecomeNegative()
    {
        try {
            $this->ba->withdrawMoney(1);
        }

        catch (BankAccountException $e) {
            $this->assertEquals(0, $this->ba->getBalance());

            return;
        }

        $this->fail();
    }

    /**
     * @covers BankAccount::depositMoney
     */
    public function testBalanceCannotBecomeNegative2()
    {
        try {
            $this->ba->depositMoney(-1);
        }

        catch (BankAccountException $e) {
            $this->assertEquals(0, $this->ba->getBalance());

            return;
        }

        $this->fail();
    }

    /**
     * @covers BankAccount::getBalance
     * @covers BankAccount::depositMoney
     * @covers BankAccount::withdrawMoney
     */
    public function testDepositWithdrawMoney()
    {
        $this->assertEquals(0, $this->ba->getBalance());
        $this->ba->depositMoney(1);
        $this->assertEquals(1, $this->ba->getBalance());
        $this->ba->withdrawMoney(1);
        $this->assertEquals(0, $this->ba->getBalance());
    }
}
?>]]></programlisting>
    </example>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@coversNothing</primary></indexterm>

      Il est également possible d'indiquer qu'un test ne doit couvrir
      <emphasis>aucune</emphasis> méthode en utilisant l'annotation
      <literal>@coversNothing</literal> (voir
      <xref linkend="appendixes.annotations.coversNothing"/>). Ceci peut être
      utile quand on écrit des tests d'intégration pour s'assurer que vous
      ne générez une couverture de code avec des tests unitaires.
    </para>

    <example id="code-coverage-analysis.specifying-covered-methods.examples.GuestbookIntegrationTest.php">
      <title>Un test qui indique qu'aucune méthode ne doit être couverte</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class GuestbookIntegrationTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @coversNothing
     */
    public function testAddEntry()
    {
        $guestbook = new Guestbook();
        $guestbook->addEntry("suzy", "Hello world!");

        $queryTable = $this->getConnection()->createQueryTable(
            'guestbook', 'SELECT * FROM guestbook'
        );

        $expectedTable = $this->createFlatXmlDataSet("expectedBook.xml")
                              ->getTable("guestbook");

        $this->assertTablesEqual($expectedTable, $queryTable);
    }
}
?>]]>
      </programlisting>
    </example>
  </section>

  <section id="code-coverage-analysis.edge-cases">
    <title>Cas limites</title>

    <para>
      Cette section présente des cas limites remarquables qui conduisent à des informations
      de couverture de code prêtant à confusion.
    </para>

    <example id="code-coverage-analysis.edge-cases.examples.Sample.php">
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

// Because it is "line based" and not statement base coverage
// one line will always have one coverage status
if (false) this_function_call_shows_up_as_covered();

// Due to how code coverage works internally these two lines are special.
// This line will show up as non executable
if (false)
    // This line will show up as covered because it is actually the
    // coverage of the if statement in the line above that gets shown here!
    will_also_show_up_as_covered();

// To avoid this it is necessary that braces are used
if (false) {
    this_call_will_never_show_up_as_covered();
}
?>]]></programlisting>
    </example>
  </section>
</chapter>
