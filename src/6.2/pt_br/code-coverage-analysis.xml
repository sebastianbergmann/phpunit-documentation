<?xml version="1.0" encoding="utf-8" ?>

<chapter id="code-coverage-analysis">
  <title>Análise de Cobertura de Código</title>

  <blockquote>
    <attribution>Wikipedia</attribution>
    <para>
      Na ciência da computação, cobertura de código é um mensuração usada para descrever o
      grau em que um código fonte de um programa é testado por uma suíte
      de testes particular. Um programa com cobertura de código alta foi mais exaustivamente
      testado e tem uma menor chance de conter erros de software do que um programa
      com baixa cobertura de código.
    </para>
  </blockquote>

  <para>
    <indexterm><primary>Cobertura de Código</primary></indexterm>
    <indexterm><primary>Xdebug</primary></indexterm>

    Neste capítulo você aprenderá tudo sobre a funcionalidade de cobertura de código
    do PHPUnit que lhe dará uma perspicácia sobre quais partes do código de produção
    são executadas quando os testes são executados. Ele faz uso do componente
    <ulink url="https://github.com/sebastianbergmann/php-code-coverage">PHP_CodeCoverage</ulink>,
    que por sua vez utiliza a funcionalidade de cobertura de código fornecido
    pela extensão <ulink url="http://xdebug.org/">Xdebug</ulink> para PHP.
  </para>

  <note>
    <para>
      Xdebug não é distribuído como parte do PHPUnit. Se você receber um aviso
      durante a execução de testes que a extensão Xdebug não está carregada, isso significa
      que Xdebug ou não está instalada ou não está configurada corretamente. Antes
      que você possa usar as funcionalidades de análise de cobertura de código no PHPUnit, você deve
      ler <ulink url="http://xdebug.org/docs/install">o manual de instalação Xdebug</ulink>.
    </para>
  </note>

  <para>
    PHPUnit pode gerar um relatório de cobertura de código baseado em HTML, tal como
    arquivos de registros baseado em XML com informações de cobertura de código em vários formatos
    (Clover, Crap4J, PHPUnit). Informação de cobertura de código também pode ser relatado
    como texto (e impresso na STDOUT) e exportado como código PHP para futuro
    processamento.
  </para>

  <para>
    Por favor, consulte o <xref linkend="textui"/> para uma lista de opções de linha de comando
    que controlam a funcionalidade de cobertura de código, bem como em <xref
    linkend="appendixes.configuration.logging"/> para as definições de
    configurações relevantes.
  </para>

  <section id="code-coverage-analysis.metrics">
    <title>Métricas de Software para  Cobertura de Código</title>

    <para>
      Várias métricas de software existem para mensurar a cobertura de código:
    </para>

    <variablelist>
      <varlistentry>
        <indexterm><primary>Cobertura de Código</primary><secondary>Cobertura de Linha</secondary></indexterm>
        <term><emphasis>Cobertura de Linha</emphasis></term>
        <listitem>
          <para>
            A métrica de software <emphasis>Cobertura de Linha</emphasis> mensura
            se cada linha executável foi executada.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>Cobertura de Código</primary><secondary>Cobertura de Função e Método</secondary></indexterm>
        <term><emphasis>Cobertura de Função e Método</emphasis></term>
        <listitem>
          <para>
            A métrica de software <emphasis>Cobertura de Função e Método</emphasis>
            mensura se cada função ou método foi invocado.
            PHP_CodeCoverage só considera uma função ou método como coberto quando
            todas suas linhas executáveis são cobertas.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>Cobertura de Código</primary><secondary>Cobertura de Classe e Trait</secondary></indexterm>
        <term><emphasis>Cobertura de Classe e Trait</emphasis></term>
        <listitem>
          <para>
            A métrica de software <emphasis>Cobertura de Classe e Trait</emphasis>
            mensura se cada método de uma classe ou trait é coberto.
            PHP_CodeCoverage só considera uma classe ou trait como coberta quando todos
            seus métodos são cobertos.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>Cobertura de Código</primary><secondary>Cobertura de Código de Operação</secondary></indexterm>
        <term><emphasis>Cobertura de Código de Operação</emphasis></term>
        <listitem>
          <para>
            A métrica de software <emphasis>Cobertura de Código de Operação</emphasis> mensura
            se cada código de operação de uma função ou método foi  executado enquanto
            executa a suíte de teste. Uma linha de código geralmente compila em mais
            de um código de operação. Cobertura de Linha considera uma linha de código como coberta
            logo que um dos seus códigos de operações é executado.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>Cobertura de Código</primary><secondary>Cobertura de Ramo</secondary></indexterm>
        <term><emphasis>Cobertura de Ramo</emphasis></term>
        <listitem>
          <para>
            A métrica de software <emphasis>Cobertura de Ramo</emphasis> mensura
            se cada expressão booleana de cada estrutura de controle avaliada
            a <literal>true</literal> e <literal>false</literal> enquanto
            executa a suíte de teste.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>Cobertura de Código</primary><secondary>Cobertura de Caminho</secondary></indexterm>
        <term><emphasis>Cobertura de Caminho</emphasis></term>
        <listitem>
          <para>
            A métrica de software <emphasis>Cobertura de Caminho</emphasis> mensura
            se cada um dos caminhos de execução possíveis em uma função ou método
            foi seguido durante a execução da suíte de teste. Um caminho de execução é
            uma sequência única de ramos a partir da entrada de uma função ou
            método para a sua saída.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <indexterm><primary>Índice de Anti-Patterns de Mudança de Risco (CRAP - Change Risk Anti-Patterns)</primary></indexterm>
        <term><emphasis>Índice de Anti-Patterns de Mudança de Risco (CRAP - Change Risk Anti-Patterns)</emphasis></term>
        <listitem>
          <para>
            O <emphasis>Índice de Anti-Patterns de Mudança de Risco (CRAP - Change Risk Anti-Patterns)</emphasis> é
            calculado baseado na complexidade ciclomática e cobertura de código de uma
            unidade de código. Código que não é muito complexo e tem uma cobertura de teste
            adequada terá um baixo índice CRAP. O índice CRAP pode ser reduzido
            escrevendo testes e refatorando o código para reduzir sua
            complexidade.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <note>
      <para>
        As métricas de software <emphasis>Cobertura de Código de Operação</emphasis>,
        <emphasis>Cobertura de Ramo</emphasis> e
        <emphasis>Cobertura de Caminho</emphasis> ainda não são
        suportadas pelo PHP_CodeCoverage.
      </para>
    </note>
  </section>

  <section id="code-coverage-analysis.including-excluding-files">
    <title>Incluindo e Excluindo Arquivos</title>

    <para>
      Por padrão, todos os arquivos de código-fonte que contém pelo menos uma linha de código que
      tenha sido executada (e apenas esses arquivos) são incluídos no relatório
      de cobertura de código.
    </para>

    <para>
      <indexterm><primary>Cobertura de código</primary><secondary>Lista-negra</secondary></indexterm>

      Por padrão, uma <emphasis>lista-negra</emphasis> é usada para excluir arquivos do
      relatório de cobertura de código. Essa lista-negra é previamente preenchida com os
      arquivos-fonte do PHPUnit e suas dependências.
    </para>

    <para>
      <indexterm><primary>Cobertura de código</primary><secondary>Lista-branca</secondary></indexterm>

      É uma boa prática usar um <emphasis>lista-branca</emphasis> ao invés da
      lista-negra mencionada acima.
    </para>

    <para>
      Opcionalmente, todos arquivos da lista-branca pode ser adicionados ao relatório
      de cobertura de código pela definição <literal>addUncoveredFilesFromWhitelist="true"</literal>
      em suas configurações do PHPUnit (veja <xref
      linkend="appendixes.configuration.blacklist-whitelist"/>). Isso permite a
      inclusão de arquivos que ainda não são testados em tudo. Se você quer obter
      informação sobre quais linhas de um tal arquivo descoberto são executadas,
      por exemplo, você também precisa definir
      <literal>processUncoveredFilesFromWhitelist="true"</literal> em suas
      configurações do PHPUnit (veja <xref
      linkend="appendixes.configuration.blacklist-whitelist"/>).
    </para>

    <note>
      <para>
        Por favor, note que o carregamento de arquivos de código-fonte que é realizado, quando
        <literal>processUncoveredFilesFromWhitelist="true"</literal> é definido, pode
        causar problemas quando um arquivo de código-fonte contém código fora do escopo de
        uma classe ou função, por exemplo.
      </para>
    </note>
  </section>

  <section id="code-coverage-analysis.ignoring-code-blocks">
    <title>Ignorando Blocos de Código</title>

    <para>
      <indexterm><primary>Anotação</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnore</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnoreStart</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnoreEnd</primary></indexterm>

      Às vezes você tem blocos de código que não pode testar e que pode
      querer ignorar durante a análise de cobertura de código. O PHPUnit permite que você o faça
      usando as anotações <literal>@codeCoverageIgnore</literal>,
      <literal>@codeCoverageIgnoreStart</literal> e
      <literal>@codeCoverageIgnoreEnd</literal> como mostrado em
      <xref linkend="code-coverage-analysis.ignoring-code-blocks.examples.Sample.php"/>.
    </para>

    <example id="code-coverage-analysis.ignoring-code-blocks.examples.Sample.php">
      <title>Usando as anotações <literal>@codeCoverageIgnore</literal>, <literal>@codeCoverageIgnoreStart</literal> e <literal>@codeCoverageIgnoreEnd</literal></title>
        <programlisting><![CDATA[<?php
/**
 * @codeCoverageIgnore
 */
class Foo
{
    public function bar()
    {
    }
}

class Bar
{
    /**
     * @codeCoverageIgnore
     */
    public function foo()
    {
    }
}

if (FALSE) {
    // @codeCoverageIgnoreStart
    print '*';
    // @codeCoverageIgnoreEnd
}

exit; // @codeCoverageIgnore
?>]]></programlisting>
    </example>

    <para>
      As linhas de código ignoradas (marcadas como ignoradas usando as anotações)
      são contadas como executadas (se forem executáveis) e não serão
      destacadas.
    </para>
  </section>

  <section id="code-coverage-analysis.specifying-covered-methods">
    <title>Especificando métodos cobertos</title>

    <para>
      <indexterm><primary>Anotação</primary></indexterm>
      <indexterm><primary>@covers</primary></indexterm>

      A anotação <literal>@covers</literal> (veja
      <xref linkend="appendixes.annotations.covers.tables.annotations"/>) pode ser
      usada em um código de teste para especificar qual(is) método(s) um método de teste quer
      testar. Se fornecido, apenas a informação de cobertura de código para o(s) método(s)
      especificado(s) será considerada.
      <xref linkend="code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php"/>
      mostra um exemplo.
    </para>

    <example id="code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php">
      <title>Testes que especificam quais métodos querem cobrir</title>
      <programlisting><![CDATA[<?php
class BankAccountTest extends PHPUnit_Framework_TestCase
{
    protected $ba;

    protected function setUp()
    {
        $this->ba = new BankAccount;
    }

    /**
     * @covers BankAccount::getBalance
     */
    public function testBalanceIsInitiallyZero()
    {
        $this->assertEquals(0, $this->ba->getBalance());
    }

    /**
     * @covers BankAccount::withdrawMoney
     */
    public function testBalanceCannotBecomeNegative()
    {
        try {
            $this->ba->withdrawMoney(1);
        }

        catch (BankAccountException $e) {
            $this->assertEquals(0, $this->ba->getBalance());

            return;
        }

        $this->fail();
    }

    /**
     * @covers BankAccount::depositMoney
     */
    public function testBalanceCannotBecomeNegative2()
    {
        try {
            $this->ba->depositMoney(-1);
        }

        catch (BankAccountException $e) {
            $this->assertEquals(0, $this->ba->getBalance());

            return;
        }

        $this->fail();
    }

    /**
     * @covers BankAccount::getBalance
     * @covers BankAccount::depositMoney
     * @covers BankAccount::withdrawMoney
     */
    public function testDepositWithdrawMoney()
    {
        $this->assertEquals(0, $this->ba->getBalance());
        $this->ba->depositMoney(1);
        $this->assertEquals(1, $this->ba->getBalance());
        $this->ba->withdrawMoney(1);
        $this->assertEquals(0, $this->ba->getBalance());
    }
}
?>]]></programlisting>
    </example>

    <para>
      <indexterm><primary>Anotação</primary></indexterm>
      <indexterm><primary>@coversNothing</primary></indexterm>

      Também é possível especificar que um teste não deve cobrir
      <emphasis>qualquer</emphasis> método usando a anotação
      <literal>@coversNothing</literal> (veja
      <xref linkend="appendixes.annotations.coversNothing"/>). Isso pode ser
      útil quando escrever testes de integração para certificar-se de que você só
      gerará cobertura de código com testes unitários.
    </para>

    <example id="code-coverage-analysis.specifying-covered-methods.examples.GuestbookIntegrationTest.php">
      <title>Um teste que especifica que nenhum método deve ser coberto</title>
      <programlisting><![CDATA[<?php
class GuestbookIntegrationTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @coversNothing
     */
    public function testAddEntry()
    {
        $guestbook = new Guestbook();
        $guestbook->addEntry("suzy", "Hello world!");

        $queryTable = $this->getConnection()->createQueryTable(
            'guestbook', 'SELECT * FROM guestbook'
        );

        $expectedTable = $this->createFlatXmlDataSet("expectedBook.xml")
                              ->getTable("guestbook");

        $this->assertTablesEqual($expectedTable, $queryTable);
    }
}
?>]]>
      </programlisting>
    </example>
  </section>

  <section id="code-coverage-analysis.edge-cases">
    <title>Casos Extremos</title>

    <para>
      Esta seção mostra casos extremos notáveis que induz a confundir a informação
      de cobertura de código.
    </para>

    <example id="code-coverage-analysis.edge-cases.examples.Sample.php">
      <programlisting><![CDATA[<?php
// Por ser "baseado em linha" e não em declaração,
// uma linha sempre terá um estado de cobertura
if (false) this_function_call_shows_up_as_covered();

// Devido ao modo que a cobertura de código funciona internamente, estas duas linhas são especiais.
// Esta linha vai aparecer como não-executável
if (false)
    // Esta linha vai aparecer como coberta, pois de fato é a cobertura
    // da declaração if da linha anterior que é mostrada aqui!
    will_also_show_up_as_covered();

// Para evitar isso é necessário usar chaves
if (false) {
    this_call_will_never_show_up_as_covered();
}
?>]]></programlisting>
    </example>
  </section>
</chapter>
