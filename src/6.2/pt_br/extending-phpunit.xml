<?xml version="1.0" encoding="utf-8" ?>

<chapter id="extending-phpunit">
  <title>Estendendo o PHPUnit</title>

  <para>
    O PHPUnit pode ser estendido de várias formas para facilitar a escrita de testes
    e personalizar as respostas que você recebe ao executar os testes. Aqui estão
    pontos de partida comuns para estender o PHPUnit.
  </para>

  <section id="extending-phpunit.PHPUnit_Framework_TestCase">
    <title>Subclasse PHPUnit_Framework_TestCase</title>

    <para>
      <indexterm><primary>PHPUnit_Framework_TestCase</primary></indexterm>

      Escreva asserções personalizadas e métodos utilitários em uma subclasse abstrata do
      <literal>PHPUnit_Framework_TestCase</literal> e derive suas classes de caso de teste
      dessa classe. Essa é uma das formas mais fáceis de estender
      o PHPUnit.
    </para>
  </section>

  <section id="extending-phpunit.custom-assertions">
    <title>Escreva asserções personalizadas</title>

    <para>
      Ao escrever asserções personalizadas a melhor prática é seguir a mesma
      forma que as asserções do próprio PHPUnit são implementadas. Como você pode ver no
      <xref linkend="extending-phpunit.examples.Assert.php"/>, o método
      <literal>assertTrue()</literal> é apenas um empacotador em torno dos métodos
      <literal>isTrue()</literal> e <literal>assertThat()</literal>:
      <literal>isTrue()</literal> cria um objeto comparador que é passado para
      <literal>assertThat()</literal> para avaliação.
    </para>

    <example id="extending-phpunit.examples.Assert.php">
      <title>Os métodos assertTrue() e isTrue() da classe PHPUnitFramework_Assert</title>
      <programlisting><![CDATA[<?php
abstract class PHPUnit_Framework_Assert
{
    // ...

    /**
     * Assevera que uma condição é verdadeira (true).
     *
     * @param  boolean $condition
     * @param  string  $message
     * @throws PHPUnit_Framework_AssertionFailedError
     */
    public static function assertTrue($condition, $message = '')
    {
        self::assertThat($condition, self::isTrue(), $message);
    }

    // ...

    /**
     * Retorna um objeto comparador PHPUnit_Framework_Constraint_IsTrue.
     *
     * @return PHPUnit_Framework_Constraint_IsTrue
     * @since Método disponível desde a versão 3.3.0
     */
    public static function isTrue()
    {
        return new PHPUnit_Framework_Constraint_IsTrue;
    }

    // ...
}?>]]></programlisting>
    </example>

    <para>
      O <xref linkend="extending-phpunit.examples.IsTrue.php"/> mostra como
      <literal>PHPUnit_Framework_Constraint_IsTrue</literal> estende a
      classe base abstrata para objetos comparadores (ou restritores),
      <literal>PHPUnit_Framework_Constraint</literal>.
    </para>

    <example id="extending-phpunit.examples.IsTrue.php">
      <title>A classe PHPUnit_Framework_Constraint_IsTrue</title>
      <programlisting><![CDATA[<?php
class PHPUnit_Framework_Constraint_IsTrue extends PHPUnit_Framework_Constraint
{
    /**
     * Avalia a restrição para o parâmetro $other. Retorna TRUE se a
     * restrição é confirmada, FALSE caso contrário.
     *
     * @param mixed $other Valor ou objeto a avaliar.
     * @return bool
     */
    public function matches($other)
    {
        return $other === TRUE;
    }

    /**
     * Retorna uma representação string da restrição.
     *
     * @return string
     */
    public function toString()
    {
        return 'is true';
    }
}?>]]></programlisting>
    </example>

    <para>
      O esforço de implementar os métodos <literal>assertTrue()</literal> e
      <literal>isTrue()</literal> assim como a classe
      <literal>PHPUnit_Framework_Constraint_IsTrue</literal> rende o
      benefício de que <literal>assertThat()</literal> automaticamente cuida de
      avaliar a asserção e escriturar tarefas como contá-las para
      estatísticas. Além disso, o método <literal>isTrue()</literal> pode ser
      usado como um comparador ao configurar objetos falsificados.
    </para>
  </section>

  <section id="extending-phpunit.PHPUnit_Framework_TestListener">
    <title>Implementando PHPUnit\Framework\TestListener</title>

    <para>
      <indexterm><primary>PHPUnit\Framework\TestListener</primary></indexterm>

      O <xref linkend="extending-phpunit.examples.SimpleTestListener.php" />
      mostra uma implementação simples da interface
      <literal>PHPUnit\Framework\TestListener</literal>.
    </para>

    <example id="extending-phpunit.examples.SimpleTestListener.php">
      <title>Um simples ouvinte de teste</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;
use PHPUnit\Framework\TestListener;

class SimpleTestListener implements TestListener
{
    public function addError(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        printf("Error while running test '%s'.\n", $test->getName());
    }

    public function addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, $time)
    {
        printf("Test '%s' failed.\n", $test->getName());
    }

    public function addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        printf("Test '%s' is incomplete.\n", $test->getName());
    }

    public function addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        printf("Test '%s' is deemed risky.\n", $test->getName());
    }

    public function addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        printf("Test '%s' has been skipped.\n", $test->getName());
    }

    public function startTest(PHPUnit_Framework_Test $test)
    {
        printf("Test '%s' started.\n", $test->getName());
    }

    public function endTest(PHPUnit_Framework_Test $test, $time)
    {
        printf("Test '%s' ended.\n", $test->getName());
    }

    public function startTestSuite(PHPUnit_Framework_TestSuite $suite)
    {
        printf("TestSuite '%s' started.\n", $suite->getName());
    }

    public function endTestSuite(PHPUnit_Framework_TestSuite $suite)
    {
        printf("TestSuite '%s' ended.\n", $suite->getName());
    }
}
?>]]></programlisting>
    </example>

    <para>
      <indexterm><primary>PHPUnit_Framework_BaseTestListener</primary></indexterm>

      <xref linkend="extending-phpunit.examples.BaseTestListener.php" />
      mostra como a subclasse da classe abstrata <literal>PHPUnit_Framework_BaseTestListener</literal>,
      que permite que você especifique apenas os métodos de interface que
      são interessantes para seu caso de uso, ao fornecer implementações vazias
      para todos os outros.
    </para>

    <example id="extending-phpunit.examples.BaseTestListener.php">
      <title>Usando o ouvinte de teste base</title>
      <programlisting><![CDATA[<?php
class ShortTestListener extends PHPUnit_Framework_BaseTestListener
{
    public function endTest(PHPUnit_Framework_Test $test, $time)
    {
        printf("Test '%s' ended.\n", $test->getName());
    }
}
?>]]></programlisting>
    </example>

    <para>
      Em <xref linkend="appendixes.configuration.test-listeners"/> você pode ver
      como configurar o PHPUnit para anexar seu ouvinte de teste para a
      execução do teste.
    </para>
  </section>

  <section id="extending-phpunit.PHPUnit_Extensions_TestDecorator">
    <title>Subclasse PHPUnit_Extensions_TestDecorator</title>

    <para>
      <indexterm><primary>PHPUnit_Extensions_TestDecorator</primary></indexterm>

      Você pode envolver casos de teste ou suítes de teste em uma subclasse de
      <literal>PHPUnit_Extensions_TestDecorator</literal> e usar o padrão
      de projeto Decorador para realizar algumas ações antes e depois da
      execução do teste.
    </para>

    <para>
      <indexterm><primary>PHPUnit_Extensions_RepeatedTest</primary></indexterm>

      O PHPUnit navega com um decorador de teste concreto:
      <literal>PHPUnit_Extensions_RepeatedTest</literal>. Ele é usado para executar um
      um teste repetidamente e apenas o conta como bem-sucedido se todas as iterações forem
      bem-sucedidas.
    </para>

    <para>
      O <xref linkend="extending-phpunit.examples.RepeatedTest.php" />
      mostra uma versão resumida do decorador de teste <literal>PHPUnit_Extensions_RepeatedTest</literal>
      que ilustra como escrever seus próprios decoradores de teste.
    </para>

    <example id="extending-phpunit.examples.RepeatedTest.php">
      <title>O Decorador RepeatedTest</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Extensions/TestDecorator.php';

class PHPUnit_Extensions_RepeatedTest extends PHPUnit_Extensions_TestDecorator
{
    private $timesRepeat = 1;

    public function __construct(PHPUnit_Framework_Test $test, $timesRepeat = 1)
    {
        parent::__construct($test);

        if (is_integer($timesRepeat) &&
            $timesRepeat >= 0) {
            $this->timesRepeat = $timesRepeat;
        }
    }

    public function count()
    {
        return $this->timesRepeat * $this->test->count();
    }

    public function run(PHPUnit_Framework_TestResult $result = NULL)
    {
        if ($result === NULL) {
            $result = $this->createResult();
        }

        for ($i = 0; $i < $this->timesRepeat && !$result->shouldStop(); $i++) {
            $this->test->run($result);
        }

        return $result;
    }
}
?>]]></programlisting>
    </example>
  </section>

  <section id="extending-phpunit.PHPUnit_Framework_Test">
    <title>Implementando PHPUnit_Framework_Test</title>

    <para>
      <indexterm><primary>PHPUnit_Framework_Test</primary></indexterm>
      <indexterm><primary>Testes Guiados por Dados</primary></indexterm>

      A interface <literal>PHPUnit_Framework_Test</literal> é limitada e
      fácil de implementar. Você pode escrever uma implementação do
      <literal>PHPUnit_Framework_Test</literal> que é mais simples que
      <literal>PHPUnit_Framework_TestCase</literal> e que executa
      <emphasis>testes guiados por dados</emphasis>, por exemplo.
    </para>

    <para>
      O <xref linkend="extending-phpunit.examples.DataDrivenTest.php" />
      mostra uma classe de caso de teste guiado por dados que compara valores de um arquivo
      com Valores Separados por Vírgulas (CSV). Cada linha de tal arquivo parece com
      <literal>foo;bar</literal>, onde o primeiro valor é o qual esperamos
      e o segundo valor é o real.
    </para>

    <example id="extending-phpunit.examples.DataDrivenTest.php">
      <title>Um teste guiado por dados</title>
      <programlisting><![CDATA[<?php
class DataDrivenTest implements PHPUnit_Framework_Test
{
    private $lines;

    public function __construct($dataFile)
    {
        $this->lines = file($dataFile);
    }

    public function count()
    {
        return 1;
    }

    public function run(PHPUnit_Framework_TestResult $result = NULL)
    {
        if ($result === NULL) {
            $result = new PHPUnit_Framework_TestResult;
        }

        foreach ($this->lines as $line) {
            $result->startTest($this);
            PHP_Timer::start();
            $stopTime = NULL;

            list($expected, $actual) = explode(';', $line);

            try {
                PHPUnit_Framework_Assert::assertEquals(
                  trim($expected), trim($actual)
                );
            }

            catch (PHPUnit_Framework_AssertionFailedError $e) {
                $stopTime = PHP_Timer::stop();
                $result->addFailure($this, $e, $stopTime);
            }

            catch (Exception $e) {
                $stopTime = PHP_Timer::stop();
                $result->addError($this, $e, $stopTime);
            }

            if ($stopTime === NULL) {
                $stopTime = PHP_Timer::stop();
            }

            $result->endTest($this, $stopTime);
        }

        return $result;
    }
}

$test = new DataDrivenTest('data_file.csv');
$result = PHPUnit_TextUI_TestRunner::run($test);
?>]]></programlisting>

      <screen><![CDATA[PHPUnit 4.7.0 by Sebastian Bergmann and contributors.

.F

Time: 0 seconds

There was 1 failure:

1) DataDrivenTest
Failed asserting that two strings are equal.
expected string <bar>
difference      <  x>
got string      <baz>
/home/sb/DataDrivenTest.php:32
/home/sb/DataDrivenTest.php:53

FAILURES!
Tests: 2, Failures: 1.]]></screen>
    </example>
  </section>
</chapter>
