<?xml version="1.0" encoding="utf-8" ?>

<chapter id="other-uses-for-tests">
  <title>Outros Usos para Testes</title>

  <para>
    Uma vez que você se acostumar a escrever testes automatizados, você vai querer descobrir
    mais usos para testes. Aqui temos alguns exemplos.
  </para>

  <section id="other-uses-for-tests.agile-documentation">
    <title>Documentação Ágil</title>

    <para>
      <indexterm><primary>Documentação Ágil</primary></indexterm>
      <indexterm><primary>Documentação Automatizada</primary></indexterm>
      <indexterm><primary>Programação Extrema</primary></indexterm>
      <indexterm><primary>TestDox</primary></indexterm>

      Tipicamente, em um projeto desenvolvido usando um processo ágil,
      como a Programação Extrema, a documentação não pode se manter com as
      mudanças frequentes do design e código do projeto. Programação Extrema
      exige <emphasis>propriedade coletiva de código</emphasis>, então todos
      os desenvolvedores precisam saber como o sistema todo funciona. Se você for
      disciplinado o suficiente para consequentemente usar "nomes falantes" para seus testes
      que descrevam o que cada classe deveria fazer, você pode usar a funcionalidade TestDox
      do PHPUnit para gerar documentação automatizada para seu projeto baseada
      nos testes. Essa documentação dá aos desenvolvedores uma visão geral sobre o que
      cada classe do projeto deveria fazer.
    </para>

    <para>
      A funcionalidade TestDox do PHPUnit olha para uma classe de teste e todos os nomes
      dos métodos de teste e os converte de nomes camelCase do PHP para sentenças:
      <literal>testBalanceIsInitiallyZero()</literal> se torna "Balance is
      initially zero". Se houverem vários métodos de teste cujos nomes apenas
      diferem em um sufixo de um ou mais dígitos, como em
      <literal>testBalanceCannotBecomeNegative()</literal> e
      <literal>testBalanceCannotBecomeNegative2()</literal>, a sentença
      "Balance is initially zero" aparecerá apenas uma vez, assumindo-se que todos os testes foram bem-sucedidos.
    </para>

    <para>
      Vamos dar uma olhada na documentação ágil gerada para a
      classe <literal>BankAccount</literal>:
    </para>

    <screen><userinput>phpunit --testdox BankAccountTest</userinput>
PHPUnit 4.8.0 by Sebastian Bergmann and contributors.

BankAccount
 [x] Balance is initially zero
 [x] Balance cannot become negative</screen>

    <para>
      Alternativamente, a documentação ágil pode ser gerada nos formatos HTML ou
      texto plano e escrita em um arquivo usando os argumentos <literal>--testdox-html</literal>
      e <literal>--testdox-text</literal>.
    </para>

    <para>
      <indexterm><primary>Documentando Suposições</primary></indexterm>

      A Documentação Ágil pode ser usada para documentar as suposições que você
      faz sobre os pacotes externos que você usa em seu projeto. Quando você usa
      um pacote externo, você está exposto ao risco do pacote não se
      comportar como você espera, e de futuras versões do pacote mudarem
      de formas súbitas que quebrarão o seu código, sem que você saiba.
      Você pode dar um jeito nesses problemas escrevendo um teste toda vez que fizer uma
      suposição. Se seu teste for bem sucedido, sua suposição é válida. Se você
      documentar todas as suas suposições com testes, futuras versões do pacote
      externo não serão motivo de preocupação: se o teste for bem-sucedido,
      seu sistema deverá continuar funcionando.
    </para>
  </section>

  <section id="other-uses-for-tests.cross-team-tests">
    <title>Testes Inter-Equipes</title>

    <para>
      Quando você documenta suposições com testes, você possui os testes. O
      fornecedor do pacote -- sobre o qual você faz suposições -- não sabe
      nada sobre seus testes. Se você quer ter um relacionamento mais próximo
      com o fornecedor do pacote, você pode usar os testes para comunicar
      e coordenar suas atividades.
    </para>

    <para>
      Quando você concorda em coordenar suas atividades com o fornecedor de um
      pacote, vocês podem escrever os testes juntos. Faça isso de modo que
      os testes revelem o máximo possível de suposições. Suposições escondidas são
      a morte da cooperação. Com os testes você documenta exatamente o que você
      espera de um pacote fornecido. O fornecedor vai saber que o pacote está
      completo quando todos os testes executarem.
    </para>

    <para>
      <indexterm><primary>Esboços</primary></indexterm>

      Usando esboços (veja o capítulo em "Objetos Falsos", anteriormente neste livro),
      você pode chegar a se desassociar do fornecedor: O trabalho do
      fornecedor é fazer os testes executarem com a implementação real do
      pacote. O seu trabalho é fazer os testes executarem para seu próprio código. Até
      esse momento como você tem a implementação real do pacote fornecido,
      você usa objetos esboçados. Seguindo esta abordagem, os dois times podem desenvolver
      independentemente.
    </para>
  </section>
</chapter>
