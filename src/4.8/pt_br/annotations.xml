<?xml version="1.0" encoding="utf-8" ?>

<appendix id="appendixes.annotations">
  <title>Anotações</title>

  <para>
    <indexterm><primary>Anotações</primary></indexterm>

    Uma anotação é uma forma especial de metadados sintáticos que podem ser adicionados ao
    código-fonte de algumas linguagens de programação. Enquanto o PHP não tem
    um recurso de linguagem dedicado a anotação de código-fonte, o uso de tags
    como <literal>@annotation arguments</literal> em bloco de documentação tem sido
    estabelecido na comunidade do PHP para anotar o código-fonte. Os blocos
    de documentação PHP são reflexivos: eles podem ser acessados através do
    método <literal>getDocComment()</literal> da API Reflection a nível de função,
    classe, método e atributo. Aplicações como o PHPUnit usam essa
    informação em tempo de execução para configurar seu comportamento.
  </para>

  <note>
    <para>
      Um comentário de documentação em PHP deve começar com <literal>/**</literal> e terminar com
      <literal>*/</literal>. Anotações em algum outro estilo de comentário será
      ignorada.
    </para>
  </note>

  <para>
    Este apêndice mostra todas as variedades de anotações suportadas pelo PHPUnit.
  </para>

  <section id="appendixes.annotations.author">
    <title>@author</title>

    <para>
      <indexterm><primary>@author</primary></indexterm>

      A anotação <literal>@author</literal> é um apelido para a anotação
      <literal>@group</literal> (veja <xref
      linkend="appendixes.annotations.group"/>) e permite filtrar os testes baseado
      em seus autores.
    </para>
  </section>

  <section id="appendixes.annotations.after">
    <title>@after</title>

    <para>

      A anotação <literal>@after</literal> pode ser usada para especificar métodos
      que devem ser chamados depois de cada método em uma classe de caso de teste.
      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @after
     */
    public function tearDownSomeFixtures()
    {
        // ...
    }

    /**
     * @after
     */
    public function tearDownSomeOtherFixtures()
    {
        // ...
    }
}</programlisting>
    </para>
  </section>

  <section id="appendixes.annotations.afterClass">
    <title>@afterClass</title>

    <para>

      A anotação <literal>@afterClass</literal> pode ser usada para especificar
      métodos estáticos que devem ser chamados depois de todos os métodos de teste em uma classe
      de teste foram executados para limpar ambientes compartilhados.
      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @afterClass
     */
    public static function tearDownSomeSharedFixtures()
    {
        // ...
    }

    /**
     * @afterClass
     */
    public static function tearDownSomeOtherSharedFixtures()
    {
        // ...
    }
}</programlisting>
    </para>
  </section>

  <section id="appendixes.annotations.backupGlobals">
    <title>@backupGlobals</title>

    <para>
      <indexterm><primary><literal>@backupGlobals</literal></primary></indexterm>

      As operações de cópia de segurança e restauração para variáveis globais podem ser completamente
      desabilitadas para todos os testes de uma classe de caso de teste como esta <programlisting>/**
 * @backupGlobals disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    // ...
}</programlisting>
    </para>

    <para>
      <indexterm><primary><literal>@backupGlobals</literal></primary></indexterm>

      A anotação <literal>@backupGlobals</literal> também pode ser usada a nível
      de método de teste. Isso permite uma configuração refinada das
      operações de cópia de segurança e restauração: <programlisting>/**
 * @backupGlobals disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @backupGlobals enabled
     */
    public function testThatInteractsWithGlobalVariables()
    {
        // ...
    }
}</programlisting>
    </para>
  </section>

  <section id="appendixes.annotations.backupStaticAttributes">
    <title>@backupStaticAttributes</title>

    <para>
      <indexterm><primary><literal>@backupStaticAttributes</literal></primary></indexterm>

      A anotação <literal>@backupStaticAttributes</literal> pode ser usada para
      copiar todos valores de propriedades estáticas em todas classes declaradas antes de cada
      teste e restaurá-los depois. Pode ser usado em nível de classe de caso de teste ou
      método de teste:

      <programlisting>
/**
 * @backupStaticAttributes enabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @backupStaticAttributes disabled
     */
    public function testThatInteractsWithStaticAttributes()
    {
        // ...
    }
}
</programlisting>
    </para>

    <note>
      <para>
        <literal>@backupStaticAttributes</literal> é limitada pela parte interna do PHP
        e pode causar valores estáticos não intencionais ao persistir e vazar para
        testes subsequentes em algumas circunstâncias.
      </para>
      <para>
        Veja <xref linkend="fixtures.global-state"/> para detalhes.
      </para>
    </note>

  </section>

  <section id="appendixes.annotations.before">
    <title>@before</title>

    <para>

      A anotação <literal>@before</literal> pode ser usada para especificar métodos
      que devem ser chamados antes de cada método de teste em uma classe de caso de teste.
      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @before
     */
    public function setupSomeFixtures()
    {
        // ...
    }

    /**
     * @before
     */
    public function setupSomeOtherFixtures()
    {
        // ...
    }
}</programlisting>
    </para>
  </section>

  <section id="appendixes.annotations.beforeClass">
    <title>@beforeClass</title>

    <para>

      A anotação <literal>@beforeClass</literal> pode ser usada para especificar métodos
      estáticos que devem ser chamados antes de quaisquer métodos de teste em uma classe
      de teste serem executados para criar ambientes compartilahdos.
      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @beforeClass
     */
    public static function setUpSomeSharedFixtures()
    {
        // ...
    }

    /**
     * @beforeClass
     */
    public static function setUpSomeOtherSharedFixtures()
    {
        // ...
    }
}</programlisting>
    </para>
  </section>

  <section id="appendixes.annotations.codeCoverageIgnore">
    <title>@codeCoverageIgnore*</title>

    <para>
      <indexterm><primary>@codeCoverageIgnore</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnoreStart</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnoreEnd</primary></indexterm>

      As anotações <literal>@codeCoverageIgnore</literal>,
      <literal>@codeCoverageIgnoreStart</literal> e
      <literal>@codeCoverageIgnoreEnd</literal> podem ser usadas
      para excluir linhas de código da análise de cobertura.
    </para>

    <para>
      Para uso, veja <xref
      linkend="code-coverage-analysis.ignoring-code-blocks"/>.
    </para>
  </section>

  <section id="appendixes.annotations.covers">
    <title>@covers</title>

    <para>
      <indexterm><primary>Cobertura de Código</primary></indexterm>
      <indexterm><primary>@covers</primary></indexterm>

      A anotação <literal>@covers</literal> pode ser usada no código de teste para
      especificar quais métodos um método de teste quer testar: <programlisting>/**
 * @covers BankAccount::getBalance
 */
public function testBalanceIsInitiallyZero()
{
    self::assertEquals(0, $this->ba->getBalance());
}</programlisting>
    </para>

    <para>
      Se fornecida, apenas a informação de cobertura de código para o(s)
      método(s) especificado(s) será considerada.
    </para>

    <para>
      <xref linkend="appendixes.annotations.covers.tables.annotations"/> mostra
      a sintaxe da anotação <literal>@covers</literal>.
    </para>

    <table id="appendixes.annotations.covers.tables.annotations">
      <title>Anotações para especificar quais métodos são cobertos por um teste</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Anotação</entry>
            <entry>Descrição</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal><![CDATA[@covers ClassName::methodName]]></literal></entry>
            <entry><literal>Especifica que o método de teste anotado cobre o método especificado.</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ClassName]]></literal></entry>
            <entry><literal>Especifica que o método de teste anotado cobre todos os métodos de uma dada classe.</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ClassName<extended>]]></literal></entry>
            <entry><literal>Especifica que o método de teste anotado cobre todos os métodos de uma dada classe e sua(s) classe(s) pai(s) e interface(s).</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ClassName::<public>]]></literal></entry>
            <entry><literal>Especifica que o método de teste anotado cobre todos os métodos públicos de uma dada classe.</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ClassName::<protected>]]></literal></entry>
            <entry><literal>Especifica que o método de teste anotado cobre todos os métodos protegidos de uma dada classe.</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ClassName::<private>]]></literal></entry>
            <entry><literal>Especifica que o método de teste anotado cobre todos os métodos privados de uma dada classe.</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ClassName::<!public>]]></literal></entry>
            <entry><literal>Especifica que o método de teste anotado cobre todos os métodos que não sejam públicos de uma dada classe.</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ClassName::<!protected>]]></literal></entry>
            <entry><literal>Especifica que o método de teste anotado cobre todos os métodos que não sejam protegidos de uma dada classe.</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ClassName::<!private>]]></literal></entry>
            <entry><literal>Especifica que o método de teste anotado cobre todos os métodos que não sejam privados de uma dada classe.</literal></entry>
          </row>
          <row>
            <entry><literal><![CDATA[@covers ::functionName]]></literal></entry>
            <entry><literal>Especifica que o método de teste anotado cobre todos os métodos que não sejam privados de uma dada classe.</literal></entry>
          </row>
         </tbody>
      </tgroup>
    </table>
  </section>

  <section id="appendixes.annotations.coversDefaultClass">
    <title>@coversDefaultClass</title>

    <para>
      <indexterm><primary>@coversDefaultClass</primary></indexterm>

      A anotação <literal>@coversDefaultClass</literal> pode ser usada para
      especificar um namespace padrão ou nome de classe. Dessa forma nomes longos não precisam ser
      repetidos para toda anotação <literal>@covers</literal>. Veja o
      <xref linkend="appendixes.annotations.examples.CoversDefaultClassTest.php" />.
    </para>

    <example id="appendixes.annotations.examples.CoversDefaultClassTest.php">
      <title>Usando @coversDefaultClass para encurtar anotações</title>
      <programlisting><![CDATA[<?php
/**
 * @coversDefaultClass \Foo\CoveredClass
 */
class CoversDefaultClassTest extends PHPUnit_Framework_TestCase
{
    /**
     * @covers ::publicMethod
     */
    public function testSomething()
    {
        $o = new Foo\CoveredClass;
        $o->publicMethod();
    }
}
?>]]></programlisting>
    </example>
  </section>

  <section id="appendixes.annotations.coversNothing">
    <title>@coversNothing</title>

    <para>
      <indexterm><primary>@coversNothing</primary></indexterm>

      A anotação <literal>@coversNothing</literal> pode ser usada no
      código de teste para especificar que nenhuma informação de cobertura de código será
      gravada para o caso de teste anotado.
    </para>

    <para>
        Isso pode ser usado para testes de integração. Veja
        <xref linkend="code-coverage-analysis.specifying-covered-methods.examples.GuestbookIntegrationTest.php"/>
        para um exemplo.
    </para>

    <para>
        A anotação pode ser usada nos níveis de classe e de método e
        vão sobrescrever quaisquer tags <literal>@covers</literal>.
    </para>
  </section>

  <section id="appendixes.annotations.dataProvider">
    <title>@dataProvider</title>

    <para>
      <indexterm><primary>@dataProvider</primary></indexterm>

      Um método de teste pode aceitar argumentos arbitrários. Esses argumentos devem ser
      fornecidos por um método provedor  (<literal>provider()</literal> em
      <xref linkend="writing-tests-for-phpunit.data-providers.examples.DataTest.php" />).
      O método provedor de dados a ser usado é especificado usando a anotação
      <literal>@dataProvider</literal>.
    </para>

    <para>
      Veja <xref linkend="writing-tests-for-phpunit.data-providers"/> para mais
      detalhes.
    </para>
  </section>

  <section id="appendixes.annotations.depends">
    <title>@depends</title>

    <para>
      <indexterm><primary>@depends</primary></indexterm>

      O PHPUnit suporta a declaração de dependências explícitas entre métodos
      de teste. Tais dependências não definem a ordem em que os métodos de teste
      devem ser executados, mas permitem o retorno de uma instância do
      ambiente de teste por um produtor e passá-la aos consumidores dependentes.
      O <xref linkend="writing-tests-for-phpunit.examples.StackTest2.php"/> mostra
      como usar a anotação <literal>@depends</literal> para expressar
      dependências entre métodos de teste.
    </para>

    <para>
      Veja <xref linkend="writing-tests-for-phpunit.test-dependencies"/> para mais
      detalhes.
    </para>
  </section>

  <section id="appendixes.annotations.expectedException">
    <title>@expectedException</title>

    <para>
      <indexterm><primary>@expectedException</primary></indexterm>

      O <xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php" />
      mostra como usar a anotação <literal>@expectedException</literal> para
      testar se uma exceção é lançada dentro do código testado.
    </para>

    <para>
      Veja <xref linkend="writing-tests-for-phpunit.exceptions"/> para mais
      detalhes.
    </para>
  </section>

  <section id="appendixes.annotations.expectedExceptionCode">
    <title>@expectedExceptionCode</title>

    <para>
      <indexterm><primary>@expectedExceptionCode</primary></indexterm>

      A anotação <literal>@expectedExceptionCode</literal> em conjunção
      com a <literal>@expectedException</literal> permite fazer asserções no
      código de erro de uma exceção lançada, permitindo diminuir uma
      exceção específica.

      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException     MyException
     * @expectedExceptionCode 20
     */
    public function testExceptionHasErrorcode20()
    {
        throw new MyException('Some Message', 20);
    }
}</programlisting>

      Para facilitar o teste e reduzir a duplicação, um atalho pode ser usado para
      especificar uma constante de classe como um
      <literal>@expectedExceptionCode</literal> usando a sintaxe
      "<literal>@expectedExceptionCode ClassName::CONST</literal>".

      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
      * @expectedException     MyException
      * @expectedExceptionCode MyClass::ERRORCODE
      */
    public function testExceptionHasErrorcode20()
    {
      throw new MyException('Some Message', 20);
    }
}
class MyClass
{
    const ERRORCODE = 20;
}</programlisting>

    </para>

  </section>

  <section id="appendixes.annotations.expectedExceptionMessage">
    <title>@expectedExceptionMessage</title>

    <para>
      <indexterm><primary>@expectedExceptionMessage</primary></indexterm>

      A anotação <literal>@expectedExceptionMessage</literal> trabalha de modo similar
      a <literal>@expectedExceptionCode</literal> já que lhe permite fazer uma
      asserção na mensagem de erro de uma exceção.

      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException        MyException
     * @expectedExceptionMessage Some Message
     */
    public function testExceptionHasRightMessage()
    {
        throw new MyException('Some Message', 20);
    }
}</programlisting>

      A mensagem esperada pode ser uma substring de uma Mensagem de exceção.
      Isso pode ser útil para asseverar apenas que um certo nome ou parâmetro que
      foi passado é mostrado na exceção e não fixar toda a
      mensagem de exceção no teste.

      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
     /**
      * @expectedException        MyException
      * @expectedExceptionMessage broken
      */
     public function testExceptionHasRightMessage()
     {
         $param = "broken";
         throw new MyException('Invalid parameter "'.$param.'".', 20);
     }
}</programlisting>

      Para facilitar o teste e reduzir duplicação um atalho pode ser usado para
      especificar uma constante de classe como uma
      <literal>@expectedExceptionMessage</literal> usando a sintaxe
      "<literal>@expectedExceptionMessage ClassName::CONST</literal>".

      Um exemplo pode ser encontrado na seção chamada <xref linkend="appendixes.annotations.expectedExceptionCode"/>.
    </para>

  </section>

  <section id="appendixes.annotations.expectedExceptionMessageRegExp">
    <title>@expectedExceptionMessageRegExp</title>

    <para>
      <indexterm><primary>@expectedExceptionMessageRegExp</primary></indexterm>

      A mensagem experada também pode ser especificada como uma expressão regular usando
      a anotação <literal>@expectedExceptionMessageRegExp</literal>. Isso
      é útil em situações aonde uma substring não é adequada para combinar
      uma determinada mensagem.

      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
     /**
      * @expectedException              MyException
      * @expectedExceptionMessageRegExp /Argument \d+ can not be an? \w+/
      */
     public function testExceptionHasRightMessage()
     {
         throw new MyException('Argument 2 can not be an integer');
     }
}</programlisting>
    </para>

  </section>

  <section id="appendixes.annotations.group">
    <title>@group</title>

    <para>
      <indexterm><primary>@group</primary></indexterm>

      Um teste pode ser marcado como pertencente a um ou mais grupos usando a
      anotação <literal>@group</literal> desta forma <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @group specification
     */
    public function testSomething()
    {
    }

    /**
     * @group regresssion
     * @group bug2204
     */
    public function testSomethingElse()
    {
    }
}</programlisting>
    </para>

    <para>
      Testes podem ser selecionados para execução baseada em grupos usando as
      opções <literal>--group</literal> e <literal>--exclude-group</literal>
      do executor de teste em linha-de-comando ou usando as respectivas diretivas do
      arquivo de configuração XML.
    </para>
  </section>

  <section id="appendixes.annotations.large">
    <title>@large</title>

    <para>
      <indexterm><primary><literal>@large</literal></primary></indexterm>

      A anotação <literal>@large</literal> é um apelido para
      <literal>@group large</literal>.
    </para>

    <para>
      <indexterm><primary><literal>PHP_Invoker</literal></primary></indexterm>
      <indexterm><primary><literal>timeoutForLargeTests</literal></primary></indexterm>

      Se o pacote <literal>PHP_Invoker</literal> estiver instalado e o modo
      estrito estiver habilitado, um teste grande irá falhar se ele demorar mais de 60
      segundos para executar. Esse tempo de espera é configurável através do
      atributo <literal>timeoutForLargeTests</literal> no arquivo
      de configuração XML.
    </para>
  </section>

  <section id="appendixes.annotations.medium">
    <title>@medium</title>

    <para>
      <indexterm><primary><literal>@medium</literal></primary></indexterm>

      A anotação <literal>@medium</literal> é um apelido para
      <literal>@group medium</literal>. Um teste médio não deve depender de um teste
      marcado como <literal>@large</literal>.
    </para>

    <para>
      <indexterm><primary><literal>PHP_Invoker</literal></primary></indexterm>
      <indexterm><primary><literal>timeoutForMediumTests</literal></primary></indexterm>

      Se o pacote <literal>PHP_Invoker</literal> estiver instalado e o modo
      estrito estiver habilitado, um teste médio irá falhar se ele demorar mais de 10
      segundos para executar. Esse tempo de espera é configurável através do
      atributo <literal>timeoutForMediumTests</literal> no arquivo
      de configuração XML.
    </para>
  </section>

  <section id="appendixes.annotations.preserveGlobalState">
    <title>@preserveGlobalState</title>

    <para>
      <indexterm><primary>@preserveGlobalState</primary></indexterm>

      Quando um teste é executado em um processo separado, o PHPUnit
      tentará preservar o estado global de processo pai
      serializando todos globais no processo pai e deserializando-os
      no processo filho. Isso pode causar problemas se o processo pai
      contém globais que não são serializáveis. Para corrigir isto, você pode prevenir o
      PHPUnit de preservar o estado global com a
      anotação <literal>@preserveGlobalState</literal>.
      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     */
    public function testInSeparateProcess()
    {
        // ...
    }
}</programlisting>
    </para>
  </section>

  <section id="appendixes.annotations.requires">
    <title>@requires</title>

    <para>
      <indexterm><primary><literal>@requires</literal></primary></indexterm>

      A anotação <literal>@requires</literal> pode ser usada para pular testes quando pré-condições
      comuns, como a Versão do PHP ou extensões instaladas, não batem.
    </para>

    <para>
      <indexterm><primary><literal>@requires</literal></primary></indexterm>
      Uma lista completa de possibilidades e exemplos pode ser encontrada em
      <xref linkend="incomplete-and-skipped-tests.requires.tables.api" />
    </para>
  </section>

  <section id="appendixes.annotations.runTestsInSeparateProcesses">
    <title>@runTestsInSeparateProcesses</title>

    <para>
      <indexterm><primary>@runTestsInSeparateProcesses</primary></indexterm>

      Indica que todos testes em uma classe de teste devem ser executados em um processo
      PHP separado. <programlisting>/**
 * @runTestsInSeparateProcesses
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    // ...
}</programlisting>

      <emphasis role="strong">Nota:</emphasis> Por padrão, o PHPUnit tentará
      preservar o estado global de processo pai
      serializando todos globais no processo pai e deserializando-os
      no processo filho. Isso pode causar problemas se o processo pai
      contém globais que não são serializáveis. Veja <xref
      linkend="appendixes.annotations.preserveGlobalState"/> para informações
      de como corrigir isso.
    </para>
  </section>

  <section id="appendixes.annotations.runInSeparateProcess">
    <title>@runInSeparateProcess</title>

    <para>
      <indexterm><primary>@runInSeparateProcess</primary></indexterm>

      Indica que um teste deve ser executado em um processo PHP separado.
      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @runInSeparateProcess
     */
    public function testInSeparateProcess()
    {
        // ...
    }
}</programlisting>

      <emphasis role="strong">Nota:</emphasis> Por padrão, o PHPUnit tentará
      preservar o estado global de processo pai
      serializando todos globais no processo pai e deserializando-os
      no processo filho. Isso pode causar problemas se o processo pai
      contém globais que não são serializáveis. Veja <xref
      linkend="appendixes.annotations.preserveGlobalState"/> para informações
      de como corrigir isso.
    </para>
  </section>

  <section id="appendixes.annotations.small">
    <title>@small</title>

    <para>
      <indexterm><primary><literal>@small</literal></primary></indexterm>

      A anotação <literal>@small</literal> é um apelido para
      <literal>@group small</literal>. Um teste pequeno não deve depender de um teste
      marcado como <literal>@medium</literal> ou <literal>@large</literal>.
    </para>

    <para>
      <indexterm><primary><literal>PHP_Invoker</literal></primary></indexterm>
      <indexterm><primary><literal>timeoutForSmallTests</literal></primary></indexterm>

      Se o pacote <literal>PHP_Invoker</literal> estiver instalado e o modo
      estrito estiver habilitado, um teste pequeno irá falhar se ele demorar mais de 1
      segundo para executar. Esse tempo de espera é configurável através do
      atributo <literal>timeoutForLargeTests</literal> no arquivo
      de configuração XML.
    </para>

    <note>
      <para>
        Pr padrão, todos testes são considerados pequenos se eles não são
        como <literal>@medium</literal> ou <literal>@large</literal>. Note, por favor,
        no entanto, que <literal>--group</literal> e as opções relacionadas irão
        apenas considerarão um teste ser do grupo <literal>small</literal> se ele
        é marcado explicitamente com a anotação apropriada.
      </para>
    </note>
  </section>

  <section id="appendixes.annotations.test">
    <title>@test</title>

    <para>
      <indexterm><primary>@test</primary></indexterm>

      Como uma alternativa para prefixar seus nomes de métodos de teste com
      <literal>test</literal>, você pode usar a anotação <literal>@test</literal>
      no Bloco de Documentação do método para marcá-lo como um método de teste.
      <programlisting>/**
 * @test
 */
public function initialBalanceShouldBe0()
{
    self::assertEquals(0, $this->ba->getBalance());
}</programlisting>
    </para>
  </section>

  <section id="appendixes.annotations.testdox">
    <title>@testdox</title>

    <para>
      <indexterm><primary>TestDox</primary></indexterm>
      <indexterm><primary>@testdox</primary></indexterm>
    </para>

    <programlisting></programlisting>
  </section>

  <section id="appendixes.annotations.ticket">
    <title>@ticket</title>

    <para>
      <indexterm><primary>@ticket</primary></indexterm>
    </para>

    <programlisting></programlisting>
  </section>

  <section id="appendixes.annotations.uses">
    <title>@uses</title>

    <para>
      <indexterm><primary>@uses</primary></indexterm>

      A anotação <literal>@uses</literal> especifica o código que irá
      ser executado por um teste, mas não se destina a ser coberto pelo teste. Um bom
      exemplo é um objeto valor que é necessário para testar um unidade de código.
      <programlisting>/**
 * @covers BankAccount::deposit
 * @uses   Money
 */
public function testMoneyCanBeDepositedInAccount()
{
    // ...
}</programlisting>
    </para>

    <para>
      Essa anotação é especialmente útil em modo de cobertura estrita aonde
      código coberto involuntariamente fará um teste falhar. Veja
      <xref linkend="risky-tests.unintentionally-covered-code"/> para mais
      informação sobre modo de cobertura estrito.
    </para>
  </section>
</appendix>
