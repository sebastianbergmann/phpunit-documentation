<?xml version="1.0" encoding="utf-8" ?>

<chapter id="organizing-tests">
  <title>Organizando Testes</title>

  <para>
    <indexterm><primary>Suíte de Testes</primary></indexterm>

    Um dos objetivos do PHPUnit é que os testes
    devem ser combináveis: queremos ser capazes de executar qualquer quantidade ou combinação
    de testes juntos, por exemplo todos os testes para um projeto inteiro, ou os
    testes para todas as classes de um ambiente que é parte do projeto, ou apenas
    os testes para uma só classe.
  </para>

  <para>
    O PHPUnit suporta diferentes formas de organizar testes e combiná-los em uma
    suíte de testes. Este capítulo mostra as abordagens mais comuns.
  </para>

  <section id="organizing-tests.filesystem">
    <title>Compondo uma Suíte de Testes usando o Sistema de Arquivos</title>

    <para>
      Provavelmente o jeito mais fácil de compor uma suíte de testes é manter todos
      os arquivos-fonte dos casos de teste em um diretório de testes. O PHPUnit pode descobrir
      automaticamente e executar os testes atravessando recursivamente o diretório de testes.
    </para>

    <para>
      Vamos dar uma olhada na suíte de testes da
      biblioteca <ulink url="http://github.com/sebastianbergmann/money/">sebastianbergmann/money</ulink>.
      Observando a estrutura de diretórios desse projeto, podemos ver que as
      classes dos casos de teste no diretório <filename>tests</filename> espelha o
      pacote e estrutura de classes do Sistema Sob Teste (SST – ou SUT: System Under Teste) no diretório
      <filename>src</filename>:
    </para>

    <screen>src                                 tests
`-- Currency.php                    `-- CurrencyTest.php
`-- IntlFormatter.php               `-- IntlFormatterTest.php
`-- Money.php                       `-- MoneyTest.php
`-- autoload.php</screen>

    <para>
      Para executar todos os testes para a biblioteca precisamos apenas apontar o
      executor de testes em linha-de-comando do PHPUnit para o diretório de teste:
    </para>

    <screen><userinput>phpunit --bootstrap src/autoload.php tests</userinput>
PHPUnit 4.8.0 by Sebastian Bergmann.

.................................

Time: 636 ms, Memory: 3.50Mb

OK (33 tests, 52 assertions)</screen>

    <note>
      <para>
        Se você apontar o executor de testes em linha-de-comando do PHPUnit para um diretório,
        ele irá procurar por arquivos <filename>*Test.php</filename>.
      </para>
    </note>

    <para>
      Para executar apenas os testes declarados na classe de casos de teste <literal>CurrencyTest</literal>
      em <filename>tests/CurrencyTest.php</filename>, podemos usar o seguinte comando:
    </para>

    <screen><userinput>phpunit --bootstrap src/autoload.php tests/CurrencyTest</userinput>
PHPUnit 4.8.0 by Sebastian Bergmann.

........

Time: 280 ms, Memory: 2.75Mb

OK (8 tests, 8 assertions)</screen>

    <para>
      Para um controle mais refinado sobre quais testes executar, podemos usar a opção
      <literal>--filter</literal>:
    </para>

    <screen><userinput>phpunit --bootstrap src/autoload.php --filter testObjectCanBeConstructedForValidConstructorArgument tests</userinput>
PHPUnit 4.8.0 by Sebastian Bergmann.

..

Time: 167 ms, Memory: 3.00Mb

OK (2 test, 2 assertions)</screen>

    <note>
      <para>
        Uma desvantagem dessa abordagem é que não temos controle sobre a ordem em
        que os testes são executados. Isso pode causar problemas com relação às
        dependências dos testes, veja <xref linkend="writing-tests-for-phpunit.test-dependencies"/>.
        Na próxima seção você vai ver como pode tornar explícita a ordem de execução
        de testes usando o arquivo de configuração XML.
      </para>
    </note>
  </section>

  <section id="organizing-tests.xml-configuration">
    <title>Compondo uma Suíte de Testes Usando uma Configuração XML</title>
    <indexterm><primary>Configuração XML</primary></indexterm>

    <para>
      O arquivo de configuração XML do PHPUnit (<xref linkend="appendixes.configuration"/>)
      também pode ser usado para compor uma suíte de testes.
      <xref linkend="organizing-tests.xml-configuration.examples.phpunit.xml"/>
      mostra um arquivo mínimo <filename>phpunit.xml</filename> que adicionará todas
      as classes <literal>*Test</literal> que forem encontradas em
      arquivos <filename>*Test.php</filename> quando o diretório <filename>tests</filename>
      é atravessados recursivamente.
    </para>

    <example id="organizing-tests.xml-configuration.examples.phpunit.xml">
      <title>Compondo uma Suíte de Testes Usando uma Configuração XML</title>
      <programlisting><![CDATA[<phpunit bootstrap="src/autoload.php">
  <testsuites>
    <testsuite name="money">
      <directory>tests</directory>
    </testsuite>
  </testsuites>
</phpunit>]]></programlisting>
    </example>

    <para>
      A ordem de execução dos testes pode ser explicitada:
    </para>
    <para>
      Se <filename>phpunit.xml</filename> ou
      <filename>phpunit.xml.dist</filename> (nesta ordem) existem no
      diretório de trabalho atual e <literal>--configuration</literal>
      <emphasis>não</emphasis> é usado, a configuração será automaticamente
      lida desse arquivo.
    </para>

    <para>
      A ordem em que os testes são executados pode ser explicitada:
    </para>

    <example id="organizing-tests.xml-configuration.examples.phpunit.xml2">
      <title>Compondo uma Suíte de Testes Usando uma Configuração XML</title>
      <programlisting><![CDATA[<phpunit bootstrap="src/autoload.php">
  <testsuites>
    <testsuite name="money">
      <file>tests/IntlFormatterTest.php</file>
      <file>tests/MoneyTest.php</file>
      <file>tests/CurrencyTest.php</file>
    </testsuite>
  </testsuites>
</phpunit>]]></programlisting>
    </example>
  </section>
</chapter>
