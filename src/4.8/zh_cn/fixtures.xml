<?xml version="1.0" encoding="utf-8"?>

<chapter id="fixtures">
  <title>基境(fixture)</title>

  <para>
    <indexterm><primary>Fixture （基境）</primary></indexterm>在编写测试时，最费时的部分之一是编写代码来将整个场景设置成某个已知的状态，并在测试结束后将其复原到初始状态。这个已知的状态称为测试的 <emphasis>基境(fixture)</emphasis>。</para>

  <para>在<xref linkend="writing-tests-for-phpunit.examples.StackTest.php"/>中，基境十分简单，就是存储在 <literal>$stack</literal> 变量中的数组。然而，绝大多数时候基境均远比一个简单数组要复杂，用于建立基境的代码量也会随之增长。测试的真正内容就被淹没于建立基境带来的干扰中。当编写多个需要类似基境的测试时这个问题就变得更糟糕了。如果没有来自于测试框架的帮助，就不得不在写每一个测试时都将建立基境的代码重复一次。</para>

  <para>
    <indexterm><primary>Template Method （模板方法）</primary></indexterm>
    <indexterm><primary>setUp()</primary></indexterm>
    <indexterm><primary>tearDown()</primary></indexterm>PHPUnit 支持共享建立基境的代码。在运行某个测试方法前，会调用一个名叫 <literal>setUp()</literal> 的模板方法。<literal>setUp()</literal> 是创建测试所用对象的地方。当测试方法运行结束后，不管是成功还是失败，都会调用另外一个名叫 <literal>tearDown()</literal> 的模板方法。<literal>tearDown()</literal> 是清理测试所用对象的地方。</para>

  <para>在<xref linkend="writing-tests-for-phpunit.examples.StackTest2.php"/>中，我们在测试之间运用生产者-消费者关系来共享基境。这并非总是预期的方式，甚至有时是不可能的。<xref linkend="fixtures.examples.StackTest.php"/>展示了另外一个编写测试 <literal>StackTest</literal> 的方式。在这个方式中，不再重用基境本身，而是重用建立基境的代码。首先声明一个实例变量，<literal>$stack</literal>，用来替代方法内的局部变量。然后把 <literal>array</literal> 基境的建立放到 <literal>setUp()</literal> 方法中。最后，从测试方法中去除冗余代码，在 <literal>assertEquals()</literal>  断言方法中使用新引入的实例变量 <literal>$this-&gt;stack</literal>替代方法内的局部变量 <literal>$stack</literal>。</para>

  <example id="fixtures.examples.StackTest.php">
    <title>用 setUp() 建立栈的基境</title>
    <programlisting><![CDATA[<?php
class StackTest extends PHPUnit_Framework_TestCase
{
    protected $stack;

    protected function setUp()
    {
        $this->stack = array();
    }

    public function testEmpty()
    {
        $this->assertTrue(empty($this->stack));
    }

    public function testPush()
    {
        array_push($this->stack, 'foo');
        $this->assertEquals('foo', $this->stack[count($this->stack)-1]);
        $this->assertFalse(empty($this->stack));
    }

    public function testPop()
    {
        array_push($this->stack, 'foo');
        $this->assertEquals('foo', array_pop($this->stack));
        $this->assertTrue(empty($this->stack));
    }
}
?>]]></programlisting>
  </example>

  <para>
    <indexterm><primary>Template Method （模板方法）</primary></indexterm>
    <indexterm><primary>setUpBeforeClass()</primary></indexterm>
    <indexterm><primary>setUp()</primary></indexterm>
    <indexterm><primary>tearDown()</primary></indexterm>
    <indexterm><primary>tearDownAfterClass()</primary></indexterm> 测试类的每个测试方法都会运行一次 <literal>setUp()</literal> 和 <literal>tearDown()</literal> 模板方法（同时，每个测试方法都是在一个全新的测试类实例上运行的）。</para>

  <para>
    <indexterm><primary>Template Method （模板方法）</primary></indexterm>
    <indexterm><primary>setUpBeforeClass()</primary></indexterm>
    <indexterm><primary>setUp()</primary></indexterm>
    <indexterm><primary>assertPreConditions()</primary></indexterm>
    <indexterm><primary>assertPostConditions()</primary></indexterm>
    <indexterm><primary>tearDown()</primary></indexterm>
    <indexterm><primary>tearDownAfterClass()</primary></indexterm>
    <indexterm><primary>onNotSuccessfulTest()</primary></indexterm>另外，<literal>setUpBeforeClass()</literal> 与 <literal>tearDownAfterClass()</literal> 模板方法将分别在测试用例类的第一个测试运行之前和测试用例类的最后一个测试运行之后调用。</para>

  <para>
    <indexterm><primary>Template Method （模板方法）</primary></indexterm>下面这个例子中展示了测试用例类中所有可用的模板方法。</para>

  <example id="fixtures.examples.TemplateMethodsTest.php">
    <title>展示所有可用模板方法的例子</title>
    <programlisting><![CDATA[<?php
class TemplateMethodsTest extends PHPUnit_Framework_TestCase
{
    public static function setUpBeforeClass()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function setUp()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function assertPreConditions()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    public function testOne()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
        $this->assertTrue(TRUE);
    }

    public function testTwo()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
        $this->assertTrue(FALSE);
    }

    protected function assertPostConditions()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function tearDown()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    public static function tearDownAfterClass()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function onNotSuccessfulTest(Exception $e)
    {
        fwrite(STDOUT, __METHOD__ . "\n");
        throw $e;
    }
}
?>]]></programlisting>
     <screen><userinput>phpunit TemplateMethodsTest</userinput><![CDATA[
PHPUnit 4.8.0 by Sebastian Bergmann and contributors.

TemplateMethodsTest::setUpBeforeClass
TemplateMethodsTest::setUp
TemplateMethodsTest::assertPreConditions
TemplateMethodsTest::testOne
TemplateMethodsTest::assertPostConditions
TemplateMethodsTest::tearDown
.TemplateMethodsTest::setUp
TemplateMethodsTest::assertPreConditions
TemplateMethodsTest::testTwo
TemplateMethodsTest::tearDown
TemplateMethodsTest::onNotSuccessfulTest
FTemplateMethodsTest::tearDownAfterClass

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) TemplateMethodsTest::testTwo
Failed asserting that <boolean:false> is true.
/home/sb/TemplateMethodsTest.php:30

FAILURES!
Tests: 2, Assertions: 2, Failures: 1.]]></screen>
  </example>

  <section id="fixtures.more-setup-than-teardown">
    <title>setUp() 多 tearDown() 少</title>

    <para>
      理论上说，<literal>setUp()</literal> 和 <literal>tearDown()</literal> 是精确对称的，但是实践中并非如此。实际上，只有在 <literal>setUp()</literal> 中分配了诸如文件或套接字之类的外部资源时才需要实现 <literal>tearDown()</literal> 。如果 <literal>setUp()</literal> 中只创建纯 PHP 对象，通常可以略过 <literal>tearDown()</literal>。不过，如果在 <literal>setUp()</literal> 中创建了大量对象，你可能想要在 <literal>tearDown()</literal> 中 <literal>unset()</literal> 指向这些对象的变量，这样它们就可以被垃圾回收机制回收掉。对测试用例对象的垃圾回收动作则是不可预知的。</para>
  </section>

  <section id="fixtures.variations">
    <title>变体</title>

    <para>如果两个基境建立工作略有不同的测试该怎么办？有两种可能：</para>

    <itemizedlist>
      <listitem>
        <para>如果两个 <literal>setUp()</literal> 代码仅有微小差异，把有差异的代码内容从 <literal>setUp()</literal> 移到测试方法内。</para>
      </listitem>

      <listitem>
        <para>如果两个 <literal>setUp()</literal> 是确实不一样，那么需要另外一个测试用例类。参考基境建立工作的不同之处来命名这个类。</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="fixtures.sharing-fixture">
    <title>基境共享</title>

    <para>有几个好的理由来在测试之间共享基境，但是大部分情况下，在测试之间共享基境的需求都源于某个未解决的设计问题。</para>

    <para>一个有实际意义的多测试间共享基境的例子是数据库连接：只登录数据库一次，然后重用此连接，而不是每个测试都建立一个新的数据库连接。这样能加快测试的运行。</para>

    <para>
      <indexterm><primary>setUpBeforeClass</primary></indexterm>
      <indexterm><primary>tearDownAfterClass</primary></indexterm>

      <xref linkend="fixtures.sharing-fixture.examples.DatabaseTest.php"/>用 <literal>setUpBeforeClass()</literal> 和 <literal>tearDownAfterClass()</literal> 模板方法来分别在测试用例类的第一个测试之前和最后一个测试之后连接与断开数据库。</para>

    <example id="fixtures.sharing-fixture.examples.DatabaseTest.php">
      <title>在同一个测试套件内的不同测试之间共享基境</title>
      <programlisting><![CDATA[<?php
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    protected static $dbh;

    public static function setUpBeforeClass()
    {
        self::$dbh = new PDO('sqlite::memory:');
    }

    public static function tearDownAfterClass()
    {
        self::$dbh = NULL;
    }
}
?>]]></programlisting>
    </example>

    <para>需要反复强调的是：在测试之间共享基境会降低测试的价值。潜在的设计问题是对象之间并非松散耦合。如果解决掉潜在的设计问题并使用桩件(stub)（参见<xref linkend="test-doubles"/>）来编写测试，就能达成更好的结果，而不是在测试之间产生运行时依赖并错过改进设计的机会。</para>
  </section>

  <section id="fixtures.global-state">
    <title>全局状态</title>

    <para>
      <ulink url="http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html">使用单件(singleton)的代码很难测试。</ulink>使用全局变量的代码也一样。通常情况下，欲测代码和全局变量之间会强烈耦合，并且其创建无法控制。另外一个问题是，一个测试对全局变量的改变可能会破坏另外一个测试。</para>

    <para>在 PHP 中，全局变量是这样运作的：</para>

    <itemizedlist>
      <listitem><para>全局变量 <literal>$foo = 'bar';</literal> 实际上是存储为 <literal>$GLOBALS['foo'] = 'bar';</literal> 的。</para></listitem>
      <listitem><para><literal>$GLOBALS</literal>这个变量是一种被称为<emphasis>超全局</emphasis>变量的变量。</para></listitem>
      <listitem><para>超全局变量是一种在任何变量作用域中都总是可用的内建变量。</para></listitem>
      <listitem><para>在函数或者方法的变量作用域中，要访问全局变量 <literal>$foo</literal>，可以直接访问 <literal>$GLOBALS['foo']</literal>，或者用 <literal>global $foo;</literal> 来创建一个引用全局变量的局部变量。</para></listitem>
    </itemizedlist>

    <para>除了全局变量，类的静态属性也是一种全局状态。</para>

    <para>
      <indexterm><primary>Global Variable （全局变量）</primary></indexterm>
      <indexterm><primary>Test Isolation （测试隔离）</primary></indexterm>默认情况下，PHPUnit 用一种更改全局变量与超全局变量(<literal>$GLOBALS</literal>、<literal>$_ENV</literal>、<literal>$_POST</literal>、<literal>$_GET</literal>、<literal>$_COOKIE</literal>、<literal>$_SERVER</literal>、<literal>$_FILES</literal>、<literal>$_REQUEST</literal>)不会影响到其他测试的方式来运行所有测试。同时，还可以选择将这种隔离扩展到类的静态属性。</para>

    <note>
      <para>对全局变量和类的静态属性的备份与还原操作使用了 <literal>serialize()</literal> 与 <literal>unserialize()</literal>。</para>
      <para>某些类的实例对象（比如 <literal>PDO</literal>）无法序列化，因此如果把这样一个对象存放在比如说 <literal>$GLOBALS</literal> 数组内时，备份操作就会出问题。</para>
    </note>

    <para>
      <indexterm><primary><literal>@backupGlobals</literal></primary></indexterm>
      <indexterm><primary><literal>$backupGlobalsBlacklist</literal></primary></indexterm>在<xref linkend="appendixes.annotations.backupGlobals"/>中所讨论的 <literal>@backupGlobals</literal> 标注可以用来控制对全局变量的备份与还原操作。另外，还可以提供一个全局变量的黑名单，黑名单中的全局变量将被排除于备份与还原操作之外，就像这样：<programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    protected $backupGlobalsBlacklist = array('globalVariable');

    // ...
}</programlisting>
    </para>

    <note>
      <para>在方法（例如 <literal>setUp()</literal> 方法）内对 <literal>$backupGlobalsBlacklist</literal> 属性进行设置是无效的。</para>
    </note>

    <para>
      <indexterm><primary><literal>@backupStaticAttributes</literal></primary></indexterm>
      <indexterm><primary><literal>$backupStaticAttributesBlacklist</literal></primary></indexterm>在 <xref linkend="appendixes.annotations.backupStaticAttributes"/> 中提到的 <literal>@backupStaticAttributes</literal> 标注可以用于在每个测试之前备份所有已声明类的静态属性值并在其后恢复。</para>

    <para>它所处理的并不只是测试类自身，而是在测试开始时已声明的所有类。它只作用于静态类属性，不作用于函数内声明的静态变量。</para>

    <note>
      <para>只有启用了 <literal>@backupStaticAttributes</literal> 的测试方法才会在方法之前执行此操作。如果在此之前运行的某个没有启用 <literal>@backupStaticAttributes</literal> 的测试方法改变了静态属性的值，那么被备份及还原的将会是这个改变后的值——而非初始声明时提供的默认值。PHP 并不额外记录任何静态变量的声明时提供的初始默认值。</para>
      <para>同样的情况也发生于测试内部新加载/声明的类的静态属性上。它们也无法在测试结束之后复原为声明时提供的原始默认值，因为无从得知这些默认值。这些被修改过的值会泄漏到后继测试中。</para>
      <para>对单元测试而言，推荐在 <literal>setUp()</literal> 中显式的重置测试中使用到的静态属性（最好同时在 <literal>tearDown()</literal> 中执行重置，这样就保证不会影响到后继的测试）。</para>
    </note>

    <para>可以提供黑名单来将静态属性从备份与还原操作中排除出去：<programlisting>
class MyTest extends PHPUnit_Framework_TestCase
{
    protected $backupStaticAttributesBlacklist = array(
      'className' =&gt; array('attributeName')
    );

    // ...
}
</programlisting>
    </para>

    <note>
      <para>在方法（例如  <literal>setUp()</literal> ）内对 <literal>$backupStaticAttributesBlacklist</literal> 属性进行设置是无效的。</para>
    </note>
  </section>
</chapter>