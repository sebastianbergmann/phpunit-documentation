<?xml version="1.0" encoding="utf-8" ?>

<chapter id="code-coverage-analysis">
  <title>Análise de Cobertura de Código</title>

  <blockquote>
    <attribution>Murali Nandigama</attribution>
    <para>
      A beleza de testar não se encontra no esforço, mas na eficiência.
    </para>
    <para>
      Saber o que deveria ser testado é lindo, e saber o que está sendo testado é lindo.
    </para>
  </blockquote>

  <para>
    <indexterm><primary>Cobertura de Código</primary></indexterm>

    Neste capítulo você aprenderá tudo sobre a funcionalidade de cobertura de código do PHPUnit que lhe dará uma perspicácia sobre quais partes do código de produção são executadas quando os testes são executados. Isso ajuda a responder questões como:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        Como você descobre o código que ainda não foi testado -- ou, em outras palavras, ainda não foi <emphasis>coberto</emphasis> por um teste?
      </para>
    </listitem>
    <listitem>
      <para>Como você mede o quanto os testes estão completos?</para>
    </listitem>
  </itemizedlist>

  <para>
    Um exemplo sobre o quê podem significar as estatísticas de cobertura de código é que se existir um método com 100 linhas de código, e apenas 75 dessas linhas são realmente executadas quando os testes são executados, então considera-se que o método tem uma cobertura de código de 75 porcento.
  </para>

  <para>
    <indexterm><primary>Xdebug</primary></indexterm>

    A funcionalidade de cobertura de código do PHPUnit faz uso do componente
    <ulink url="http://github.com/sebastianbergmann/php-code-coverage">PHP_CodeCoverage</ulink>
    que por sua vez aproveita a funcionalidade da cobertura de declarações fornecida pela extensão <ulink url="http://www.xdebug.org/">Xdebug</ulink>
    para PHP.
  </para>

  <para>
    Deixe-nos gerar um relatório de cobertura de código para a classe <literal>ContaBancaria</literal>
    de <xref linkend="test-driven-development.bankaccount-example.examples.BankAccount2.php" />.
  </para>

  <screen><userinput>phpunit --coverage-html ./report ContaBancariaTest</userinput>
PHPUnit 4.1.0 by Sebastian Bergmann.

...

Time: 0 seconds

OK (3 tests, 3 assertions)

Generating report, this may take a moment.</screen>

  <para>
    <xref linkend="code-coverage-analysis.figures.Code_Coverage.png" /> mostra um resumo do relatório de Cobertura de Código. Linhas de código que foram executadas enquanto os testes executavam estão destacadas em verde, linhas de código que são executáveis mas não foram executadas estão destacadas em vermelho, e o "código morto" está destacado em cinza. O número à esquerda da linha de código atual indica quantos testes cobrem aquela linha.
  </para>

  <figure id="code-coverage-analysis.figures.Code_Coverage.png">
    <title>Cobertura de Código para <literal>setSaldo()</literal></title>

    <graphic fileref="figures/Code_Coverage.png" />
  </figure>

  <para>
    Clicando no número da linha de uma linha coberta abrirá um painel (veja
    <xref linkend="code-coverage-analysis.figures.Code_Coverage2.png"/>) que mostra os casos de testes que cobrem esta linha.
  </para>

  <figure id="code-coverage-analysis.figures.Code_Coverage2.png">
    <title>Painel com informações sobre cobertura de testes</title>

    <graphic fileref="figures/Code_Coverage2.png" />
  </figure>

  <para>
    O relatório de cobertura de código para nosso exemplo <literal>ContaBancaria</literal> mostra que não temos quaisquer testes ainda que chamem os métodos
    <literal>setBalance()</literal>, <literal>depositMoney()</literal>, e
    <literal>withdrawMoney()</literal> com valores legais.
    <xref linkend="code-coverage-analysis.examples.BankAccountTest.php" />
    mostra um teste que pode ser adicionado à classe de caso de teste <literal>ContaBancariaTest</literal>
    para cobrir completamente a classe <literal>ContaBancaria</literal>.
  </para>

  <example id="code-coverage-analysis.examples.BankAccountTest.php">
    <title>Teste perdido para conseguir completa cobertura de código</title>
    <programlisting><![CDATA[<?php
require_once 'ContaBancaria.php';

class ContaBancariaTest extends PHPUnit_Framework_TestCase
{
// ...

public function testDepositarSacarDinheiro()
{
$this->assertEquals(0, $this->cb->getSaldo());
$this->cb->depositarDinheiro(1);
$this->assertEquals(1, $this->cb->getSaldo());
$this->cb->sacarDinheiro(1);
$this->assertEquals(0, $this->cb->getSaldo());
}
}
?>]]></programlisting>
  </example>

  <para>
    <xref linkend="code-coverage-analysis.figures.Code_Coverage3.png" /> mostra a cobertura de código para o método <literal>setSaldo()</literal> com o teste adicional.
  </para>

  <figure id="code-coverage-analysis.figures.Code_Coverage3.png">
    <title>Cobertura de Código para <literal>setSaldo()</literal> com teste adicional</title>

    <graphic fileref="figures/Code_Coverage3.png" />
  </figure>

  <section id="code-coverage-analysis.specifying-covered-methods">
    <title>Especificando métodos cobertos</title>

    <para>
      <indexterm><primary>Anotação</primary></indexterm>
      <indexterm><primary>@covers</primary></indexterm>

      A anotação <literal>@covers</literal> (veja
      <xref linkend="appendixes.annotations.covers.tables.annotations"/>) pode ser usada em um código de teste para especificar qual(is) método(s) um método de teste quer testar. Se fornecido, apenas a informação de cobertura de código para o(s) método(s) especificado(s) será considerada.
      <xref linkend="code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php"/>
      mostra um exemplo.
    </para>

    <example id="code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php">
      <title>Testes que especificam quais métodos querem cobrir</title>
      <programlisting><![CDATA[<?php
require_once 'ContaBancaria.php';

class ContaBancariaTest extends PHPUnit_Framework_TestCase
{
protected $cb;

protected function setUp()
{
$this->cb = new ContaBancaria;
}

/**
* @covers ContaBancaria::getSaldo
*/
public function testSaldoInicialEhZero()
{
$this->assertEquals(0, $this->cb->getSaldo());
}

/**
* @covers ContaBancaria::sacarDinheiro
*/
public function testSaldoNaoPodeFicarNegativo()
{
try {
$this->cb->sacarDinheiro(1);
}

catch (ExcecaoContaBancaria $e) {
$this->assertEquals(0, $this->cb->getSaldo());

return;
}

$this->fail();
}

/**
* @covers ContaBancaria::depositarDinheiro
*/
public function testBalanceCannotBecomeNegative2()
{
try {
$this->cb->depositarDinheiro(-1);
}

catch (ExcecaoContaBancaria $e) {
$this->assertEquals(0, $this->cb->getSaldo());

return;
}

$this->fail();
}

/**
* @covers ContaBancaria::getSaldo
* @covers ContaBancaria::depositarDinheiro
* @covers ContaBancaria::sacarDinheiro
*/

public function testDepositarSacarDinheiro()
{
$this->assertEquals(0, $this->cb->getSaldo());
$this->cb->depositarDinheiro(1);
$this->assertEquals(1, $this->cb->getSaldo());
$this->cb->sacarDinheiro(1);
$this->assertEquals(0, $this->cb->getSaldo());
}
}
?>]]></programlisting>
    </example>

    <para>
      <indexterm><primary>Anotação</primary></indexterm>
      <indexterm><primary>@coversNothing</primary></indexterm>

      Também é possível especificar que um teste não deve cobrir
      <emphasis>qualquer</emphasis> método usando a anotação
      <literal>@coversNothing</literal> (veja
      <xref linkend="appendixes.annotations.coversNothing"/>). Isso pode ser útil quando escrever testes de integração para certificar-se de que você só gerará cobertura de código com testes unitários.
    </para>

    <example id="code-coverage-analysis.specifying-covered-methods.examples.GuestbookIntegrationTest.php">
      <title>Um teste que especifica que nenhum método deve ser coberto</title>
      <programlisting><![CDATA[<?php
class IntegracaoLivroDeVisitasTest extends PHPUnit_Extensions_Database_TestCase
{
/**
* @coversNothing
*/
public function testAdicionaEntrada()
{
$livrodevisitas = new LivroDeVisitas();
$livrodevisitas->adicionaEntrada("suzy", "Olá mundo!");

$tabelaQuery = $this->getConnection()->criarTabelaQuery(
'livrodevisitas', 'SELECT * FROM livrodevisitas'
);
$expectedTable = $this->criarConjuntoDadosXmlPlano("livroEsperado.xml")
->getTabela("livrodevisitas");
$this->assertTablesEqual($tabelaEsperada, $tabelaQuery);
}
}
?>]]>
      </programlisting>
    </example>
  </section>

  <section id="code-coverage-analysis.ignoring-code-blocks">
    <title>Ignorando Blocos de Código</title>

    <para>
      <indexterm><primary>Anotação</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnore</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnoreStart</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnoreEnd</primary></indexterm>

      Às vezes você tem blocos de código que não pode testar e que pode querer ignorar durante a análise de cobertura de código. O PHPUnit permite que você o faça usando as anotações <literal>@codeCoverageIgnore</literal>,
      <literal>@codeCoverageIgnoreStart</literal> e
      <literal>@codeCoverageIgnoreEnd</literal> como mostrado em
      <xref linkend="code-coverage-analysis.ignoring-code-blocks.examples.Sample.php"/>.
    </para>

    <example id="code-coverage-analysis.ignoring-code-blocks.examples.Sample.php">
      <title>Usando as anotações <literal>@codeCoverageIgnore</literal>, <literal>@codeCoverageIgnoreStart</literal> e <literal>@codeCoverageIgnoreEnd</literal></title>
        <programlisting><![CDATA[<?php
/**
* @codeCoverageIgnore
*/
class Foo
{
public function bar()
{
}
}

class Bar
{
/**
* @codeCoverageIgnore
*/
public function foo()
{
}
}

if (FALSE) {
// @codeCoverageIgnoreStart
print '*';
// @codeCoverageIgnoreEnd
}
?>]]></programlisting>
    </example>

    <para>
      As linhas de código que estão marcadas para serem ignoradas usando as anotações são contadas como executadas (se forem executáveis) e não serão destacadas.
    </para>
  </section>

  <section id="code-coverage-analysis.including-excluding-files">
    <title>Incluindo e Excluindo Arquivos</title>

    <para>
      <indexterm><primary>Cobertura de Código</primary></indexterm>
      <indexterm><primary>Lista-negra</primary></indexterm>
      <indexterm><primary>Lista-branca</primary></indexterm>

      Por padrão, todos os arquivos de código-fonte que contêm pelo menos uma linha de código que tenha sido executada (e apenas esses arquivos) são incluídos no relatório. Os arquivos de código-fonte que são incluídos no relatório podem ser filtrados usando uma abordagem de lista-negra ou lista-branca.
    </para>

    <para>
      A lista-negra é pré-preenchida com todos os arquivos de código-fonte do próprio PHPUnit assim como os testes. Quando a lista-branca está vazia (padrão), a lista-negra é usada. Quando a lista-branca não está vazia, a lista-branca é usada. Cada arquivo na lista-branca é adicionado ao relatório de cobertura de código independentemente de ter sido executado ou não. Todas as linhas em tal arquivo, incluindo aquelas que não são executáveis, são contadas como não executadas.
    </para>

    <para>
      Quando você define <literal>processUncoveredFilesFromWhitelist="true"</literal>
      na sua configuração do PHPUnit (veja <xref
      linkend="appendixes.configuration.blacklist-whitelist"/>) então esses arquivos serão incluídos pelo PHP_CodeCoverage para calcular adequadamente o número de linhas executáveis.
    </para>

    <note>
      <para>
        Por favor, note que o carregamento de arquivos de código-fonte que é realizado quando
        <literal>processUncoveredFilesFromWhitelist="true"</literal> é definido pode causar problemas quando um arquivo de código-fonte contém código fora do escopo de uma classe ou função, por exemplo.
      </para>
    </note>

    <para>
      O arquivo de configuração XML do PHPUnit (veja <xref linkend="appendixes.configuration.blacklist-whitelist"/>)
      pode ser usado para controlar as listas branca e negra. Usar uma lista-branca é a melhor prática recomendada para controlar a lista de arquivos incluídos no relatório de cobertura de código.
    </para>
  </section>

  <section id="code-coverage-analysis.edge-cases">
    <title>Casos Extremos</title>

    <para>
      De modo geral é seguro dizer que o PHPUnit oferece a você uma informação de cobertura de código "baseada em linha", mas devido ao modo que a informação é coletada, existem alguns casos extremos dignos de atenção.
    </para>

    <example id="code-coverage-analysis.edge-cases.examples.Sample.php">
      <programlisting><![CDATA[<?php
// Por ser "baseado em linha" e não em declaração,
// uma linha sempre terá um estado de cobertura
if(false) esta_chamada_de_funcao_aparece_como_coberta();

// Devido ao modo que a cobertura de código funciona internamente,
// estas duas linhas são especiais.
// Esta linha vai aparecer como não-executável
if(false)
	// Esta linha vai aparecer como coberta, pois de fato é a cobertura
	// da declaração if da linha anterior que é mostrada aqui!
	tambem_vai_aparecer_como_coberta();

// Para evitar isso é necessário usar chaves
if(false){
	esta_chamada_nunca_aparecera_como_coberta();
}
?>]]></programlisting>
    </example>

  </section>

</chapter>
