<?xml version="1.0" encoding="utf-8" ?>

<chapter id="textui">
  <title>The Command-Line Test Runner</title>

  <caution>
    <para>
      You are looking at the documentation for a version of PHPUnit that is no
      longer supported.
    </para>

    <para>
      The documentation for the current version of PHPUnit can be found
      <ulink url="../../current/en/index.html">here</ulink>.
    </para>
  </caution>

  <para>
    The PHPUnit command-line test runner can be invoked through the
    <filename>phpunit</filename> command. The following code shows how to run
    tests with the PHPUnit command-line test runner:
  </para>

  <screen><userinput>phpunit ArrayTest</userinput>
PHPUnit 3.4.14 by Sebastian Bergmann.

..

Time: 0 seconds

OK (2 tests, 2 assertions)</screen>

  <para>
    For each test run, the PHPUnit command-line tool prints one character to
    indicate progress:
  </para>

  <variablelist>
    <varlistentry>
      <term><literal>.</literal></term>
      <listitem>
        <para>
          Printed when the test succeeds.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>F</literal></term>
      <listitem>
        <para>
          Printed when an assertion fails while running the test method.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>E</literal></term>
      <listitem>
        <para>
          Printed when an error occurs while running the test method.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>S</literal></term>
      <listitem>
        <para>
          Printed when the test has been skipped (see
          <xref linkend="incomplete-and-skipped-tests" />).
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>I</literal></term>
      <listitem>
        <para>
          Printed when the test is marked as being incomplete or not yet
          implemented (see <xref linkend="incomplete-and-skipped-tests" />).
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    <indexterm><primary>Error</primary></indexterm>
    <indexterm><primary>Failure</primary></indexterm>

    PHPUnit distinguishes between <emphasis>failures</emphasis> and
    <emphasis>errors</emphasis>. A failure is a violated PHPUnit
    assertion such as a failing <literal>assertEquals()</literal> call.
    An error is an unexpected exception or a PHP error. Sometimes
    this distinction proves useful since errors tend to be easier to fix
    than failures. If you have a big list of problems, it is best to
    tackle the errors first and see if you have any failures left when
    they are all fixed.
  </para>

  <para>
    Let's take a look at the command-line test runner's switches in
    the following code:
  </para>

  <screen><userinput>phpunit --help</userinput>
<![CDATA[PHPUnit 3.4.14 by Sebastian Bergmann.

Usage: phpunit [switches] UnitTest [UnitTest.php]
       phpunit [switches] <directory>

  --log-junit <file>       Log test execution in JUnit XML format to file.
  --log-tap <file>         Log test execution in TAP format to file.
  --log-json <file>        Log test execution in JSON format.

  --coverage-html <dir>    Generate code coverage report in HTML format.
  --coverage-clover <file> Write code coverage data in Clover XML format.
  --coverage-source <dir>  Write code coverage / source data in XML format.

  --story-html <file>      Write Story/BDD results in HTML format to file.
  --story-text <file>      Write Story/BDD results in Text format to file.

  --testdox-html <file>    Write agile documentation in HTML format to file.
  --testdox-text <file>    Write agile documentation in Text format to file.

  --filter <pattern>       Filter which tests to run.
  --group ...              Only runs tests from the specified group(s).
  --exclude-group ...      Exclude tests from the specified group(s).
  --list-groups            List available test groups.

  --loader <loader>        TestSuiteLoader implementation to use.
  --repeat <times>         Runs the test(s) repeatedly.

  --story                  Report test execution progress in Story/BDD format.
  --tap                    Report test execution progress in TAP format.
  --testdox                Report test execution progress in TestDox format.

  --colors                 Use colors in output.
  --stderr                 Write to STDERR instead of STDOUT.
  --stop-on-failure        Stop execution upon first error or failure.
  --verbose                Output more verbose information.
  --wait                   Waits for a keystroke after each test.

  --skeleton-class         Generate Unit class for UnitTest in UnitTest.php.
  --skeleton-test          Generate UnitTest class for Unit in Unit.php.

  --process-isolation      Run each test in a separate PHP process.
  --no-globals-backup      Do not backup and restore $GLOBALS for each test.
  --static-backup          Backup and restore static attributes for each test.
  --syntax-check           Try to check source files for syntax errors.

  --bootstrap <file>       A "bootstrap" PHP file that is run before the tests.
  --configuration <file>   Read configuration from XML file.
  --no-configuration       Ignore default configuration file (phpunit.xml).
  --include-path <path(s)> Prepend PHP's include_path with given path(s).
  -d key[=value]           Sets a php.ini value.

  --help                   Prints this usage information.
  --version                Prints the version and exits.]]></screen>

  <variablelist>
    <varlistentry>
      <term><literal>phpunit UnitTest</literal></term>
      <listitem>
        <para>
          Runs the tests that are provided by the class
          <literal>UnitTest</literal>. This class is expected to be declared
          in the <filename>UnitTest.php</filename> sourcefile.
        </para>

        <para>
          <literal>UnitTest</literal> must be either a class that inherits
          from <literal>PHPUnit_Framework_TestCase</literal> or a class that
          provides a <literal>public static suite()</literal> method which
          returns a <literal>PHPUnit_Framework_Test</literal> object, for
          example an instance of the
          <literal>PHPUnit_Framework_TestSuite</literal> class.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>phpunit UnitTest UnitTest.php</literal></term>
      <listitem>
        <para>
          Runs the tests that are provided by the class
          <literal>UnitTest</literal>. This class is expected to be declared
          in the specified sourcefile.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>JSON</primary></indexterm>
      <term><literal>--log-json</literal></term>
      <listitem>
        <para>
          Generates a logfile using the
          <ulink url="http://www.json.org/">JSON</ulink> format.
          See <xref linkend="logging" /> for more details.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Logfile</primary></indexterm>
      <term><literal>--log-junit</literal></term>
      <listitem>
        <para>
          Generates a logfile in JUnit XML format for the tests run.
          See <xref linkend="logging" /> for more details.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Logfile</primary></indexterm>
      <term><literal>--log-tap</literal></term>
      <listitem>
        <para>
          Generates a logfile using the <ulink url="http://testanything.org/">Test Anything Protocol (TAP)</ulink>
          format for the tests run. See <xref linkend="logging" /> for more
          details.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Code Coverage</primary></indexterm>
      <indexterm><primary>Report</primary></indexterm>
      <term><literal>--coverage-html</literal></term>
      <listitem>
        <para>
          Generates a code coverage report in HTML format. See
          <xref linkend="code-coverage-analysis" /> for more details.
        </para>
        <para>
          Please note that this functionality is only available when the
          tokenizer and Xdebug extensions are installed.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Code Coverage</primary></indexterm>
      <term><literal>--coverage-clover</literal></term>
      <listitem>
        <para>
          Generates a logfile in XML format with the code coverage information
          for the tests run. See <xref linkend="logging" /> for more details.
        </para>
        <para>
          Please note that this functionality is only available when the
          tokenizer and Xdebug extensions are installed.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Code Coverage</primary></indexterm>
      <term><literal>--coverage-source</literal></term>
      <listitem>
        <para>
          Generates one XML file per covered PHP source file to a given
          directory. Each <![CDATA[<line>]]> element holds a line of PHP
          sourcecode that is annotated with code coverage information.
        </para>
        <para>
          Please note that this functionality is only available when the
          tokenizer and Xdebug extensions are installed.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Behaviour-Driven Development</primary></indexterm>
      <term><literal>--story-html</literal> and <literal>--story-text</literal></term>
      <listitem>
        <para>
          Generates reports in HTML or plain text format for the
          Behaviour-Driven Development scenarios that are run. See
          <xref linkend="behaviour-driven-development" /> for more details.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Agile Documentation</primary></indexterm>
      <term><literal>--testdox-html</literal> and <literal>--testdox-text</literal></term>
      <listitem>
        <para>
          Generates agile documentation in HTML or plain text format for the
          tests that are run. See <xref linkend="other-uses-for-tests" /> for
          more details.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>--filter</literal></term>
      <listitem>
        <para>
          Only runs tests whose name matches the given pattern. The pattern
          can be either the name of a single test or a
          <ulink url="http://www.php.net/pcre">regular expression</ulink>
          that matches multiple test names.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Test Groups</primary></indexterm>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@group</primary></indexterm>
      <term><literal>--group</literal></term>
      <listitem>
        <para>
          Only runs tests from the specified group(s). A test can be tagged as
          belonging to a group using the <literal>@group</literal> annotation.
        </para>
      </listitem>
    </varlistentry>Behaviour-Driven Development

    <varlistentry>
      <indexterm><primary>Test Groups</primary></indexterm>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@group</primary></indexterm>
      <term><literal>--exclude-group</literal></term>
      <listitem>
        <para>
          Exclude tests from the specified group(s). A test can be tagged as
          belonging to a group using the <literal>@group</literal> annotation.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Test Groups</primary></indexterm>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@group</primary></indexterm>
      <term><literal>--list-groups</literal></term>
      <listitem>
        <para>
          List available test groups.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>PHPUnit_Runner_TestSuiteLoader</primary></indexterm>
      <term><literal>--loader</literal></term>
      <listitem>
        <para>
          Specifies the <literal>PHPUnit_Runner_TestSuiteLoader</literal>
          implementation to use.
        </para>

        <para>
          The standard test suite loader will look for the sourcefile in the
          current working directory and in each directory that is specified in
          PHP's <literal>include_path</literal> configuration directive.
          Following the PEAR Naming Conventions, a class name such as
          <literal>Project_Package_Class</literal> is mapped to the
          sourcefile name <filename>Project/Package/Class.php</filename>.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>--repeat</literal></term>
      <listitem>
        <para>
          Repeatedly runs the test(s) the specified number of times.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Behaviour-Driven Development</primary></indexterm>
      <term><literal>--story</literal></term>
      <listitem>
        <para>
          Reports the test progress in a format that fits Behaviour-Driven
          Development. See <xref linkend="behaviour-driven-development" /> for
          more details.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>--tap</literal></term>
      <listitem>
        <para>
          Reports the test progress using the <ulink url="http://testanything.org/">Test Anything Protocol (TAP)</ulink>.
          See <xref linkend="logging" /> for more details.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Agile Documentation</primary></indexterm>
      <term><literal>--testdox</literal></term>
      <listitem>
        <para>
          Reports the test progress as agile documentation. See
          <xref linkend="other-uses-for-tests" /> for more details.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>--colors</literal></term>
      <listitem>
        <para>
          Use colors in output.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>--syntax-check</literal></term>
      <listitem>
        <para>
          Enables the syntax check of test source files.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>--stderr</literal></term>
      <listitem>
        <para>
          Optionally print to <literal>STDERR</literal> instead of
          <literal>STDOUT</literal>.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>--stop-on-failure</literal></term>
      <listitem>
        <para>
          Stop execution upon first error or failure.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>--verbose</literal></term>
      <listitem>
        <para>
          Output more verbose information, for instance the names of tests
          that were incomplete or have been skipped.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>--wait</literal></term>
      <listitem>
        <para>
          Waits for a keystroke after each test. This is useful if you are
          running the tests in a window that stays open only as long as the
          test runner is active.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Skeleton Generator</primary></indexterm>
      <term><literal>--skeleton-class</literal></term>
      <listitem>
        <para>
          Generates a skeleton class <literal>Unit</literal>
          (in <filename>Unit.php</filename>) from a test case class
          <literal>UnitTest</literal> (in <filename>UnitTest.php</filename>).
          See <xref linkend="skeleton-generator" /> for more details.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Skeleton Generator</primary></indexterm>
      <term><literal>--skeleton-test</literal></term>
      <listitem>
        <para>
          Generates a skeleton test case class <literal>UnitTest</literal>
          (in <filename>UnitTest.php</filename>) for a class
          <literal>Unit</literal> (in <filename>Unit.php</filename>).
          See <xref linkend="skeleton-generator" /> for more details.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Process Isolation</primary></indexterm>
      <indexterm><primary>Test Isolation</primary></indexterm>
      <term><literal>--process-isolation</literal></term>
      <listitem>
        <para>
          Run each test in a separate PHP process.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Test Isolation</primary></indexterm>
      <term><literal>--no-globals-backup</literal></term>
      <listitem>
        <para>
          Do not backup and restore $GLOBALS. See <xref linkend="fixtures.global-state" />
          for more details.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Test Isolation</primary></indexterm>
      <term><literal>--static-backup</literal></term>
      <listitem>
        <para>
          Backup and restore static attributes of user-defined classes.
          See <xref linkend="fixtures.global-state" /> for more details.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>--bootstrap</literal></term>
      <listitem>
        <para>
          A "bootstrap" PHP file that is run before the tests.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Configuration</primary></indexterm>
      <term><literal>--configuration</literal></term>
      <listitem>
        <para>
          Read configuration from XML file.
          See <xref linkend="appendixes.configuration" /> for more details.
        </para>
        <para>
          If <filename>phpunit.xml</filename> or
          <filename>phpunit.xml.dist</filename> (in that order) exist in the
          current working directory and <literal>--configuration</literal> is
          <emphasis>not</emphasis> used, the configuration will be automatically
          read from that file.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Configuration</primary></indexterm>
      <term><literal>--no-configuration</literal></term>
      <listitem>
        <para>
          Ignore <filename>phpunit.xml</filename> and
          <filename>phpunit.xml.dist</filename> from the current working
          directory.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary><literal>include_path</literal></primary></indexterm>
      <term><literal>--include-path</literal></term>
      <listitem>
        <para>
          Prepend PHP's <literal>include_path</literal> with given path(s).
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>-d</literal></term>
      <listitem>
        <para>
          Sets the value of the given PHP configuration option.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <note>
    <para>
      <indexterm><primary>Syntax Check</primary></indexterm>

      When the tested code contains PHP syntax errors, the TextUI test runner
      might exit without printing error information. The standard test suite
      loader can optionally check the test suite sourcefile for PHP syntax
      errors, but not sourcefiles included by the test suite sourcefile.
    </para>
  </note>
</chapter>
