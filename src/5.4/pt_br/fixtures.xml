<?xml version="1.0" encoding="utf-8" ?>

<chapter id="fixtures">
  <title>Ambientes</title>

  <para>
    <indexterm><primary>Ambientes</primary></indexterm>

    Uma das partes que mais consomem tempo ao se escrever testes é escrever o 
    código para ajustar o ambiente para um estado conhecido e então retorná-lo ao seu 
    estado original quando o teste está completo. Esse estado conhecido é chamado 
    de <emphasis>ambiente</emphasis> do teste.
  </para>

  <para>
    Em <xref linkend="writing-tests-for-phpunit.examples.StackTest.php" />, o 
    ambiente era simplesmente o vetor que está guardado na variável <literal>$stack</literal>.
    Na maior parte do tempo, porém, o ambiente será mais complexo 
    que um simples vetor, e a quantidade de código necessária para defini-lo aumentará 
    na mesma proporção. O conteúdo real do teste se perde na bagunça 
    da configuração do ambiente. Esse problema piora ainda mais quando você escreve 
    vários testes com ambientes similares. Sem alguma ajuda do framework de teste, 
    teríamos que duplicar o código que define o ambiente 
    para cada teste que escrevermos.
  </para>

  <para>
    <indexterm><primary>Método Modelo</primary></indexterm>
    <indexterm><primary>setUp()</primary></indexterm>
    <indexterm><primary>tearDown()</primary></indexterm>

    O PHPUnit suporta compartilhamento do código de configuração. Antes que um método seja executado, um 
    método modelo chamado <literal>setUp()</literal> é invocado.
    <literal>setUp()</literal> é onde você cria os objetos que serão 
    alvo dos testes. Uma vez que o método de teste tenha terminado sua execução, seja 
    bem-sucedido ou falho, outro método modelo chamado
    <literal>tearDown()</literal> é invocado. <literal>tearDown()</literal>
    é onde você limpa os objetos que foram alvo dos testes.
  </para>

  <para>
    Em <xref linkend="writing-tests-for-phpunit.examples.StackTest2.php" /> usamos 
    a relação produtor-consumidor entre testes para compartilhar ambientes. Isso 
    nem sempre é desejável, ou mesmo possível. <xref linkend="fixtures.examples.StackTest.php"/>
    mostra como podemos escrever os testes do <literal>StackTest</literal> de forma 
    que o próprio ambiente não é reutilizado, mas o código que o cria. 
    Primeiro declaramos a variável de instância <literal>$stack</literal>, que 
    usaremos no lugar de uma variável do método local. Então colocamos a 
    criação do ambiente <literal>vetor</literal> dentro do método
    <literal>setUp()</literal>. Finalmente, removemos o código redundante 
    dos métodos de teste e usamos a nova variável de instância,
    <literal>$this->stack</literal>, em vez da variável de método local
    <literal>$stack</literal> com o método de asserção <literal>assertEquals()</literal>.
  </para>

  <example id="fixtures.examples.StackTest.php">
    <title>Usando setUp() para criar o ambiente stack</title>
    <programlisting><![CDATA[<?php
class StackTest extends PHPUnit_Framework_TestCase
{
    protected $stack;

    protected function setUp()
    {
        $this->stack = array();
    }

    public function testEmpty()
    {
        $this->assertTrue(empty($this->stack));
    }

    public function testPush()
    {
        array_push($this->stack, 'foo');
        $this->assertEquals('foo', $this->stack[count($this->stack)-1]);
        $this->assertFalse(empty($this->stack));
    }

    public function testPop()
    {
        array_push($this->stack, 'foo');
        $this->assertEquals('foo', array_pop($this->stack));
        $this->assertTrue(empty($this->stack));
    }
}
?>]]></programlisting>
  </example>

  <para>
    <indexterm><primary>Método Modelo</primary></indexterm>
    <indexterm><primary>setUpBeforeClass()</primary></indexterm>
    <indexterm><primary>setUp()</primary></indexterm>
    <indexterm><primary>tearDown()</primary></indexterm>
    <indexterm><primary>tearDownAfterClass()</primary></indexterm>

    Os métodos-modelo <literal>setUp()</literal> e <literal>tearDown()</literal> 
    são executados uma vez para cada método de teste (e em novas instâncias) da 
    classe do caso de teste.
  </para>

  <para>
    <indexterm><primary>Método Modelo</primary></indexterm>
    <indexterm><primary>setUpBeforeClass()</primary></indexterm>
    <indexterm><primary>setUp()</primary></indexterm>
    <indexterm><primary>assertPreConditions()</primary></indexterm>
    <indexterm><primary>assertPostConditions()</primary></indexterm>
    <indexterm><primary>tearDown()</primary></indexterm>
    <indexterm><primary>tearDownAfterClass()</primary></indexterm>
    <indexterm><primary>onNotSuccessfulTest()</primary></indexterm>

    Além disso, os métodos-modelo <literal>setUpBeforeClass()</literal> e
    <literal>tearDownAfterClass()</literal> são chamados antes 
    do primeiro teste da classe do caso de teste ser executado e após o último teste da 
    classe do caso de teste ser executado, respectivamente.
  </para>

  <para>
    <indexterm><primary>Método Modelo</primary></indexterm>

    O exemplo abaixo mostra todos os métodos-modelo que estão disponíveis em uma classe 
    de casos de teste.
  </para>

  <example id="fixtures.examples.TemplateMethodsTest.php">
    <title>Exemplo mostrando todos os métodos-modelo disponíveis</title>
    <programlisting><![CDATA[<?php
class TemplateMethodsTest extends PHPUnit_Framework_TestCase
{
    public static function setUpBeforeClass()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function setUp()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function assertPreConditions()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    public function testOne()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
        $this->assertTrue(TRUE);
    }

    public function testTwo()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
        $this->assertTrue(FALSE);
    }

    protected function assertPostConditions()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function tearDown()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    public static function tearDownAfterClass()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function onNotSuccessfulTest(Exception $e)
    {
        fwrite(STDOUT, __METHOD__ . "\n");
        throw $e;
    }
}
?>]]></programlisting>
     <screen><userinput>phpunit TemplateMethodsTest</userinput><![CDATA[
PHPUnit 5.4.0 by Sebastian Bergmann and contributors.

TemplateMethodsTest::setUpBeforeClass
TemplateMethodsTest::setUp
TemplateMethodsTest::assertPreConditions
TemplateMethodsTest::testOne
TemplateMethodsTest::assertPostConditions
TemplateMethodsTest::tearDown
.TemplateMethodsTest::setUp
TemplateMethodsTest::assertPreConditions
TemplateMethodsTest::testTwo
TemplateMethodsTest::tearDown
TemplateMethodsTest::onNotSuccessfulTest
FTemplateMethodsTest::tearDownAfterClass

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) TemplateMethodsTest::testTwo
Failed asserting that <boolean:false> is true.
/home/sb/TemplateMethodsTest.php:30

FAILURES!
Tests: 2, Assertions: 2, Failures: 1.]]></screen>
  </example>

  <section id="fixtures.more-setup-than-teardown">
    <title>Mais setUp() que tearDown()</title>

    <para>
      <literal>setUp()</literal> e <literal>tearDown()</literal> são bastante 
      simétricos em teoria, mas não na prática. Na prática, você só precisa 
      implementar <literal>tearDown()</literal> se você tiver alocado 
      recursos externos como arquivos ou sockets no <literal>setUp()</literal>.
      Se seu <literal>setUp()</literal> apenas cria objetos planos do PHP, você 
      pode geralmente ignorar o <literal>tearDown()</literal>. Porém, se você 
      criar muitos objetos em seu <literal>setUp()</literal>, você pode querer 
      <literal>unset()</literal> as variáveis que apontam para aqueles objetos
      em seu <literal>tearDown()</literal> para que eles possam ser coletados como lixo. 
      A coleta de lixo dos objetos dos casos de teste não é previsível.
    </para>
  </section>

  <section id="fixtures.variations">
    <title>Variações</title>

    <para>
      O que acontece quando você tem dois testes com definições (setups) ligeiramente diferentes? 
      Existem duas possibilidades:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Se o código <literal>setUp()</literal> diferir só um pouco, mova 
          o código que difere do código do <literal>setUp()</literal> para 
          o método de teste.
        </para>
      </listitem>

      <listitem>
        <para>
          Se você tiver um <literal>setUp()</literal> realmente diferente, você precisará 
          de uma classe de caso de teste diferente. Nomeie a classe após a diferença 
          na configuração.
        </para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="fixtures.sharing-fixture">
    <title>Compartilhando Ambientes</title>

    <para>
      Existem algumas boas razões para compartilhar ambientes entre testes, mas na maioria 
        dos casos a necessidade de compartilhar um ambiente entre testes deriva de um problema 
        de design não resolvido.
    </para>

    <para>
      Um bom exemplo de um ambiente que faz sentido compartilhar através de vários 
        testes é a conexão ao banco de dados: você loga no banco de dados uma vez e 
        reutiliza essa conexão em vez de criar uma nova conexão para cada 
        teste. Isso faz seus testes serem executados mais rápido.
    </para>

    <para>
      <indexterm><primary>setUpBeforeClass</primary></indexterm>
      <indexterm><primary>tearDownAfterClass</primary></indexterm>

      <xref linkend="fixtures.sharing-fixture.examples.DatabaseTest.php" />
      usa os métodos-modelo <literal>setUpBeforeClass()</literal> e
      <literal>tearDownAfterClass()</literal> para conectar ao 
      banco de dados antes do primeiro teste da classe de casos de teste e para desconectar do 
      banco de dados após o último teste dos casos de teste, respectivamente.
    </para>

    <example id="fixtures.sharing-fixture.examples.DatabaseTest.php">
      <title>Compartilhando ambientes entre os testes de uma suíte de testes</title>
      <programlisting><![CDATA[<?php
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    protected static $dbh;

    public static function setUpBeforeClass()
    {
        self::$dbh = new PDO('sqlite::memory:');
    }

    public static function tearDownAfterClass()
    {
        self::$dbh = NULL;
    }
}
?>]]></programlisting>
    </example>

    <para>
      Não dá pra enfatizar o suficiente o quanto o compartilhamento de ambientes entre testes 
      reduz o custo dos testes. O problema de design subjacente é 
      que objetos não são de baixo acoplamento. Você vai conseguir 
      melhores resultados resolvendo o problema de design subjacente e então escrevendo testes 
      usando pontas (veja <xref linkend="test-doubles" />), do que criando 
      dependências entre os testes em tempo de execução e ignorando a oportunidade 
      de melhorar seu design.
    </para>
  </section>

  <section id="fixtures.global-state">
    <title>Estado Global</title>

    <para>
      <ulink url="http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html">É difícil testar um código que usa singletons (instâncias únicas de objetos).</ulink>
      Isso também vale para os códigos que usam variáveis globais. Tipicamente, o código 
      que você quer testar é fortemente acoplado com uma variável global e você não pode 
      controlar sua criação. Um problema adicional é o fato de que uma alteração em uma
      variável global para um teste pode quebrar um outro teste.
    </para>

    <para>
      Em PHP, variáveis globais trabalham desta forma:
    </para>

    <itemizedlist>
      <listitem><para>Uma variável global <literal>$foo = 'bar';</literal> é guardada como <literal>$GLOBALS['foo'] = 'bar';</literal>.</para></listitem>
      <listitem><para>A variável <literal>$GLOBALS</literal> é chamada de variável <emphasis>super-global</emphasis>.</para></listitem>
      <listitem><para>Variáveis super-globais são variáveis embutidas que estão sempre disponíveis em todos os escopos.</para></listitem>
      <listitem><para>No escopo de uma função ou método, você pode acessar a variável global <literal>$foo</literal> tanto por acesso direto à <literal>$GLOBALS['foo']</literal> ou usando <literal>global $foo;</literal> para criar uma variável local com uma referência à variável global.</para></listitem>
    </itemizedlist>

    <para>
      Além das variáveis globais, atributos estáticos de classes também são parte do 
      estado global.
    </para>

    <para>
      <indexterm><primary>Variável Global</primary></indexterm>
      <indexterm><primary>Isolamento de Testes</primary></indexterm>

      Por padrão, o PHPUnit executa seus testes de forma que mudanças às 
      variáveis globais ou super-globais (<literal>$GLOBALS</literal>,
      <literal>$_ENV</literal>, <literal>$_POST</literal>,
      <literal>$_GET</literal>, <literal>$_COOKIE</literal>,
      <literal>$_SERVER</literal>, <literal>$_FILES</literal>,
      <literal>$_REQUEST</literal>) não afetem outros testes. Opcionalmente, este 
      isolamento pode ser estendido a atributos estáticos de classes.
    </para>

    <note>
      <para>
        A operações de cópia de segurança e restauração para variáveis globais e atributos 
        estáticos de classes usa <literal>serialize()</literal> e
        <literal>unserialize()</literal>.
      </para>
      <para>
        Objetos de algumas classes (e.g., <literal>PDO</literal>) não podem ser 
        serializadas e a operação de cópia de segurança vai quebrar quando esse tipo de objeto 
        for guardado no vetor <literal>$GLOBALS</literal>, por exemplo.
      </para>
    </note>

    <para>
      <indexterm><primary><literal>@backupGlobals</literal></primary></indexterm>
      <indexterm><primary><literal>$backupGlobalsBlacklist</literal></primary></indexterm>

      A anotação <literal>@backupGlobals</literal> que é discutida na
      <xref linkend="appendixes.annotations.backupGlobals"/> pode ser usada para 
      controlar as operações de cópia de segurança e restauração para variáveis globais. 
      Alternativamente, você pode fornecer uma lista-negra de variáveis globais que deverão 
      ser excluídas das operações de backup e restauração como esta:
      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    protected $backupGlobalsBlacklist = array('globalVariable');

    // ...
}</programlisting>
    </para>

    <note>
      <para>
        Definir a propriedade <literal>$backupGlobalsBlacklist</literal> dentro 
        do método <literal>setUp()</literal>, por exemplo, não tem efeito.
      </para>
    </note>

    <para>
      <indexterm><primary><literal>@backupStaticAttributes</literal></primary></indexterm>
      <indexterm><primary><literal>$backupStaticAttributesBlacklist</literal></primary></indexterm>
      
      A anotação <literal>@backupStaticAttributes</literal> que é discutida na
      <xref linkend="appendixes.annotations.backupStaticAttributes"/> 
      pode ser usado para fazer backup de todos os valores de propriedades estáticas em todas as classes declaradas 
      antes de cada teste e restaurá-los depois.
    </para>
    
    <para>
      Ele processa todas as classes que são declaradas no momento que um teste começa, 
      não só a classe de teste. Ele só se aplica a propriedades da classe estática, 
      e não variáveis estáticas dentro de funções.
    </para>

    <note>
      <para>
        A operação <literal>@backupStaticAttributes</literal> é executada 
        antes de um método de teste, mas somente se ele está habilitado. Se um valor estático foi 
        alterado por um teste executado anteriormente que não 
        tinha ativado <literal>@backupStaticAttributes</literal>, esse valor então será 
        feito o backup e restaurado - não o valor padrão originalmente declarado. 
        O PHP não registra o valor padrão originalmente declarado de nenhuma variável 
        estática.
      </para>
      <para>
        O mesmo se aplica a propriedades estáticas de classes que foram 
        recém-carregadas/declaradas dentro de um teste. Elas não podem ser redefinidas para o seu valor 
        padrão originalmente declarado após o teste, uma vez que esse valor é desconhecido. 
        Qualquer que seja o valor definido irá vazar para testes subsequentes.
      </para>
      <para>
        Para testes de unidade, recomenda-se redefinir explicitamente os valores das 
        propriedades estáticas em teste em seu código <literal>setUp()</literal> 
        ao invés (e, idealmente, também <literal>tearDown()</literal>, de modo a não 
        afetar os testes posteriormente executados).
      </para>
    </note>

    <para>
      Você pode fornecer uma lista-negra de atributos estáticos que serão excluídos
      das operações de cópia de segurança e restauração:

      <programlisting>
class MyTest extends PHPUnit_Framework_TestCase
{
    protected $backupStaticAttributesBlacklist = array(
      'className' => array('attributeName')
    );

    // ...
}
</programlisting>
    </para>

    <note>
      <para>
        Definir a propriedade <literal>$backupStaticAttributesBlacklist</literal>
        dentro do método <literal>setUp()</literal> , por exemplo, não tem efeito.
      </para>
    </note>
  </section>
</chapter>
