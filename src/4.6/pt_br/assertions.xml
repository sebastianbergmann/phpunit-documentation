<?xml version="1.0" encoding="utf-8" ?>
<appendix id="appendixes.assertions">
  <title>Asserções</title>

  <para>
    Esse apêndice lista os vários métodos de asserções  que estão disponíveis.
  </para>

  <section id="appendixes.assertions.assertArrayHasKey">
    <title>assertArrayHasKey()</title>
    <indexterm><primary>assertArrayHasKey()</primary></indexterm>
    <indexterm><primary>assertArrayNotHasKey()</primary></indexterm>
    <para><literal>assertArrayHasKey(mixed $key, array $array[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o <literal>$array</literal> não contém a <literal>$key</literal>.</para>
    <para><literal>assertArrayNotHasKey()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertArrayHasKey.example">
      <title>Utilização de assertArrayHasKey()</title>
      <programlisting><![CDATA[<?php
class ArrayHasKeyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertArrayHasKey('foo', array('bar' => 'baz'));
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ArrayHasKeyTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) ArrayHasKeyTest::testFailure
Failed asserting that an array has the key 'foo'.

/home/sb/ArrayHasKeyTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertArraySubset">
    <title>assertArraySubset()</title>
    <indexterm><primary>assertArraySubset()</primary></indexterm>
    <indexterm><primary>assertArraySubset()</primary></indexterm>
    <para><literal>assertArraySubset(array $subset, array $array[, bool $strict = '', string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se <literal>$array</literal> não contém o <literal>$subset</literal>.</para>
    <para><literal>$strict</literal> é uma flag usada para comparar a identidade de objetos dentro de arrays.</para>
    <example id="appendixes.assertions.assertArraySubset.example">
      <title>Usage of assertArraySubset()</title>
      <programlisting><![CDATA[<?php
class ArraySubsetTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertArraySubset(['config' => ['key-a', 'key-b']], ['config' => ['key-a']]);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ArrayHasKeyTest</userinput><![CDATA[
PHPUnit 4.4.0 by Sebastian Bergmann.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) Epilog\EpilogTest::testNoFollowOption
Failed asserting that an array has the subset Array &0 (
    'config' => Array &1 (
        0 => 'key-a'
        1 => 'key-b'
    )
).

/home/sb/ArraySubsetTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertClassHasAttribute">
    <title>assertClassHasAttribute()</title>
    <indexterm><primary>assertClassHasAttribute()</primary></indexterm>
    <indexterm><primary>assertClassNotHasAttribute()</primary></indexterm>
    <para><literal>assertClassHasAttribute(string $attributeName, string $className[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o <literal>$className::attributeName</literal> não existir.</para>
    <para><literal>assertClassNotHasAttribute()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertClassHasAttribute.example">
      <title>Utilização de assertClassHasAttribute()</title>
      <programlisting><![CDATA[<?php
class ClassHasAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertClassHasAttribute('foo', 'stdClass');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ClassHasAttributeTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) ClassHasAttributeTest::testFailure
Failed asserting that class "stdClass" has attribute "foo".

/home/sb/ClassHasAttributeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertClassHasStaticAttribute">
    <title>assertClassHasStaticAttribute()</title>
    <indexterm><primary>assertClassHasStaticAttribute()</primary></indexterm>
    <indexterm><primary>assertClassNotHasStaticAttribute()</primary></indexterm>
    <para><literal>assertClassHasStaticAttribute(string $attributeName, string $className[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o <literal>$className::attributeName</literal> não existir.</para>
    <para><literal>assertClassNotHasStaticAttribute()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertClassHasStaticAttribute.example">
      <title>Utilização de assertClassHasStaticAttribute()</title>
      <programlisting><![CDATA[<?php
class ClassHasStaticAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertClassHasStaticAttribute('foo', 'stdClass');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ClassHasStaticAttributeTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) ClassHasStaticAttributeTest::testFailure
Failed asserting that class "stdClass" has static attribute "foo".

/home/sb/ClassHasStaticAttributeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertContains">
    <title>assertContains()</title>
    <indexterm><primary>assertContains()</primary></indexterm>
    <indexterm><primary>assertNotContains()</primary></indexterm>
    <indexterm><primary>assertAttributeContains()</primary></indexterm>
    <indexterm><primary>assertAttributeNotContains()</primary></indexterm>
    <para><literal>assertContains(mixed $needle, Iterator|array $haystack[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o <literal>$needle</literal> não é um elemento de <literal>$haystack</literal>.</para>
    <para><literal>assertNotContains()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <para><literal>assertAttributeContains()</literal> e <literal>assertAttributeNotContains()</literal> são invólucros convenientes que usam um atributo <literal>public</literal>, <literal>protected</literal>, ou <literal>private</literal> de uma classe ou objeto como a haystack.</para>
    <example id="appendixes.assertions.assertContains.example">
      <title>Utilização de assertContains()</title>
      <programlisting><![CDATA[<?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertContains(4, array(1, 2, 3));
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ContainsTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) ContainsTest::testFailure
Failed asserting that an array contains 4.

/home/sb/ContainsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>

    <para><literal>assertContains(string $needle, string $haystack[, string $message = '', boolean $ignoreCase = FALSE])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o <literal>$needle</literal> não é uma substring de <literal>$haystack</literal>.</para>
    <para>Se <literal>$ignoreCase</literal> é <literal>TRUE</literal>, o teste irá ser case insensitive.</para>
    <example id="appendixes.assertions.assertContains.example2">
      <title>Utilização de assertContains()</title>
      <programlisting><![CDATA[<?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertContains('baz', 'foobar');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ContainsTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) ContainsTest::testFailure
Failed asserting that 'foobar' contains "baz".

/home/sb/ContainsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>

    <example id="appendixes.assertions.assertContains.example3">
      <title>Utilização de assertContains() com $ignoreCase</title>
      <programlisting><![CDATA[<?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertContains('foo', 'FooBar');
    }

    public function testOK()
    {
        self::assertContains('foo', 'FooBar', '', true);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ContainsTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F.

Time: 0 seconds, Memory: 2.75Mb

There was 1 failure:

1) ContainsTest::testFailure
Failed asserting that 'FooBar' contains "foo".

/home/sb/ContainsTest.php:6

FAILURES!
Tests: 2, Assertions: 2, Failures: 1.]]></screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertContainsOnly">
    <title>assertContainsOnly()</title>
    <indexterm><primary>assertContainsOnly()</primary></indexterm>
    <indexterm><primary>assertNotContainsOnly()</primary></indexterm>
    <indexterm><primary>assertAttributeContainsOnly()</primary></indexterm>
    <indexterm><primary>assertAttributeNotContainsOnly()</primary></indexterm>
    <para><literal>assertContainsOnly(string $type, Iterator|array $haystack[, boolean $isNativeType = NULL, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o <literal>$haystack</literal> não contém somente variáveis do tipo <literal>$type</literal>.</para>
    <para><literal>$isNativeType</literal> é uma flag usada para indicar se <literal>$type</literal> é um tipo nativo do PHP ou não.</para>
    <para><literal>assertNotContainsOnly()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <para><literal>assertAttributeContainsOnly()</literal> e <literal>assertAttributeNotContainsOnly()</literal> são invólucros convenientes que usam um atributo <literal>public</literal>, <literal>protected</literal>, ou <literal>private</literal> de uma classe ou objeto como a haystack.</para>
    <example id="appendixes.assertions.assertContainsOnly.example">
      <title>Utilização de assertContainsOnly()</title>
      <programlisting><![CDATA[<?php
class ContainsOnlyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertContainsOnly('string', array('1', '2', 3));
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ContainsOnlyTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) ContainsOnlyTest::testFailure
Failed asserting that Array (
    0 => '1'
    1 => '2'
    2 => 3
) contains only values of type "string".

/home/sb/ContainsOnlyTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
  </section>
  <section id="appendixes.assertions.assertContainsOnlyInstancesOf">
    <title>assertContainsOnlyInstancesOf()</title>
    <indexterm><primary>assertContainsOnlyInstancesOf()</primary></indexterm>
    <para><literal>assertContainsOnlyInstancesOf(string $classname, Traversable|array $haystack[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o <literal>$haystack</literal> não contém somente instâncias da classe <literal>$classname</literal>.</para>
    <example id="appendixes.assertions.assertContainsOnlyInstancesOf.example">
      <title>Utilização de assertContainsOnlyInstancesOf()</title>
      <programlisting><![CDATA[<?php
class ContainsOnlyInstancesOfTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertContainsOnlyInstancesOf('Foo', array(new Foo(), new Bar(), new Foo()));
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ContainsOnlyInstancesOfTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) ContainsOnlyInstancesOfTest::testFailure
Failed asserting that Array ([0]=> Bar Object(...)) is an instance of class "Foo".

/home/sb/ContainsOnlyInstancesOfTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
  </section>
  <section id="appendixes.assertions.assertCount">
    <title>assertCount()</title>
    <indexterm><primary>assertCount()</primary></indexterm>
    <indexterm><primary>assertNotCount()</primary></indexterm>
    <para><literal>assertCount($expectedCount, $haystack[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o número de elementos no <literal>$haystack</literal> não for o <literal>$expectedCount</literal>.</para>
    <para><literal>assertNotCount()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertCount.example">
      <title>Utilização de assertCount()</title>
      <programlisting><![CDATA[<?php
class CountTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertCount(0, array('foo'));
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit CountTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) CountTest::testFailure
Failed asserting that actual size 1 matches expected size 0.

/home/sb/CountTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertEmpty">
    <title>assertEmpty()</title>
    <indexterm><primary>assertEmpty()</primary></indexterm>
    <indexterm><primary>assertNotEmpty()</primary></indexterm>
    <indexterm><primary>assertAttributeEmpty()</primary></indexterm>
    <indexterm><primary>assertAttributeNotEmpty()</primary></indexterm>
    <para><literal>assertEmpty(mixed $actual[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o <literal>$actual</literal> não está vazio.</para>
    <para><literal>assertNotEmpty()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <para><literal>assertAttributeEmpty()</literal> e <literal>assertAttributeNotEmpty()</literal> são invólucros convenientes que podem ser aplicados para um atributo <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal> de uma classe ou objeto.</para>
    <example id="appendixes.assertions.assertEmpty.example">
      <title>Utilização de assertEmpty()</title>
      <programlisting><![CDATA[<?php
class EmptyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertEmpty(array('foo'));
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit EmptyTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) EmptyTest::testFailure
Failed asserting that an array is empty.

/home/sb/EmptyTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertEqualXMLStructure">
    <title>assertEqualXMLStructure()</title>
    <indexterm><primary>assertEqualXMLStructure()</primary></indexterm>
    <para><literal>assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement[, boolean $checkAttributes = FALSE, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se a estrutura XML do DOMElement no <literal>$actualElement</literal> não é igual a estrutura XML do DOMElement no <literal>$expectedElement</literal>.</para>
    <example id="appendixes.assertions.assertEqualXMLStructure.example">
      <title>Utilização de assertEqualXMLStructure()</title>
      <programlisting><![CDATA[<?php
class EqualXMLStructureTest extends PHPUnit_Framework_TestCase
{
    public function testFailureWithDifferentNodeNames()
    {
        $expected = new DOMElement('foo');
        $actual = new DOMElement('bar');

        self::assertEqualXMLStructure($expected, $actual);
    }

    public function testFailureWithDifferentNodeAttributes()
    {
        $expected = new DOMDocument;
        $expected->loadXML('<foo bar="true" />');

        $actual = new DOMDocument;
        $actual->loadXML('<foo/>');

        self::assertEqualXMLStructure(
          $expected->firstChild, $actual->firstChild, TRUE
        );
    }

    public function testFailureWithDifferentChildrenCount()
    {
        $expected = new DOMDocument;
        $expected->loadXML('<foo><bar/><bar/><bar/></foo>');

        $actual = new DOMDocument;
        $actual->loadXML('<foo><bar/></foo>');

        self::assertEqualXMLStructure(
          $expected->firstChild, $actual->firstChild
        );
    }

    public function testFailureWithDifferentChildren()
    {
        $expected = new DOMDocument;
        $expected->loadXML('<foo><bar/><bar/><bar/></foo>');

        $actual = new DOMDocument;
        $actual->loadXML('<foo><baz/><baz/><baz/></foo>');

        self::assertEqualXMLStructure(
          $expected->firstChild, $actual->firstChild
        );
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit EqualXMLStructureTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

FFFF

Time: 0 seconds, Memory: 5.75Mb

There were 4 failures:

1) EqualXMLStructureTest::testFailureWithDifferentNodeNames
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'foo'
+'bar'

/home/sb/EqualXMLStructureTest.php:9

2) EqualXMLStructureTest::testFailureWithDifferentNodeAttributes
Number of attributes on node "foo" does not match
Failed asserting that 0 matches expected 1.

/home/sb/EqualXMLStructureTest.php:22

3) EqualXMLStructureTest::testFailureWithDifferentChildrenCount
Number of child nodes of "foo" differs
Failed asserting that 1 matches expected 3.

/home/sb/EqualXMLStructureTest.php:35

4) EqualXMLStructureTest::testFailureWithDifferentChildren
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'bar'
+'baz'

/home/sb/EqualXMLStructureTest.php:48

FAILURES!
Tests: 4, Assertions: 8, Failures: 4.]]></screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertEquals">
    <title>assertEquals()</title>
    <indexterm><primary>assertEquals()</primary></indexterm>
    <indexterm><primary>assertNotEquals()</primary></indexterm>
    <indexterm><primary>assertAttributeEquals()</primary></indexterm>
    <indexterm><primary>assertAttributeNotEquals()</primary></indexterm>
    <para><literal>assertEquals(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se as variáveis <literal>$expected</literal> e <literal>$actual</literal> são iguais.</para>
    <para><literal>assertNotEquals()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <para><literal>assertAttributeEquals()</literal> e <literal>assertAttributeNotEquals()</literal> são invólucros convenientes que usam um atributo <literal>public</literal>, <literal>protected</literal>, or <literal>private</literal> de uma classe ou objeto como o valor atual.</para>
    <example id="appendixes.assertions.assertEquals.example">
      <title>Utilização de assertEquals()</title>
      <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertEquals(1, 0);
    }

    public function testFailure2()
    {
        self::assertEquals('bar', 'baz');
    }

    public function testFailure3()
    {
        self::assertEquals("foo\nbar\nbaz\n", "foo\nbah\nbaz\n");
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit EqualsTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

FFF

Time: 0 seconds, Memory: 5.25Mb

There were 3 failures:

1) EqualsTest::testFailure
Failed asserting that 0 matches expected 1.

/home/sb/EqualsTest.php:6

2) EqualsTest::testFailure2
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'bar'
+'baz'

/home/sb/EqualsTest.php:11

3) EqualsTest::testFailure3
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
 'foo
-bar
+bah
 baz
 '

/home/sb/EqualsTest.php:16

FAILURES!
Tests: 3, Assertions: 3, Failures: 3.</screen>
    </example>

    <para>Comparações mais especializadas são usadas para especificar tipos de argumentos para <literal>$expected</literal> e <literal>$actual</literal>, veja abaixo.</para>

    <para><literal>assertEquals(float $expected, float $actual[, string $message = '', float $delta = 0])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se os dois floats <literal>$expected</literal> e <literal>$actual</literal> não estão dentro de <literal>$delta</literal> um do outro.</para>
    <para>Por favor, leia "<ulink url="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html">O que cada cientista de computador deve saber sobre Aritmética de Ponto Flutuante</ulink>" para entender por que <literal>$delta</literal> é necessário.</para>
    <example id="appendixes.assertions.assertEquals.example2">
      <title>Utilização de assertEquals() with floats</title>
      <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testSuccess()
    {
        self::assertEquals(1.0, 1.1, '', 0.2);
    }

    public function testFailure()
    {
        self::assertEquals(1.0, 1.1);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit EqualsTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

.F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that 1.1 matches expected 1.0.

/home/sb/EqualsTest.php:11

FAILURES!
Tests: 2, Assertions: 2, Failures: 1.</screen>
    </example>

    <para><literal>assertEquals(DOMDocument $expected, DOMDocument $actual[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se a forma canonical não-comentada dos documentos XML representada pelos objetos DOMDocument <literal>$expected</literal> e <literal>$actual</literal> não são iguais.</para>
    <example id="appendixes.assertions.assertEquals.example3">
      <title>Utilização de assertEquals() com objetos DOMDocument</title>
      <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $expected = new DOMDocument;
        $expected->loadXML('<foo><bar/></foo>');

        $actual = new DOMDocument;
        $actual->loadXML('<bar><foo/></bar>');

        self::assertEquals($expected, $actual);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit EqualsTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that two DOM documents are equal.
--- Expected
+++ Actual
@@ @@
 <?xml version="1.0"?>
-<foo>
-  <bar/>
-</foo>
+<bar>
+  <foo/>
+</bar>

/home/sb/EqualsTest.php:12

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>

    <para><literal>assertEquals(object $expected, object $actual[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se os objetos <literal>$expected</literal> e <literal>$actual</literal> não tem valores de atributos iguais.</para>
    <example id="appendixes.assertions.assertEquals.example4">
      <title>Utilização de assertEquals() com objetos</title>
      <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $expected = new stdClass;
        $expected->foo = 'foo';
        $expected->bar = 'bar';

        $actual = new stdClass;
        $actual->foo = 'bar';
        $actual->baz = 'bar';

        self::assertEquals($expected, $actual);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit EqualsTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that two objects are equal.
--- Expected
+++ Actual
@@ @@
 stdClass Object (
-    'foo' => 'foo'
-    'bar' => 'bar'
+    'foo' => 'bar'
+    'baz' => 'bar'
 )

/home/sb/EqualsTest.php:14

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>

    <para><literal>assertEquals(array $expected, array $actual[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se os arrays <literal>$expected</literal> e <literal>$actual</literal> não são iguais.</para>

    <example id="appendixes.assertions.assertEquals.example5">
      <title>Utilização de assertEquals() com arrays</title>
      <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertEquals(array('a', 'b', 'c'), array('a', 'c', 'd'));
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit EqualsTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
 Array (
     0 => 'a'
-    1 => 'b'
-    2 => 'c'
+    1 => 'c'
+    2 => 'd'
 )

/home/sb/EqualsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertFalse">
    <title>assertFalse()</title>
    <indexterm><primary>assertFalse()</primary></indexterm>
    <para><literal>assertFalse(bool $condition[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o <literal>$condition</literal> é <literal>TRUE</literal>.</para>
    <para><literal>assertNotFalse()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertFalse.example">
      <title>Utilização de assertFalse()</title>
      <programlisting><![CDATA[<?php
class FalseTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertFalse(TRUE);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit FalseTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) FalseTest::testFailure
Failed asserting that true is false.

/home/sb/FalseTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertFileEquals">
    <title>assertFileEquals()</title>
    <indexterm><primary>assertFileEquals()</primary></indexterm>
    <indexterm><primary>assertFileNotEquals()</primary></indexterm>
    <para><literal>assertFileEquals(string $expected, string $actual[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o arquivo especificado pelo  <literal>$expected</literal> não tem o mesmo conteúdo como o arquivo especificado pelo <literal>$actual</literal>.</para>
    <para><literal>assertFileNotEquals()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertFileEquals.example">
      <title>Utilização de assertFileEquals()</title>
      <programlisting><![CDATA[<?php
class FileEqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertFileEquals('/home/sb/expected', '/home/sb/actual');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit FileEqualsTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) FileEqualsTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'expected
+'actual
 '

/home/sb/FileEqualsTest.php:6

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.</screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertFileExists">
    <title>assertFileExists()</title>
    <indexterm><primary>assertFileExists()</primary></indexterm>
    <indexterm><primary>assertFileNotExists()</primary></indexterm>
    <para><literal>assertFileExists(string $filename[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o arquivo especificado pelo <literal>$filename</literal> não existir.</para>
    <para><literal>assertFileNotExists()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertFileExists.example">
      <title>Utilização de assertFileExists()</title>
      <programlisting><![CDATA[<?php
class FileExistsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertFileExists('/path/to/file');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit FileExistsTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) FileExistsTest::testFailure
Failed asserting that file "/path/to/file" exists.

/home/sb/FileExistsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertGreaterThan">
    <title>assertGreaterThan()</title>
    <indexterm><primary>assertGreaterThan()</primary></indexterm>
    <indexterm><primary>assertAttributeGreaterThan()</primary></indexterm>
    <para><literal>assertGreaterThan(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o valor de <literal>$actual</literal> não é maior que o valor de <literal>$expected</literal>.</para>
    <para><literal>assertAttributeGreaterThan()</literal> é um invólucro conveniente que usa um atributo <literal>public</literal>, <literal>protected</literal>, ou <literal>private</literal> de uma classe ou objeto como o valor atual.</para>
    <example id="appendixes.assertions.assertGreaterThan.example">
      <title>Utilização de assertGreaterThan()</title>
      <programlisting><![CDATA[<?php
class GreaterThanTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertGreaterThan(2, 1);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit GreaterThanTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) GreaterThanTest::testFailure
Failed asserting that 1 is greater than 2.

/home/sb/GreaterThanTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertGreaterThanOrEqual">
    <title>assertGreaterThanOrEqual()</title>
    <indexterm><primary>assertGreaterThanOrEqual()</primary></indexterm>
    <indexterm><primary>assertAttributeGreaterThanOrEqual()</primary></indexterm>
    <para><literal>assertGreaterThanOrEqual(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o valor de <literal>$actual</literal> não é maior que ou igual ao valor de <literal>$expected</literal>.</para>
    <para><literal>assertAttributeGreaterThanOrEqual()</literal> é um invólucro conveniente que usa um atributo <literal>public</literal>, <literal>protected</literal>, ou <literal>private</literal> de uma classe ou objeto como o valor atual.</para>
    <example id="appendixes.assertions.assertGreaterThanOrEqual.example">
      <title>Utilização de assertGreaterThanOrEqual()</title>
      <programlisting><![CDATA[<?php
class GreatThanOrEqualTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertGreaterThanOrEqual(2, 1);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit GreaterThanOrEqualTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) GreatThanOrEqualTest::testFailure
Failed asserting that 1 is equal to 2 or is greater than 2.

/home/sb/GreaterThanOrEqualTest.php:6

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.</screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertInstanceOf">
    <title>assertInstanceOf()</title>
    <indexterm><primary>assertInstanceOf()</primary></indexterm>
    <indexterm><primary>assertNotInstanceOf()</primary></indexterm>
    <indexterm><primary>assertAttributeInstanceOf()</primary></indexterm>
    <indexterm><primary>assertAttributeNotInstanceOf()</primary></indexterm>
    <para><literal>assertInstanceOf($expected, $actual[, $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o <literal>$actual</literal> não é uma instância de <literal>$expected</literal>.</para>
    <para><literal>assertNotInstanceOf()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <para><literal>assertAttributeInstanceOf()</literal> e <literal>assertAttributeNotInstanceOf()</literal> são invólucros convenientes que podem ser aplicados a um atributo <literal>public</literal>, <literal>protected</literal>, ou <literal>private</literal> de uma classe ou objeto.</para>
    <example id="appendixes.assertions.assertInstanceOf.example">
      <title>Utilização de assertInstanceOf()</title>
      <programlisting><![CDATA[<?php
class InstanceOfTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertInstanceOf('RuntimeException', new Exception);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit InstanceOfTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) InstanceOfTest::testFailure
Failed asserting that Exception Object (...) is an instance of class "RuntimeException".

/home/sb/InstanceOfTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertInternalType">
    <title>assertInternalType()</title>
    <indexterm><primary>assertInternalType()</primary></indexterm>
    <indexterm><primary>assertNotInternalType()</primary></indexterm>
    <indexterm><primary>assertAttributeInternalType()</primary></indexterm>
    <indexterm><primary>assertAttributeNotInternalType()</primary></indexterm>
    <para><literal>assertInternalType($expected, $actual[, $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o <literal>$actual</literal> não é do tipo <literal>$expected</literal>.</para>
    <para><literal>assertNotInternalType()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <para><literal>assertAttributeInternalType()</literal> e <literal>assertAttributeNotInternalType()</literal> são invólucros convenientes que podem aplicados a um atributo <literal>public</literal>, <literal>protected</literal>, ou <literal>private</literal> de uma classe ou objeto.</para>
    <example id="appendixes.assertions.assertInternalType.example">
      <title>Utilização de assertInternalType()</title>
      <programlisting><![CDATA[<?php
class InternalTypeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertInternalType('string', 42);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit InternalTypeTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) InternalTypeTest::testFailure
Failed asserting that 42 is of type "string".

/home/sb/InternalTypeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertJsonFileEqualsJsonFile">
    <title>assertJsonFileEqualsJsonFile()</title>
    <indexterm><primary>assertJsonFileEqualsJsonFile()</primary></indexterm>
    <indexterm><primary>assertJsonFileNotEqualsJsonFile()</primary></indexterm>
    <para><literal>assertJsonFileEqualsJsonFile(mixed $expectedFile, mixed $actualFile[, string $message = ''])</literal></para>
    <para>
      Reporta um erro identificado pela <literal>$message</literal> se o valor de <literal>$actualFile</literal> não combina com o valor de
      <literal>$expectedFile</literal>.
    </para>
    <example id="appendixes.assertions.assertJsonFileEqualsJsonFile.example">
      <title>Utilização de assertJsonFileEqualsJsonFile()</title>
      <programlisting><![CDATA[<?php
class JsonFileEqualsJsonFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertJsonFileEqualsJsonFile(
          'path/to/fixture/file', 'path/to/actual/file');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit JsonFileEqualsJsonFileTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) JsonFileEqualsJsonFile::testFailure
Failed asserting that '{"Mascott":"Tux"}' matches JSON string "["Mascott", "Tux", "OS", "Linux"]".

/home/sb/JsonFileEqualsJsonFileTest.php:5

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.</screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertJsonStringEqualsJsonFile">
    <title>assertJsonStringEqualsJsonFile()</title>
    <indexterm><primary>assertJsonStringEqualsJsonFile()</primary></indexterm>
    <indexterm><primary>assertJsonStringNotEqualsJsonFile()</primary></indexterm>
    <para><literal>assertJsonStringEqualsJsonFile(mixed $expectedFile, mixed $actualJson[, string $message = ''])</literal></para>
    <para>
      Reporta um erro identificado pela <literal>$message</literal> se o valor de <literal>$actualJson</literal> não combina com o valor de
      <literal>$expectedFile</literal>.
    </para>
    <example id="appendixes.assertions.assertJsonStringEqualsJsonFile.example">
      <title>Utilização de assertJsonStringEqualsJsonFile()</title>
      <programlisting><![CDATA[<?php
class JsonStringEqualsJsonFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertJsonStringEqualsJsonFile(
          'path/to/fixture/file', json_encode(array("Mascott" => "ux"))
        );
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit JsonStringEqualsJsonFileTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) JsonStringEqualsJsonFile::testFailure
Failed asserting that '{"Mascott":"ux"}' matches JSON string "{"Mascott":"Tux"}".

/home/sb/JsonStringEqualsJsonFileTest.php:5

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.</screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertJsonStringEqualsJsonString">
    <title>assertJsonStringEqualsJsonString()</title>
    <indexterm><primary>assertJsonStringEqualsJsonString()</primary></indexterm>
    <indexterm><primary>assertJsonStringNotEqualsJsonString()</primary></indexterm>
    <para><literal>assertJsonStringEqualsJsonString(mixed $expectedJson, mixed $actualJson[, string $message = ''])</literal></para>
    <para>
      Reporta um erro identificado pela <literal>$message</literal> se o valor de <literal>$actualJson</literal> não combina com o valor de
      <literal>$expectedJson</literal>.
    </para>
    <example id="appendixes.assertions.assertJsonStringEqualsJsonString.example">
      <title>Utilização de assertJsonStringEqualsJsonString()</title>
      <programlisting><![CDATA[<?php
class JsonStringEqualsJsonStringTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertJsonStringEqualsJsonString(
          json_encode(array("Mascott" => "Tux")), json_encode(array("Mascott" => "ux"))
        );
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit JsonStringEqualsJsonStringTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) JsonStringEqualsJsonStringTest::testFailure
Failed asserting that two objects are equal.
--- Expected
+++ Actual
@@ @@
 stdClass Object (
 -    'Mascott' => 'Tux'
 +    'Mascott' => 'ux'
)

/home/sb/JsonStringEqualsJsonStringTest.php:5

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.</screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertLessThan">
    <title>assertLessThan()</title>
    <indexterm><primary>assertLessThan()</primary></indexterm>
    <indexterm><primary>assertAttributeLessThan()</primary></indexterm>
    <para><literal>assertLessThan(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o valor de <literal>$actual</literal> não é menor que o valor de <literal>$expected</literal>.</para>
    <para><literal>assertAttributeLessThan()</literal> é um invólucro conveniente que usa um atributo <literal>public</literal>, <literal>protected</literal>, ou <literal>private</literal> de uma classe ou objeto como o valor atual.</para>
    <example id="appendixes.assertions.assertLessThan.example">
      <title>Utilização de assertLessThan()</title>
      <programlisting><![CDATA[<?php
class LessThanTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertLessThan(1, 2);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit LessThanTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) LessThanTest::testFailure
Failed asserting that 2 is less than 1.

/home/sb/LessThanTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertLessThanOrEqual">
    <title>assertLessThanOrEqual()</title>
    <indexterm><primary>assertLessThanOrEqual()</primary></indexterm>
    <indexterm><primary>assertAttributeLessThanOrEqual()</primary></indexterm>
    <para><literal>assertLessThanOrEqual(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o valor de <literal>$actual</literal> não é menor que ou igual ao valor de <literal>$expected</literal>.</para>
    <para><literal>assertAttributeLessThanOrEqual()</literal> é um invólucro conveniente que usa um atributo <literal>public</literal>, <literal>protected</literal>, ou <literal>private</literal> de uma classe ou objeto como o valor atual.</para>
    <example id="appendixes.assertions.assertLessThanOrEqual.example">
      <title>Utilização de assertLessThanOrEqual()</title>
      <programlisting><![CDATA[<?php
class LessThanOrEqualTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertLessThanOrEqual(1, 2);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit LessThanOrEqualTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) LessThanOrEqualTest::testFailure
Failed asserting that 2 is equal to 1 or is less than 1.

/home/sb/LessThanOrEqualTest.php:6

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.</screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertNull">
    <title>assertNull()</title>
    <indexterm><primary>assertNull()</primary></indexterm>
    <indexterm><primary>assertNotNull()</primary></indexterm>
    <para><literal>assertNull(mixed $variable[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o <literal>$variable</literal> não é <literal>NULL</literal>.</para>
    <para><literal>assertNotNull()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertNull.example">
      <title>Utilização de assertNull()</title>
      <programlisting><![CDATA[<?php
class NullTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertNull('foo');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit NotNullTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) NullTest::testFailure
Failed asserting that 'foo' is null.

/home/sb/NotNullTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertObjectHasAttribute">
    <title>assertObjectHasAttribute()</title>
    <indexterm><primary>assertObjectHasAttribute()</primary></indexterm>
    <indexterm><primary>assertObjectNotHasAttribute()</primary></indexterm>
    <para><literal>assertObjectHasAttribute(string $attributeName, object $object[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o <literal>$object-&gt;attributeName</literal> não existir.</para>
    <para><literal>assertObjectNotHasAttribute()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertObjectHasAttribute.example">
      <title>Utilização de assertObjectHasAttribute()</title>
      <programlisting><![CDATA[<?php
class ObjectHasAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertObjectHasAttribute('foo', new stdClass);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ObjectHasAttributeTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) ObjectHasAttributeTest::testFailure
Failed asserting that object of class "stdClass" has attribute "foo".

/home/sb/ObjectHasAttributeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertRegExp">
    <title>assertRegExp()</title>
    <indexterm><primary>assertRegExp()</primary></indexterm>
    <indexterm><primary>assertNotRegExp()</primary></indexterm>
    <para><literal>assertRegExp(string $pattern, string $string[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se a <literal>$string</literal> não combina com a expressão regular <literal>$pattern</literal>.</para>
    <para><literal>assertNotRegExp()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertRegExp.example">
      <title>Utilização de assertRegExp()</title>
      <programlisting><![CDATA[<?php
class RegExpTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertRegExp('/foo/', 'bar');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit RegExpTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) RegExpTest::testFailure
Failed asserting that 'bar' matches PCRE pattern "/foo/".

/home/sb/RegExpTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertStringMatchesFormat">
    <title>assertStringMatchesFormat()</title>
    <indexterm><primary>assertStringMatchesFormat()</primary></indexterm>
    <indexterm><primary>assertStringNotMatchesFormat()</primary></indexterm>
    <para><literal>assertStringMatchesFormat(string $format, string $string[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se a <literal>$string</literal> não combina com a string <literal>$format</literal>.</para>
    <para><literal>assertStringNotMatchesFormat()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertStringMatchesFormat.example">
      <title>Utilização de assertStringMatchesFormat()</title>
      <programlisting><![CDATA[<?php
class StringMatchesFormatTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertStringMatchesFormat('%i', 'foo');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit StringMatchesFormatTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) StringMatchesFormatTest::testFailure
Failed asserting that 'foo' matches PCRE pattern "/^[+-]?\d+$/s".

/home/sb/StringMatchesFormatTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
    <para>A string de formato pode conter os seguintes substitutos (placeholders):</para>
    <itemizedlist>
      <listitem><para><literal>%e</literal>: Representa um separador de diretório, por exemplo <literal>/</literal> no Linux. </para></listitem>
      <listitem><para><literal>%s</literal>: Um ou mais de qualquer coisa (caractere ou espaço em branco) exceto o caractere de fim de linha.</para></listitem>
      <listitem><para><literal>%S</literal>: Zero ou mais de qualquer coisa (caractere ou espaço em branco) exceto o caractere de fim de linha.</para></listitem>
      <listitem><para><literal>%a</literal>: Um ou mais de qualquer coisa (caractere ou espaço em branco) incluindo o caractere de fim de linha.</para></listitem>
      <listitem><para><literal>%A</literal>: Zero ou mais de qualquer coisa (caractere ou espaço em branco) incluindo o caractere de fim de linha.</para></listitem>
      <listitem><para><literal>%w</literal>: Zero ou mais caracteres de espaços em branco.</para></listitem>
      <listitem><para><literal>%i</literal>: Um valor inteiro assinado, por exemplo <literal>+3142</literal>, <literal>-3142</literal>.</para></listitem>
      <listitem><para><literal>%d</literal>: Um valor inteiro não-assinado, por exemplo <literal>123456</literal>.</para></listitem>
      <listitem><para><literal>%x</literal>: Um ou mais caracteres hexadecimais. Isto é, caracteres na classe <literal>0-9</literal>, <literal>a-f</literal>, <literal>A-F</literal>.</para></listitem>
      <listitem><para><literal>%f</literal>: Um número de ponto flutuante, por exemplo: <literal>3.142</literal>, <literal>-3.142</literal>, <literal>3.142E-10</literal>, <literal>3.142e+10</literal>.</para></listitem>
      <listitem><para><literal>%c</literal>: Um único caractere de qualquer ordem.</para></listitem>
    </itemizedlist>
  </section>

  <section id="appendixes.assertions.assertStringMatchesFormatFile">
    <title>assertStringMatchesFormatFile()</title>
    <indexterm><primary>assertStringMatchesFormatFile()</primary></indexterm>
    <indexterm><primary>assertStringNotMatchesFormatFile()</primary></indexterm>
    <para><literal>assertStringMatchesFormatFile(string $formatFile, string $string[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se a <literal>$string</literal> não combina com o conteúdo do <literal>$formatFile</literal>.</para>
    <para><literal>assertStringNotMatchesFormatFile()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertStringMatchesFormatFile.example">
      <title>Utilização de assertStringMatchesFormatFile()</title>
      <programlisting><![CDATA[<?php
class StringMatchesFormatFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertStringMatchesFormatFile('/path/to/expected.txt', 'foo');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit StringMatchesFormatFileTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) StringMatchesFormatFileTest::testFailure
Failed asserting that 'foo' matches PCRE pattern "/^[+-]?\d+
$/s".

/home/sb/StringMatchesFormatFileTest.php:6

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.]]></screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertSame">
    <title>assertSame()</title>
    <indexterm><primary>assertSame()</primary></indexterm>
    <indexterm><primary>assertNotSame()</primary></indexterm>
    <indexterm><primary>assertAttributeSame()</primary></indexterm>
    <indexterm><primary>assertAttributeNotSame()</primary></indexterm>
    <para><literal>assertSame(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se as variáveis <literal>$expected</literal> e <literal>$actual</literal> não tem o mesmo tipo e valor.</para>
    <para><literal>assertNotSame()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <para><literal>assertAttributeSame()</literal> e <literal>assertAttributeNotSame()</literal> são invólucros convenientes que usam um atributo <literal>public</literal>, <literal>protected</literal>, ou <literal>private</literal> de uma classe ou objeto como o valor atual.</para>
    <example id="appendixes.assertions.assertSame.example">
      <title>Utilização de assertSame()</title>
      <programlisting><![CDATA[<?php
class SameTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertSame('2204', 2204);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit SameTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) SameTest::testFailure
Failed asserting that 2204 is identical to '2204'.

/home/sb/SameTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>

    <para><literal>assertSame(object $expected, object $actual[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se as variáveis <literal>$expected</literal> e <literal>$actual</literal> não referenciam o mesmo objeto.</para>

    <example id="appendixes.assertions.assertSame.example2">
      <title>Utilização de assertSame() com objetos</title>
      <programlisting><![CDATA[<?php
class SameTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertSame(new stdClass, new stdClass);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit SameTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) SameTest::testFailure
Failed asserting that two variables reference the same object.

/home/sb/SameTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertStringEndsWith">
    <title>assertStringEndsWith()</title>
    <indexterm><primary>assertStringEndsWith()</primary></indexterm>
    <indexterm><primary>assertStringEndsNotWith()</primary></indexterm>
    <para><literal>assertStringEndsWith(string $suffix, string $string[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se a <literal>$string</literal> não termina com <literal>$suffix</literal>.</para>
    <para><literal>assertStringEndsNotWith()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertStringEndsWith.example">
      <title>Utilização de assertStringEndsWith()</title>
      <programlisting><![CDATA[<?php
class StringEndsWithTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertStringEndsWith('suffix', 'foo');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit StringEndsWithTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 1 second, Memory: 5.00Mb

There was 1 failure:

1) StringEndsWithTest::testFailure
Failed asserting that 'foo' ends with "suffix".

/home/sb/StringEndsWithTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertStringEqualsFile">
    <title>assertStringEqualsFile()</title>
    <indexterm><primary>assertStringEqualsFile()</primary></indexterm>
    <indexterm><primary>assertStringNotEqualsFile()</primary></indexterm>
    <para><literal>assertStringEqualsFile(string $expectedFile, string $actualString[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o arquivo especificado por <literal>$expectedFile</literal> não tem <literal>$actualString</literal> com seu conteúdo.</para>
    <para><literal>assertStringNotEqualsFile()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertStringEqualsFile.example">
      <title>Utilização de assertStringEqualsFile()</title>
      <programlisting><![CDATA[<?php
class StringEqualsFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertStringEqualsFile('/home/sb/expected', 'actual');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit StringEqualsFileTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) StringEqualsFileTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'expected
-'
+'actual'

/home/sb/StringEqualsFileTest.php:6

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.</screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertStringStartsWith">
    <title>assertStringStartsWith()</title>
    <indexterm><primary>assertStringStartsWith()</primary></indexterm>
    <indexterm><primary>assertStringStartsNotWith()</primary></indexterm>
    <para><literal>assertStringStartsWith(string $prefix, string $string[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se a <literal>$string</literal> não inicia com <literal>$prefix</literal>.</para>
    <para><literal>assertStringStartsNotWith()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertStringStartsWith.example">
      <title>Utilização de assertStringStartsWith()</title>
      <programlisting><![CDATA[<?php
class StringStartsWithTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertStringStartsWith('prefix', 'foo');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit StringStartsWithTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) StringStartsWithTest::testFailure
Failed asserting that 'foo' starts with "prefix".

/home/sb/StringStartsWithTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertThat">
    <title>assertThat()</title>
    <indexterm><primary>assertThat()</primary></indexterm>

    <para>
      Asserções mais complexas podem ser formuladas usando as
      classes <literal>PHPUnit_Framework_Constraint</literal>. Elas podem ser
      avaliadas usando o método <literal>assertThat()</literal>.
      <xref linkend="appendixes.assertions.assertThat.example" /> mostra como as
      restrições <literal>logicalNot()</literal> e <literal>equalTo()</literal>
      podem ser usadas para expressar a mesma asserção como
      <literal>assertNotEquals()</literal>.
    </para>

    <para><literal>assertThat(mixed $value, PHPUnit_Framework_Constraint $constraint[, $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o<literal>$value</literal> não combina com a <literal>$constraint</literal>.</para>
    <example id="appendixes.assertions.assertThat.example">
      <title>Utilização de assertThat()</title>
      <programlisting><![CDATA[<?php
class BiscuitTest extends PHPUnit_Framework_TestCase
{
    public function testEquals()
    {
        $theBiscuit = new Biscuit('Ginger');
        $myBiscuit  = new Biscuit('Ginger');

        self::assertThat(
          $theBiscuit,
          $this->logicalNot(
            $this->equalTo($myBiscuit)
          )
        );
    }
}
?>]]></programlisting>
    </example>

    <para>
      <xref linkend="appendixes.assertions.assertThat.tables.constraints" /> mostra as
      classes <literal>PHPUnit_Framework_Constraint</literal> disponíveis.
    </para>

    <table id="appendixes.assertions.assertThat.tables.constraints">
      <title>Restrições</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Restrição</entry>
            <entry>Significado</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <indexterm><primary>attribute()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_Attribute attribute(PHPUnit_Framework_Constraint $constraint, $attributeName)</literal></entry>
            <entry>Restrição que aplica outra restrição a um atributo de uma classe ou objeto.</entry>
          </row>
          <row>
            <indexterm><primary>anything()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_IsAnything anything()</literal></entry>
            <entry>Restrição que aceita qualquer valor de entrada.</entry>
          </row>
          <row>
            <indexterm><primary>arrayHasKey()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_ArrayHasKey arrayHasKey(mixed $key)</literal></entry>
            <entry>Restrição que assevera que o array foi avaliado a ter uma chave fornecida.</entry>
          </row>
          <row>
            <indexterm><primary>contains()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_TraversableContains contains(mixed $value)</literal></entry>
            <entry>Restrição que assevera que o <literal>array</literal> ou objeto que implementa a interface <literal>Iterator</literal> foi avaliado para conter um valor fornecido.</entry>
          </row>
          <row>
            <indexterm><primary>containsOnly()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_TraversableContainsOnly containsOnly(string $type)</literal></entry>
            <entry>Restrição que assevera que o <literal>array</literal> ou objeto que implementa a interface <literal>Iterator</literal> foi avaliado para conter somente valores de um tipo fornecido.</entry>
          </row>
          <row>
            <indexterm><primary>containsOnlyInstancesOf()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_TraversableContainsOnly containsOnlyInstancesOf(string $classname)</literal></entry>
            <entry>Restrição que assevera que o <literal>array</literal> ou objeto que implementa a interface <literal>Iterator</literal> foi avaliado para conter somente instâncias de um nome de classe fornecido.</entry>
          </row>
          <row>
            <indexterm><primary>equalTo()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_IsEqual equalTo($value, $delta = 0, $maxDepth = 10)</literal></entry>
            <entry>Restrição que verificar se um valor é igual a outro.</entry>
          </row>
          <row>
            <indexterm><primary>attributeEqualTo()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_Attribute attributeEqualTo($attributeName, $value, $delta = 0, $maxDepth = 10)</literal></entry>
            <entry>Restrição que verificar se um valor é igual a um atributo de uma classe ou de um objeto.</entry>
          </row>
          <row>
            <indexterm><primary>fileExists()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_FileExists fileExists()</literal></entry>
            <entry>Restrição que verificar se o arquivo(nome) que foi avaliado existe.</entry>
          </row>
          <row>
            <indexterm><primary>greaterThan()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_GreaterThan greaterThan(mixed $value)</literal></entry>
            <entry>Restrição que assevera que o valor que foi avaliado é maior que um valor fornecido.</entry>
          </row>
          <row>
            <indexterm><primary>greaterThanOrEqual()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_Or greaterThanOrEqual(mixed $value)</literal></entry>
            <entry>Restrição que assevera que o valor que foi avaliado é maior ou igual a um valor fornecido.</entry>
          </row>
          <row>
            <indexterm><primary>classHasAttribute()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_ClassHasAttribute classHasAttribute(string $attributeName)</literal></entry>
            <entry>Restrição que assevera que a classe que foi avaliada tem um atributo fornecido.</entry>
          </row>
          <row>
            <indexterm><primary>classHasStaticAttribute()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_ClassHasStaticAttribute classHasStaticAttribute(string $attributeName)</literal></entry>
            <entry>Restrição que assevera que a classe que foi avaliada tem um atributo estático fornecido.</entry>
          </row>
          <row>
            <indexterm><primary>hasAttribute()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_ObjectHasAttribute hasAttribute(string $attributeName)</literal></entry>
            <entry>Restrição que assevera que o objeto que foi avaliado tem um atributo fornecido.</entry>
          </row>
          <row>
            <indexterm><primary>identicalTo()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_IsIdentical identicalTo(mixed $value)</literal></entry>
            <entry>Restrição que assevera que um valor é idêntico a outro.</entry>
          </row>
          <row>
            <indexterm><primary>isFalse()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_IsFalse isFalse()</literal></entry>
            <entry>Restrição que assevera que o valor que foi avaliado é <literal>FALSE</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>isInstanceOf()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_IsInstanceOf isInstanceOf(string $className)</literal></entry>
            <entry>Restrição que assevera que o objeto que foi avaliado é uma instância de uma classe fornecida.</entry>
          </row>
          <row>
            <indexterm><primary>isNull()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_IsNull isNull()</literal></entry>
            <entry>Restrição que assevera que o valor que foi avaliado é <literal>NULL</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>isTrue()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_IsTrue isTrue()</literal></entry>
            <entry>Restrição que assevera que o valor que foi avaliado é <literal>TRUE</literal>.</entry>
          </row>
          <row>
            <indexterm><primary>isType()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_IsType isType(string $type)</literal></entry>
            <entry>Restrição que assevera que o valor que foi avaliado é de um tipo especificado.</entry>
          </row>
          <row>
            <indexterm><primary>lessThan()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_LessThan lessThan(mixed $value)</literal></entry>
            <entry>Restrição que assevera que o valor que foi avaliado é menor que o valor fornecido.</entry>
          </row>
          <row>
            <indexterm><primary>lessThanOrEqual()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_Or lessThanOrEqual(mixed $value)</literal></entry>
            <entry>Restrição que assevera que o valor que foi avaliado é menor ou igual ao valor fornecido.</entry>
          </row>
          <row>
            <indexterm><primary>logicalAnd()</primary></indexterm>
            <entry><literal>logicalAnd()</literal></entry>
            <entry>Lógico AND.</entry>
          </row>
          <row>
            <indexterm><primary>logicalNot()</primary></indexterm>
            <entry><literal>logicalNot(PHPUnit_Framework_Constraint $constraint)</literal></entry>
            <entry>Lógico NOT.</entry>
          </row>
          <row>
            <indexterm><primary>logicalOr()</primary></indexterm>
            <entry><literal>logicalOr()</literal></entry>
            <entry>Lógico OR.</entry>
          </row>
          <row>
            <indexterm><primary>logicalXor()</primary></indexterm>
            <entry><literal>logicalXor()</literal></entry>
            <entry>Lógico XOR.</entry>
          </row>
          <row>
            <indexterm><primary>matchesRegularExpression()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_PCREMatch matchesRegularExpression(string $pattern)</literal></entry>
            <entry>Restrição que assevera que a string que foi avaliada combina com uma expressão regular.</entry>
          </row>
          <row>
            <indexterm><primary>stringContains()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_StringContains stringContains(string $string, bool $case)</literal></entry>
            <entry>Restrição que assevera que a string que foi avaliada contém uma string fornecida</entry>
          </row>
          <row>
            <indexterm><primary>stringEndsWith()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_StringEndsWith stringEndsWith(string $suffix)</literal></entry>
            <entry>Restrição que assevera que a string que foi avaliada termina com um sufixo fornecido.</entry>
          </row>
          <row>
            <indexterm><primary>stringStartsWith()</primary></indexterm>
            <entry><literal>PHPUnit_Framework_Constraint_StringStartsWith stringStartsWith(string $prefix)</literal></entry>
            <entry>Restrição que assevera que a string que foi avaliada começa com um prefixo fornecido.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="appendixes.assertions.assertTrue">
    <title>assertTrue()</title>
    <indexterm><primary>assertTrue()</primary></indexterm>
    <para><literal>assertTrue(bool $condition[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o <literal>$condition</literal> é <literal>FALSE</literal>.</para>
    <para><literal>assertNotTrue()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertTrue.example">
      <title>Utilização de assertTrue()</title>
      <programlisting><![CDATA[<?php
class TrueTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertTrue(FALSE);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit TrueTest</userinput>
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) TrueTest::testFailure
Failed asserting that false is true.

/home/sb/TrueTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertXmlFileEqualsXmlFile">
    <title>assertXmlFileEqualsXmlFile()</title>
    <indexterm><primary>assertXmlFileEqualsXmlFile()</primary></indexterm>
    <indexterm><primary>assertXmlFileNotEqualsXmlFile()</primary></indexterm>
    <para><literal>assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o documento XML em <literal>$actualFile</literal> não é igual ao documento XML em <literal>$expectedFile</literal>.</para>
    <para><literal>assertXmlFileNotEqualsXmlFile()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertXmlFileEqualsXmlFile.example">
      <title>Utilização de assertXmlFileEqualsXmlFile()</title>
      <programlisting><![CDATA[<?php
class XmlFileEqualsXmlFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertXmlFileEqualsXmlFile(
          '/home/sb/expected.xml', '/home/sb/actual.xml');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit XmlFileEqualsXmlFileTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) XmlFileEqualsXmlFileTest::testFailure
Failed asserting that two DOM documents are equal.
--- Expected
+++ Actual
@@ @@
 <?xml version="1.0"?>
 <foo>
-  <bar/>
+  <baz/>
 </foo>

/home/sb/XmlFileEqualsXmlFileTest.php:7

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.]]></screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertXmlStringEqualsXmlFile">
    <title>assertXmlStringEqualsXmlFile()</title>
    <indexterm><primary>assertXmlStringEqualsXmlFile()</primary></indexterm>
    <indexterm><primary>assertXmlStringNotEqualsXmlFile()</primary></indexterm>
    <para><literal>assertXmlStringEqualsXmlFile(string $expectedFile, string $actualXml[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o documento XML em <literal>$actualXml</literal> não é igual ao documento XML em <literal>$expectedFile</literal>.</para>
    <para><literal>assertXmlStringNotEqualsXmlFile()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertXmlStringEqualsXmlFile.example">
      <title>Utilização de assertXmlStringEqualsXmlFile()</title>
      <programlisting><![CDATA[<?php
class XmlStringEqualsXmlFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertXmlStringEqualsXmlFile(
          '/home/sb/expected.xml', '<foo><baz/></foo>');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit XmlStringEqualsXmlFileTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) XmlStringEqualsXmlFileTest::testFailure
Failed asserting that two DOM documents are equal.
--- Expected
+++ Actual
@@ @@
 <?xml version="1.0"?>
 <foo>
-  <bar/>
+  <baz/>
 </foo>

/home/sb/XmlStringEqualsXmlFileTest.php:7

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.]]></screen>
    </example>
  </section>

  <section id="appendixes.assertions.assertXmlStringEqualsXmlString">
    <title>assertXmlStringEqualsXmlString()</title>
    <indexterm><primary>assertXmlStringEqualsXmlString()</primary></indexterm>
    <indexterm><primary>assertXmlStringNotEqualsXmlString()</primary></indexterm>
    <para><literal>assertXmlStringEqualsXmlString(string $expectedXml, string $actualXml[, string $message = ''])</literal></para>
    <para>Reporta um erro identificado pela <literal>$message</literal> se o documento XML em <literal>$actualXml</literal> não é igual ao documento XML em <literal>$expectedXml</literal>.</para>
    <para><literal>assertXmlStringNotEqualsXmlString()</literal> é o inverso desta asserção e recebe os mesmos argumentos.</para>
    <example id="appendixes.assertions.assertXmlStringEqualsXmlString.example">
      <title>Utilização de assertXmlStringEqualsXmlString()</title>
      <programlisting><![CDATA[<?php
class XmlStringEqualsXmlStringTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        self::assertXmlStringEqualsXmlString(
          '<foo><bar/></foo>', '<foo><baz/></foo>');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit XmlStringEqualsXmlStringTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) XmlStringEqualsXmlStringTest::testFailure
Failed asserting that two DOM documents are equal.
--- Expected
+++ Actual
@@ @@
 <?xml version="1.0"?>
 <foo>
-  <bar/>
+  <baz/>
 </foo>

/home/sb/XmlStringEqualsXmlStringTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
  </section>
</appendix>

