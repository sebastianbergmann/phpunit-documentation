<?xml version="1.0" encoding="iso-8859-1" ?>

<chapter id="incomplete-and-skipped-tests">
  <title>Incomplete and Skipped Tests</title>

  <caution>
    <para>
      You are looking at the documentation for a version of PHPUnit that is no
      longer supported.
    </para>

    <para>
      The documentation for the current version of PHPUnit can be found
      <ulink url="../../current/en/index.html">here</ulink>.
    </para>
  </caution>

  <section id="incomplete-and-skipped-tests.incomplete-tests">
    <title>Incomplete Tests</title>

    <para>
      When you are working on a new test-case class, you might want to begin
      by writing empty test methods such as: <programlisting>public function testSomething()
{
}</programlisting> to keep track of the tests that you have to write. The
      problem with empty test methods is that they are interpreted as a
      success by the PHPUnit framework. This misinterpretation leads to the
      test reports being useless -- you cannot see whether a test is actually
      successful or just not yet implemented. Calling
      <literal>$this->fail()</literal> in the unimplemented test method
      does not help either, since then the test will be interpreted as a
      failure. This would be just as wrong as interpreting an unimplemented
      test as a success.
    </para>

    <para>
      <indexterm><primary>Incomplete Test</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_IncompleteTest</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_IncompleteTestError</primary></indexterm>

      If we think of a successful test as a green light and a test failure
      as a red light, we need an additional yellow light to mark a test
      as being incomplete or not yet implemented.
      <literal>PHPUnit_Framework_IncompleteTest</literal> is a marker
      interface for marking an exception that is raised by a test method as
      the result of the test being incomplete or currently not implemented.
      <literal>PHPUnit_Framework_IncompleteTestError</literal> is the
      standard implementation of this interface.
    </para>

    <para>
      <xref linkend="incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php" />
      shows a test-case class, <literal>SampleTest</literal>, that contains one test
      method, <literal>testSomething()</literal>. By calling the convenience
      method <literal>markTestIncomplete()</literal> (which automatically
      raises an <literal>PHPUnit_Framework_IncompleteTestError</literal>
      exception) in the test method, we mark the test as being incomplete.
    </para>

    <example id="incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php">
      <title>Marking a test as incomplete</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';

class SampleTest extends PHPUnit_Framework_TestCase
{
    public function testSomething()
    {
        // Optional: Test anything here, if you want.
        $this->assertTrue(TRUE, 'This should already work.');

        // Stop here and mark this test as incomplete.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
?>]]></programlisting>
    </example>

    <para>
      An incomplete test is denoted by an <literal>I</literal> in the output
      of the PHPUnit command-line test runner, as shown in the following
      example:
    </para>

    <screen><userinput>phpunit --verbose SampleTest</userinput>
PHPUnit 3.1.9 by Sebastian Bergmann.

SampleTest
I

Time: 0 seconds

There was 1 incomplete test:

1) testSomething(SampleTest)
This test has not been implemented yet.
/home/sb/SampleTest.php:14

OK, but incomplete or skipped tests!
Tests: 1, Incomplete: 1.</screen>

    <para>
      <xref linkend="incomplete-and-skipped-tests.incomplete-tests.tables.api" />
      shows the API for marking tests as incomplete.
    </para>

    <table id="incomplete-and-skipped-tests.incomplete-tests.tables.api">
      <title>API for Incomplete Tests</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void markTestIncomplete()</literal></entry>
            <entry>Marks the current test as incomplete.</entry>
          </row>
          <row>
            <entry><literal>void markTestIncomplete(string $message)</literal></entry>
            <entry>Marks the current test as incomplete using <literal>$message</literal> as an explanatory message.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="incomplete-and-skipped-tests.skipping-tests">
    <title>Skipping Tests</title>

    <para>
      Not all tests can be run in every environment. Consider, for instance,
      a database abstraction layer that has several drivers for the different
      database systems it supports. The tests for the MySQL driver can of
      course only be run if a MySQL server is available.
    </para>

    <para>
      <xref linkend="incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php" />
      shows a test-case class, <literal>DatabaseTest</literal>, that contains one test
      method, <literal>testConnection()</literal>. In the test-case class'
      <literal>setUp()</literal> template method we check whether the MySQLi
      extension is available and use the <literal>markTestSkipped()</literal>
      method to skip the test if it is not.
    </para>

    <example id="incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php">
      <title>Skipping a test</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';

class DatabaseTest extends PHPUnit_Framework_TestCase
{
    protected function setUp()
    {
        if (!extension_loaded('mysqli')) {
            $this->markTestSkipped(
              'The MySQLi extension is not available.'
            );
        }
    }

    public function testConnection()
    {
        // ...
    }
}
?>]]></programlisting>
    </example>

    <para>
      A test that has been skipped is denoted by an <literal>S</literal> in
      the output of the PHPUnit command-line test runner, as shown in the
      following example:
    </para>

    <screen><userinput>phpunit --verbose DatabaseTest</userinput>
PHPUnit 3.1.9 by Sebastian Bergmann.

DatabaseTest
S

Time: 0 seconds

There was 1 skipped test:

1) testConnection(DatabaseTest)
The MySQLi extension is not available.
/home/sb/DatabaseTest.php:11

OK, but incomplete or skipped tests!
Tests: 1, Skipped: 1.</screen>

    <para>
      <xref linkend="incomplete-and-skipped-tests.skipped-tests.tables.api" />
      shows the API for skipping tests.
    </para>

    <table id="incomplete-and-skipped-tests.skipped-tests.tables.api">
      <title>API for Skipping Tests</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void markTestSkipped()</literal></entry>
            <entry>Marks the current test as skipped.</entry>
          </row>
          <row>
            <entry><literal>void markTestSkipped(string $message)</literal></entry>
            <entry>Marks the current test as skipped using <literal>$message</literal> as an explanatory message.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
</chapter>
