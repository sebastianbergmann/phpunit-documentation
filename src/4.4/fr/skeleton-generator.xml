<?xml version="1.0" encoding="utf-8" ?>

<chapter id="skeleton-generator">
  <title>Générateur de squelette</title>

  <para>
    Le générateur de squelette de PHPUnit (Skeleton Generator) est un outil qui
    peut générer des squelettes de classes de test à partir des classes de code
    de production et vice versa. Il peut être installé en utilisant la commande
    suivante :
  </para>

  <screen><userinput>pear install phpunit/PHPUnit_SkeletonGenerator</userinput></screen>

  <section id="skeleton-generator.test">
    <title>Générer un squelettre de classe de cas de test</title>

  <para>
    <indexterm><primary>Générateur de squelette</primary></indexterm>

    Quand vous écrivez des tests pour du code existant, vous avez à écrire
    les mêmes fragments de code tels que <programlisting>public function testMethode()
{
}</programlisting> encore et encore. Le générateur de squelette de PHPUnit peut vous aider
    en analysant le code d'une classe existante et en générant pour elle un squelette de classe de cas
    de test.
  </para>

  <example id="skeleton-generator.examples.Calculator.php">
    <title>La classe Calculateur</title>
    <programlisting><![CDATA[<?php
class Calculateur
{
    public function additionner($a, $b)
    {
        return $a + $b;
    }
}
?>]]></programlisting>
  </example>

  <para>
    L'exemple suivant montre comment générer un squelette de classe de de test
    pour une classe appelée <literal>Calculateur</literal>
    (see <xref linkend="skeleton-generator.examples.Calculator.php" />).
  </para>

  <screen><userinput>phpunit-skelgen --test Calculateur</userinput>
PHPUnit Skeleton Generator 1.0.0 by Sebastian Bergmann.

Wrote skeleton for "CalculateurTest" to "/home/sb/CalculateurTest.php".</screen>

  <para>
    <indexterm><primary>Test incomplet</primary></indexterm>

    Pour chaque méthode de la classe originelle, il y a aura un cas de
    test incomplet (voir <xref linkend="incomplete-and-skipped-tests" />) dans
    la classe de cas de test générée.
  </para>

  <note>
    <title>Classes sous espace de nom et le générateur de squelette</title>

    <para>
      Lorsque vous utilisez le générateur de squelette pour générer du code basé sur
      une classe qui est déclarée dans un <ulink url="http://php.net/namespace">espace de nommage (namespace)</ulink>
      vous devez fournir le nom qualifié de la classe ainsi que le chemin d'accès
      au fichier source dans lequel elle est déclarée.
    </para>

    <para>
      Par exemple, pour une classe <literal>Calculateur</literal> qui est déclarée
      dans l'espace de nommage <literal>projet</literal>, vous devez invoquer le
      générateur de squelette comme ceci :
      <screen><userinput>phpunit-skelgen --test -- &quot;projet\Calculateur&quot; Calculateur.php</userinput>
PHPUnit Skeleton Generator 1.0.0 by Sebastian Bergmann.

Wrote skeleton for "projet\CalculateurTest" to "/home/sb/CalculateurTest.php".</screen>
    </para>
  </note>

  <para>
    Ci-dessous se trouve la sortie écran produite par le lancement de la classe de cas de test générée.
  </para>

  <screen><userinput>phpunit --bootstrap Calculateur.php --verbose CalculateurTest</userinput>
PHPUnit 4.4.0 by Sebastian Bergmann.

I

Time: 0 seconds, Memory: 3.50Mb

There was 1 incomplete test:

1) CalculateurTest::testAdditionner
This test has not been implemented yet.

/home/sb/CalculateurTest.php:38
OK, but incomplete or skipped tests!
Tests: 1, Assertions: 0, Incomplete: 1.</screen>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@assert</primary></indexterm>

      Vous pouvez utiliser l'annotation <literal>@assert</literal> dans le bloc
      de documentation d'une méthode pour générer automatiquement des tests
      simples mais significatifs au lieu de cas de tests incomplets.
      <xref linkend="skeleton-generator.test.examples.Calculator.php" />
      montre un exemple.
    </para>

    <example id="skeleton-generator.test.examples.Calculator.php">
      <title>La classe Calculateur avec des annotations @assert</title>
      <programlisting><![CDATA[<?php
class Calculateur
{
    /**
     * @assert (0, 0) == 0
     * @assert (0, 1) == 1
     * @assert (1, 0) == 1
     * @assert (1, 1) == 2
     */
    public function additionner($a, $b)
    {
        return $a + $b;
    }
}
?>]]></programlisting>
    </example>

    <para>
      Chaque méthode de la classe originelle est contrôlée à la recherche d'annotations
      <literal>@assert</literal>. Celles-ci sont transformées en code de test comme
      <programlisting>    /**
     * Generated from @assert (0, 0) == 0.
     */
    public function testAdditionner() {
        $o = new Calculateur;
        $this->assertEquals(0, $o->additionner(0, 0));
    }</programlisting>
    </para>

    <para>
      Ci-dessous se trouve la sortie écran produite par le lancement de la classe de cas de test générée.
    </para>

    <screen><userinput>phpunit --bootstrap Calculateur.php --verbose CalculateurTest</userinput>
PHPUnit 4.4.0 by Sebastian Bergmann.

....

Time: 0 seconds, Memory: 3.50Mb

OK (4 tests, 4 assertions)</screen>

    <para>
      <xref linkend="skeleton-generator.test.tables.assert-annotations" />
      montre les variantes gérées par l'annotation <literal>@assert</literal>
      et de quelle façon elles sont transformées en code de test.
    </para>

    <table id="skeleton-generator.test.tables.assert-annotations">
      <title>Variantes gérées par l'annotation @assert</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Annotation</entry>
            <entry>Transformée en</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>@assert (...) == X</literal></entry>
            <entry><literal>assertEquals(X, methode(...))</literal></entry>
          </row>
          <row>
            <entry><literal>@assert (...) != X</literal></entry>
            <entry><literal>assertNotEquals(X, methode(...))</literal></entry>
          </row>
          <row>
            <entry><literal>@assert (...) === X</literal></entry>
            <entry><literal>assertSame(X, methode(...))</literal></entry>
          </row>
          <row>
            <entry><literal>@assert (...) !== X</literal></entry>
            <entry><literal>assertNotSame(X, methode(...))</literal></entry>
          </row>
          <row>
            <entry><literal>@assert (...) &gt; X</literal></entry>
            <entry><literal>assertGreaterThan(X, methode(...))</literal></entry>
          </row>
          <row>
            <entry><literal>@assert (...) &gt;= X</literal></entry>
            <entry><literal>assertGreaterThanOrEqual(X, methode(...))</literal></entry>
          </row>
          <row>
            <entry><literal>@assert (...) &lt; X</literal></entry>
            <entry><literal>assertLessThan(X, methode(...))</literal></entry>
          </row>
          <row>
            <entry><literal>@assert (...) &lt;= X</literal></entry>
            <entry><literal>assertLessThanOrEqual(X, methode(...))</literal></entry>
          </row>
          <row>
            <entry><literal>@assert (...) throws X</literal></entry>
            <entry><literal>@expectedException X</literal></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="skeleton-generator.class">
    <title>Générer un squelette de classe à partir d'une classe de cas de test</title>

    <para>
      Lorsque vous pratiquez le développement dirigé par les tests (voir <xref linkend="test-driven-development"/>)
      et que vous écrivez vos tests avant le code que les tests vérifient, PHPUnit peut
      vous aider à générer des squelettes de classe à partir des classes de cas de test.
    </para>

    <para>
      Suivant la convention selon laquelle les tests pour une classe <literal>Unit</literal>
      sont écrit dans une classe nommée <literal>UnitTest</literal>, le source de la classe
      de cas de test est inspecté à la recherche de variables qui référencent des objets
      de la classe <literal>Unit</literal> puis est analysé pour savoir quelles méthodes
      sont appelées sur ces objets. Par exemple, jetez un oeil à <xref
      linkend="skeleton-generator.class.examples.BowlingGame.php"/> qui a été généré en se
      basant sur l'analyse de <xref
      linkend="skeleton-generator.class.examples.BowlingGameTest.php"/>.
    </para>

    <example id="skeleton-generator.class.examples.BowlingGameTest.php">
      <title>La classe JeuDeBowlingTest</title>
      <programlisting><![CDATA[<?php
class JeuDeBowlingTest extends PHPUnit_Framework_TestCase
{
    protected $jeu;

    protected function setUp()
    {
        $this->jeu = new JeuDeBowling;
    }

    protected function lancePlusieursEtRenverse($n, $quilles)
    {
        for ($i = 0; $i < $n; $i++) {
            $this->jeu->renverse($quilles);
        }
    }

    public function testScorePourJeuDansLaRigoleEst0()
    {
        $this->lancePlusieursEtRenverse(20, 0);
        $this->assertEquals(0, $this->jeu->score());
    }
}
?>]]></programlisting>
    </example>

    <screen><userinput>phpunit-skelgen --class JeuDeBowlingTest</userinput>
PHPUnit Skeleton Generator 1.0.0 by Sebastian Bergmann.

Wrote skeleton for "JeuDeBowling" to "./JeuDeBowling.php".</screen>

    <example id="skeleton-generator.class.examples.BowlingGame.php">
      <title>Le squelette généré de la classe JeuDeBowling</title>
      <programlisting><![CDATA[<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-01-09 at 16:55:58.
 */
class JeuDeBowling
{
    /**
     * @todo Implement renverse().
     */
    public function renverse()
    {
        // Remove the following line when you implement this method.
        throw new RuntimeException('Not yet implemented.');
    }

    /**
     * @todo Implement score().
     */
    public function score()
    {
        // Remove the following line when you implement this method.
        throw new RuntimeException('Not yet implemented.');
    }
}
?>]]></programlisting>
    </example>

    <para>
      Ci-dessous se trouve la sortie écran produite par le lancement de la classe de cas de test générée.
    </para>

    <screen><userinput>phpunit --bootstrap JeuDeBowling.php JeuDeBowlingTest</userinput>
PHPUnit 4.4.0 by Sebastian Bergmann.

E

Time: 0 seconds, Memory: 3.50Mb

There was 1 error:

1) JeuDeBowlingTest::testScorePourJeuDansLaRigoleEst0
RuntimeException: Not yet implemented.

/home/sb/JeuDeBowling.php:13
/home/sb/JeuDeBowlingTest.php:14
/home/sb/JeuDeBowlingTest.php:20

FAILURES!
Tests: 1, Assertions: 0, Errors: 1.</screen>
  </section>
</chapter>
