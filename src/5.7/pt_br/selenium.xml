<?xml version="1.0" encoding="utf-8" ?>

<chapter id="selenium">
  <title>PHPUnit e Selenium</title>

  <section id="selenium.selenium-rc">
    <title>Servidor Selenium</title>

    <para>
      <indexterm><primary>Servidor Selenium</primary></indexterm>

      <ulink url="http://seleniumhq.org/">Servidor Selenium</ulink> é uma
      ferramenta de testes que permite a você escrever testes automatizados de interface de usuário para
      aplicações web em qualquer linguagem de programação contra qualquer website HTTP
      usando um dos principais navegadores. Ele realiza tarefas automatizadas no navegador
      guiando seu processo através do sistema operacional.
      O Selenium executa os testes diretamente em um navegador, exatamente como os usuários reais fazem. Esses
      testes podem ser usados para ambos <emphasis>testes de aceitação</emphasis>
      (realizando testes de alto-nível no sistema integrado em vez de
      apenas testar cada unidade do sistema independentemente) e
      <emphasis>testes de compatibilidade de navegador</emphasis> (testando a aplicação web em
      diferentes sistemas operacionais e navegadores).
    </para>

    <para>
      O único cenário suportado do PHPUnit_Selenium é o do servidor Selenium 2.x.
      O servidor pode ser acessado através da Api clássica Selenium RC, já presente no 1.x, ou com a API WebDriver (parcialmente implementada) do PHPUnit_Selenium 1.2.
    </para>
    <para>
      A razão por trás dessa decisão é que o Selenium 2 é compatível e o Selenium RC não é mais mantido.
    </para>

</section>

<section id="selenium.installation">
    <title>Instalação</title>

    <para>
      Primeiro, instale o Servidor Selenium:
    </para>

    <orderedlist>
      <listitem>Baixe um arquivo de distribuição do <ulink url="http://seleniumhq.org/download/">Servidor Selenium</ulink>.</listitem>
      <listitem>Descompacte o arquivo de distribuição e copie o <filename>selenium-server-standalone-2.9.0.jar</filename> (verifique o sufixo da versão) para <filename>/usr/local/bin</filename>, por exemplo.</listitem>
      <listitem>Inicie o Servidor Selenium executando <userinput>java -jar /usr/local/bin/selenium-server-standalone-2.9.0.jar</userinput>.</listitem>
    </orderedlist>

    <para>
      O pacote PHPUnit_Selenium está incluso na distribuição PHAR
      do PHPUnit. Ele pode ser instalado através do Composer, adicionando a seguinte
      dependência <literal>"require-dev"</literal>:
    </para>

    <screen><userinput>"phpunit/phpunit-selenium": ">=1.2"</userinput></screen>

    <para>
      Agora podemos enviar comandos para o Servidor Selenium usando seu protocolo
      cliente/servidor.
    </para>
  </section>

  <section id="selenium.selenium2testcase">
    <title>PHPUnit_Extensions_Selenium2TestCase</title>

    <para>
      <indexterm><primary><literal>PHPUnit_Extensions_Selenium2TestCase</literal></primary></indexterm>

      O caso de teste <literal>PHPUnit_Extensions_Selenium2TestCase</literal> permite a você usar a API WebDriver (parcialmente implementada).
    </para>

    <para>
      <xref linkend="selenium.selenium2testcase.examples.WebTest.php" /> mostra
      como testar os conteúdos do elemento <literal><![CDATA[<title>]]></literal>
      do site
      <systemitem role="URL">http://www.example.com/</systemitem>.
    </para>
    <example id="selenium.selenium2testcase.examples.WebTest.php">
      <title>Exemplo de uso para PHPUnit_Extensions_Selenium2TestCase</title>
      <programlisting><![CDATA[<?php
class WebTest extends PHPUnit_Extensions_Selenium2TestCase
{
    protected function setUp()
    {
        $this->setBrowser('firefox');
        $this->setBrowserUrl('http://www.example.com/');
    }

    public function testTitle()
    {
        $this->url('http://www.example.com/');
        $this->assertEquals('Example WWW Page', $this->title());
    }

}
?>]]></programlisting>
      <screen><userinput>phpunit WebTest</userinput><![CDATA[
PHPUnit 4.7.0 by Sebastian Bergmann and contributors.

F

Time: 28 seconds, Memory: 3.00Mb

There was 1 failure:

1) WebTest::testTitle
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'Example WWW Page'
+'IANA — Example domains'

/home/giorgio/WebTest.php:13

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen></example>

    <para>
      Os comandos do Selenium2TestCase são implementados via __call(). Por favor, recorra ao <ulink url="https://github.com/sebastianbergmann/phpunit-selenium/blob/master/Tests/Selenium2TestCaseTest.php">teste de ponta a ponta para o PHPUnit_Extensions_Selenium2TestCase</ulink> para uma lista de cada característica suportada.
    </para>
  </section>

  <section id="selenium.seleniumtestcase">
    <title>PHPUnit_Extensions_SeleniumTestCase</title>

    <para>
      <indexterm><primary><literal>PHPUnit_Extensions_SeleniumTestCase</literal></primary></indexterm>

      A extensão de caso de teste <literal>PHPUnit_Extensions_SeleniumTestCase</literal>
      implementa o protocolo cliente/servidor para conversar com o Servidor Selenium assim como
      métodos de asserção especializados para testes web.
    </para>

    <para>
      O <xref linkend="selenium.seleniumtestcase.examples.WebTest.php" /> mostra
      como testar os conteúdos do elemento <literal><![CDATA[<title>]]></literal>
      para o site
      <systemitem role="URL">http://www.exemplo.com/</systemitem>.
    </para>

    <example id="selenium.seleniumtestcase.examples.WebTest.php">
      <title>Exemplo de uso para PHPUnit_Extensions_SeleniumTestCase</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Extensions/SeleniumTestCase.php';

class WebTest extends PHPUnit_Extensions_SeleniumTestCase
{
    protected function setUp()
    {
        $this->setBrowser('*firefox');
        $this->setBrowserUrl('http://www.example.com/');
    }

    public function testTitle()
    {
        $this->open('http://www.example.com/');
        $this->assertTitle('Example WWW Page');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit WebTest</userinput><![CDATA[
PHPUnit 4.7.0 by Sebastian Bergmann and contributors.

F

Time: 9 seconds, Memory: 6.00Mb

There was 1 failure:

1) WebTest::testTitle
Current URL: http://www.iana.org/domains/example/

Failed asserting that 'IANA — Example domains' matches PCRE pattern "/Example WWW Page/".


FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>


    <para>
      Diferente da classe <literal>PHPUnit_Framework_TestCase</literal>,
      classes de caso de teste que estendem o <literal>PHPUnit_Extensions_SeleniumTestCase</literal>
      têm que fornecer um método <literal>setUp()</literal>. Esse método é usado
      para configurar a sessão do Servidor Selenium. Veja
      <xref linkend="selenium.seleniumtestcase.tables.seleniumrc-api.setup" />
      para uma lista de métodos que estão disponíveis para isso.
    </para>

    <table id="selenium.seleniumtestcase.tables.seleniumrc-api.setup">
      <title>API do Servidor Selenium: Setup</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Método</entry>
            <entry>Significado</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void setBrowser(string $browser)</literal></entry>
            <entry>Define o navegador a ser usado pelo Servidor Selenium.</entry>
          </row>
          <row>
            <entry><literal>void setBrowserUrl(string $browserUrl)</literal></entry>
            <entry>Define a URL base para os testes.</entry>
          </row>
          <row>
            <entry><literal>void setHost(string $host)</literal></entry>
            <entry>Define o nome do host para a conexão do Servidor Selenium.</entry>
          </row>
          <row>
            <entry><literal>void setPort(int $port)</literal></entry>
            <entry>Define a porta de conexão para o Servidor Selenium</entry>
          </row>
          <row>
            <entry><literal>void setTimeout(int $timeout)</literal></entry>
            <entry>Define o tempo de espera para a conexão do Servidor Selenium.</entry>
          </row>
          <row>
            <entry><literal>void setSleep(int $seconds)</literal></entry>
            <entry>Define o número de segundos que o cliente do Servidor Selenium deve esperar entre cada envio de comandos de ação para o Servidor Selenium.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      O PHPUnit pode opcionalmente capturar a tela quando um teste do Selenium falha. Para
      habilitar isso, configure <literal>$captureScreenshotOnFailure</literal>,
      <literal>$screenshotPath</literal> e <literal>$screenshotUrl</literal>
      em sua classe de caso de teste como mostrado em
      <xref linkend="selenium.seleniumtestcase.examples.WebTest2.php" />.
    </para>

    <example id="selenium.seleniumtestcase.examples.WebTest2.php">
      <title>Capturando a tela quando um teste falha</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Extensions/SeleniumTestCase.php';

class WebTest extends PHPUnit_Extensions_SeleniumTestCase
{
    protected $captureScreenshotOnFailure = TRUE;
    protected $screenshotPath = '/var/www/localhost/htdocs/screenshots';
    protected $screenshotUrl = 'http://localhost/screenshots';

    protected function setUp()
    {
        $this->setBrowser('*firefox');
        $this->setBrowserUrl('http://www.example.com/');
    }

    public function testTitle()
    {
        $this->open('http://www.example.com/');
        $this->assertTitle('Example WWW Page');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit WebTest</userinput><![CDATA[
PHPUnit 4.7.0 by Sebastian Bergmann and contributors.

F

Time: 7 seconds, Memory: 6.00Mb

There was 1 failure:

1) WebTest::testTitle
Current URL: http://www.iana.org/domains/example/
Screenshot: http://localhost/screenshots/334b080f2364b5.21568ee1c7f6742c9.png

Failed asserting that 'IANA — Example domains' matches PCRE pattern "/Example WWW Page/".


FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>

    <para>
      Você pode executar cada teste usando um conjunto de navegadores: Em vez de usar
      <literal>setBrowser()</literal> para configurar um navegador, você pode declarar um
      vetor <literal>public static</literal> chamado <literal>$browsers</literal>
      em sua classe de caso de testes. Cada item nesse vetor descreve uma configuração
      de navegador. Cada um desses navegadores pode ser hospedado em diferentes
      Servidores Selenium.
      O <xref linkend="selenium.seleniumtestcase.examples.WebTest3.php" /> mostra
      um exemplo.
    </para>

    <example id="selenium.seleniumtestcase.examples.WebTest3.php">
      <title>Definindo configurações de múltiplos navegadores</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Extensions/SeleniumTestCase.php';

class WebTest extends PHPUnit_Extensions_SeleniumTestCase
{
    public static $browsers = array(
      array(
        'name'    => 'Firefox on Linux',
        'browser' => '*firefox',
        'host'    => 'my.linux.box',
        'port'    => 4444,
        'timeout' => 30000,
      ),
      array(
        'name'    => 'Safari on MacOS X',
        'browser' => '*safari',
        'host'    => 'my.macosx.box',
        'port'    => 4444,
        'timeout' => 30000,
      ),
      array(
        'name'    => 'Safari on Windows XP',
        'browser' => '*custom C:\Program Files\Safari\Safari.exe -url',
        'host'    => 'my.windowsxp.box',
        'port'    => 4444,
        'timeout' => 30000,
      ),
      array(
        'name'    => 'Internet Explorer on Windows XP',
        'browser' => '*iexplore',
        'host'    => 'my.windowsxp.box',
        'port'    => 4444,
        'timeout' => 30000,
      )
    );

    protected function setUp()
    {
        $this->setBrowserUrl('http://www.example.com/');
    }

    public function testTitle()
    {
        $this->open('http://www.example.com/');
        $this->assertTitle('Example Web Page');
    }
}
?>]]></programlisting>
    </example>

    <para>
      <literal>PHPUnit_Extensions_SeleniumTestCase</literal> pode coletar a
      informação de cobertura de código para execução de testes através do Selenium:
    </para>

    <orderedlist>
      <listitem>Copie <filename>PHPUnit/Extensions/SeleniumCommon/phpunit_coverage.php</filename> dentro do seu diretório raiz de documentos do servidor web.</listitem>
      <listitem>Em seu arquivo de configuração <filename>php.ini</filename> do servidor web, configure <filename>PHPUnit/Extensions/SeleniumCommon/prepend.php</filename> e <filename>PHPUnit/Extensions/SeleniumCommon/append.php</filename> como o <literal>auto_prepend_file</literal> e <literal>auto_append_file</literal>, respectivamente.</listitem>
      <listitem>Na sua classe de caso de teste que estende <literal>PHPUnit_Extensions_SeleniumTestCase</literal>, use <programlisting>protected $coverageScriptUrl = 'http://host/phpunit_coverage.php';</programlisting> para configurar a URL para o script <filename>phpunit_coverage.php</filename>.</listitem>
    </orderedlist>

    <para>
      <xref linkend="selenium.seleniumtestcase.tables.assertions" /> lista os
      vários métodos de asserção que o <literal>PHPUnit_Extensions_SeleniumTestCase</literal>
      fornece.
    </para>

    <table id="selenium.seleniumtestcase.tables.assertions">
      <title>Asserções</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Asserção</entry>
            <entry>Significado</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void assertElementValueEquals(string $locator, string $text)</literal></entry>
            <entry>Relata um erro se o valor do elemento identificado por <literal>$locator</literal> não é igual ao <literal>$text</literal> informado.</entry>
          </row>
          <row>
            <entry><literal>void assertElementValueNotEquals(string $locator, string $text)</literal></entry>
            <entry>Relata um erro se o valor do elemento identificado por <literal>$locator</literal> é igual ao <literal>$text</literal> informado.</entry>
          </row>
          <row>
            <entry><literal>void assertElementValueContains(string $locator, string $text)</literal></entry>
            <entry>Relata um erro se o valor do elemento identificado por <literal>$locator</literal> não contém o <literal>$text</literal> informado.</entry>
          </row>
          <row>
            <entry><literal>void assertElementValueNotContains(string $locator, string $text)</literal></entry>
            <entry>Relata um erro se o valor do elemento identificado por <literal>$locator</literal> contém o <literal>$text</literal> informado.</entry>
          </row>
          <row>
            <entry><literal>void assertElementContainsText(string $locator, string $text)</literal></entry>
            <entry>Relata um erro se o elemento identificado por <literal>$locator</literal> não contém o <literal>$text</literal> informado.</entry>
          </row>
          <row>
            <entry><literal>void assertElementNotContainsText(string $locator, string $text)</literal></entry>
            <entry>Relata um erro se o elemento identificado por <literal>$locator</literal> contém o <literal>$text</literal> informado.</entry>
          </row>
          <row>
            <entry><literal>void assertSelectHasOption(string $selectLocator, string $option)</literal></entry>
            <entry>Relata um erro se a opção informada não estiver disponível.</entry>
          </row>
          <row>
            <entry><literal>void assertSelectNotHasOption(string $selectLocator, string $option)</literal></entry>
            <entry>Relata um erro se a opção informada estiver disponível.</entry>
          </row>
          <row>
            <entry><literal>void assertSelected($selectLocator, $option)</literal></entry>
            <entry>Relata um erro se o rótulo informado não estiver selecionado.</entry>
          </row>
          <row>
            <entry><literal>void assertNotSelected($selectLocator, $option)</literal></entry>
            <entry>Relata um erro se o rótulo informado estiver selecionado.</entry>
          </row>
          <row>
            <entry><literal>void assertIsSelected(string $selectLocator, string $value)</literal></entry>
            <entry>Relata um erro se o valor informado não estiver selecionado.</entry>
          </row>
          <row>
            <entry><literal>void assertIsNotSelected(string $selectLocator, string $value)</literal></entry>
            <entry>Relata um erro se o valor informado estiver selecionado.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <xref linkend="selenium.seleniumtestcase.tables.template-methods" /> mostra
      o método modelo de <literal>PHPUnit_Extensions_SeleniumTestCase</literal>:
    </para>

    <table id="selenium.seleniumtestcase.tables.template-methods">
      <title>Métodos Modelo</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Método</entry>
            <entry>Significado</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void defaultAssertions()</literal></entry>
            <entry>Sobreposição para realizar asserções que são compartilhadas por todos os testes de um caso de teste. Este método é chamado após cada comando ser enviado ao Servidor Selenium.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      Por favor, verifique a <ulink url="http://release.seleniumhq.org/selenium-core/1.0.1/reference.html">documentação dos comandos do Selenium</ulink>
      para uma referência de todos os comandos disponíveis e como eles são utilizados.
    </para>
    <para>
    Os comandos do Selenium 1 são implementados dinamicamente via __call. Verifique também <ulink url="https://github.com/sebastianbergmann/phpunit-selenium/blob/master/PHPUnit/Extensions/SeleniumTestCase/Driver.php#L410">a documentação da API para PHPUnit_Extensions_SeleniumTestCase_Driver::__call()</ulink> para uma lista de todos os métodos suportados do lado do PHP, juntamente com argumentos e tipos de retorno quando disponíveis.
    </para>

    <para>
      Usando o método <literal>runSelenese($filename)</literal> você também pode
      executar um teste Selenium a partir de sua especificação Selenese/HTML. Além disso,
      usando o atributo estático <literal>$seleneseDirectory</literal>, você pode
      criar automaticamente objetos de teste a partir de um diretório que contenha
      arquivos Selenese/HTML. O diretório especificado é pesquisado recursivamente por
      arquivos <literal>.htm</literal> que possam conter Selenese/HTML.
     O <xref linkend="selenium.seleniumtestcase.examples.WebTest4.php" /> mostra um
     exemplo.
    </para>

    <example id="selenium.seleniumtestcase.examples.WebTest4.php">
      <title>Usando um diretório de arquivos Selenese/HTML como testes</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Extensions/SeleniumTestCase.php';

class SeleneseTests extends PHPUnit_Extensions_SeleniumTestCase
{
    public static $seleneseDirectory = '/path/to/files';
}
?>]]></programlisting>
    </example>

    <para>
    Desde o Selenium 1.1.1, um recurso experimental foi incluído para permitir ao usuário compartilhar a sessão entre testes. O único caso suportado é compartilhar a sessão entre todos os testes quando um único navegador é usado.
    Chame <literal>PHPUnit_Extensions_SeleniumTestCase::shareSession(true)</literal> em seu arquivo bootstrap para habilitar o compartilhamento de sessão.
    A sessão será reiniciada no caso de testes mal-sucedidos (falhos ou incompletos); cabe ao usuário evitar interações entre testes seja resetando cookies ou deslogando da aplicação sob teste (com um método tearDown()).
    </para>
  </section>
</chapter>
