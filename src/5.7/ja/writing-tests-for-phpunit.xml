<?xml version="1.0" encoding="utf-8" ?>

<chapter id="writing-tests-for-phpunit">
  <title>PHPUnit 用のテストの書き方</title>

  <para>
    <indexterm><primary>PHPUnit\Framework\TestCase</primary></indexterm>

    <xref linkend="writing-tests-for-phpunit.examples.StackTest.php" /> で、
    PHP の配列操作のテストを PHPUnit 用に書く方法を示します。
    この例では、PHPUnit を使ったテストを書く際の基本的な決まり事や手順を紹介します。
  </para>

  <orderedlist>
    <listitem><para><literal>Class</literal> という名前のクラスのテストは、<literal>ClassTest</literal> という名前のクラスに記述します。</para></listitem>
    <listitem><para><literal>ClassTest</literal> は、(ほとんどの場合) <literal>PHPUnit\Framework\TestCase</literal> を継承します。</para></listitem>
    <listitem><para>テストは、<literal>test*</literal> という名前のパブリックメソッドとなります。</para><para><indexterm><primary>Annotation</primary></indexterm><indexterm><primary>@test</primary></indexterm>あるいは、<literal>@test</literal> アノテーションをメソッドのコメント部で使用することで、それがテストメソッドであることを示すこともできます。</para></listitem>
    <listitem><para>テストメソッドの中で <literal>assertEquals()</literal> のようなアサーションメソッド (<xref linkend="appendixes.assertions" /> を参照ください) を使用して、期待される値と実際の値が等しいことを確かめます。</para></listitem>
  </orderedlist>

  <example id="writing-tests-for-phpunit.examples.StackTest.php">
    <title>PHPUnit での配列操作のテスト</title>
    <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class StackTest extends TestCase
{
    public function testPushAndPop()
    {
        $stack = [];
        $this->assertEquals(0, count($stack));

        array_push($stack, 'foo');
        $this->assertEquals('foo', $stack[count($stack)-1]);
        $this->assertEquals(1, count($stack));

        $this->assertEquals('foo', array_pop($stack));
        $this->assertEquals(0, count($stack));
    }
}
?>]]></programlisting>
  </example>

  <blockquote>
    <attribution>Martin Fowler</attribution>
    <para>
      Whenever you are tempted to type something into a
      <literal>print</literal> statement or a debugger expression, write it
      as a test instead.
    </para>
    <para>
      何かを <literal>print</literal> 文やデバッガの式に書きたくなったときは、
      代わりにその内容をテストに書くようにするんだ。
    </para>
  </blockquote>

  <section id="writing-tests-for-phpunit.test-dependencies">
    <title>テストの依存性</title>

    <blockquote>
      <attribution>Adrian Kuhn et. al.</attribution>
      <para>
        Unit Tests are primarily written as a good practice to help developers
        identify and fix bugs, to refactor code and to serve as documentation
        for a unit of software under test. To achieve these benefits, unit tests
        ideally should cover all the possible paths in a program. One unit test
        usually covers one specific path in one function or method. However a
        test method is not necessarily an encapsulated, independent entity. Often
        there are implicit dependencies between test methods, hidden in the
        implementation scenario of a test.
      </para>
      <para>
        ユニットテストを書くそもそもの目的は、バグの発見と修正や
        コードのリファクタリングを開発者がやりやすくすること。
        そしてテスト対象のソフトウェアのドキュメントとしての役割を果たすことだ。
        これらの目的を達成するためには、
        ユニットテストがプログラム内のすべてのルートをカバーしていることが理想である。
        ひとつのユニットテストがカバーするのは、
        通常はひとつの関数やメソッド内の特定のルートだけとなる。
        しかし、テストメソッドは必ずしもカプセル化して独立させる必要はない。
        複数のテストメソッドの間に暗黙の依存性があって、
        隠された実装シナリオがテストの中にあるのもよくあることだ。
      </para>
    </blockquote>

    <para>
      <indexterm><primary>Test Dependencies</primary></indexterm>

      PHPUnit は、テストメソッド間の依存性の明示的な宣言をサポートしています。
      この依存性とは、テストメソッドが実行される順序を定義するものではありません。
      プロデューサーがテストフィクスチャを作ってそのインスタンスを返し、
      依存するコンシューマーがそれを受け取って利用するというものです。
    </para>

    <itemizedlist>
      <listitem><para>プロデューサーとは、返り値としてテスト対象のユニットを生成するテストメソッドのこと。</para></listitem>
      <listitem><para>コンシューマーとは、プロデューサーの返り値に依存するテストメソッドのこと。</para></listitem>
    </itemizedlist>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@depends</primary></indexterm>

      <xref linkend="writing-tests-for-phpunit.examples.StackTest2.php" />
      は、<literal>@depends</literal> アノテーションを使ってテストメソッドの依存性をあらわす例です。
    </para>

    <example id="writing-tests-for-phpunit.examples.StackTest2.php">
      <title><literal>@depends</literal> アノテーションを使った依存性の表現</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class StackTest extends TestCase
{
    public function testEmpty()
    {
        $stack = [];
        $this->assertEmpty($stack);

        return $stack;
    }

    /**
     * @depends testEmpty
     */
    public function testPush(array $stack)
    {
        array_push($stack, 'foo');
        $this->assertEquals('foo', $stack[count($stack)-1]);
        $this->assertNotEmpty($stack);

        return $stack;
    }

    /**
     * @depends testPush
     */
    public function testPop(array $stack)
    {
        $this->assertEquals('foo', array_pop($stack));
        $this->assertEmpty($stack);
    }
}
?>]]></programlisting>
    </example>

    <para>
      上の例では、まず最初のテスト <literal>testEmpty()</literal>
      で新しい配列を作り、それが空であることを確かめます。
      このテストは、フィクスチャを返します。
      二番目のテスト <literal>testPush()</literal> は
      <literal>testEmpty()</literal> に依存しており、
      依存するテストの結果を引数として受け取ります。
      最後の <literal>testPop()</literal> は
      <literal>testPush()</literal> に依存しています。
    </para>

    <note>
      <para>
        <indexterm><primary>Annotation</primary></indexterm>
        <indexterm><primary>@depends</primary></indexterm>

        プロデューサーの生成する戻り値は、デフォルトでは「そのままの形式」でコンシューマーに渡されます。
        つまり、プロデューサーがオブジェクトを戻した場合は、そのオブジェクトへの参照がコンシューマーに渡されるということです。
        参照ではなくオブジェクトのコピーを渡す必要がある場合は、<code>@depends</code>
        ではなく <code>@depends clone</code> を使う必要があります。
      </para>
    </note>

    <para>
      <indexterm><primary>Defect Localization</primary></indexterm>

      問題の局所化を手早く行うには、失敗したテストに目を向けやすくしたいものです。
      そのため PHPUnit では、
      あるテストが失敗したときにはそのテストに依存する他のテストの実行をスキップします。
      テスト間の依存性を活用して問題点を見つけやすくしている例を
      <xref linkend="writing-tests-for-phpunit.examples.DependencyFailureTest.php" />
      に示します。
    </para>

    <example id="writing-tests-for-phpunit.examples.DependencyFailureTest.php">
      <title>テストの依存性の活用</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class DependencyFailureTest extends TestCase
{
    public function testOne()
    {
        $this->assertTrue(false);
    }

    /**
     * @depends testOne
     */
    public function testTwo()
    {
    }
}
?>]]></programlisting>

      <screen><userinput>phpunit --verbose DependencyFailureTest</userinput><![CDATA[
PHPUnit 5.7.0 by Sebastian Bergmann and contributors.

FS

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) DependencyFailureTest::testOne
Failed asserting that false is true.

/home/sb/DependencyFailureTest.php:6

There was 1 skipped test:

1) DependencyFailureTest::testTwo
This test depends on "DependencyFailureTest::testOne" to pass.

FAILURES!
Tests: 1, Assertions: 1, Failures: 1, Skipped: 1.]]></screen>
    </example>

    <para>
      ひとつのテストに複数の <literal>@depends</literal> アノテーションをつけることもできます。
      PHPUnit はテストが実行される順序を変更しないので、
      テストが実行されるときに確実に依存性が満たされているようにしておく必要があります。
    </para>

    <para>
      複数の <literal>@depends</literal> アノテーションを持つテストは、
      最初のプロデューサーからのフィクスチャを最初の引数、二番目のプロデューサーからのフィクスチャを二番目の引数、……
      として受け取ります。
      <xref linkend="writing-tests-for-phpunit.examples.MultipleDependencies.php" />
      を参照ください。
    </para>

    <example id="writing-tests-for-phpunit.examples.MultipleDependencies.php">
      <title>複数の依存性を持つテスト</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class MultipleDependenciesTest extends TestCase
{
    public function testProducerFirst()
    {
        $this->assertTrue(true);
        return 'first';
    }

    public function testProducerSecond()
    {
        $this->assertTrue(true);
        return 'second';
    }

    /**
     * @depends testProducerFirst
     * @depends testProducerSecond
     */
    public function testConsumer()
    {
        $this->assertEquals(
            ['first', 'second'],
            func_get_args()
        );
    }
}
?>]]></programlisting>

      <screen><userinput>phpunit --verbose MultipleDependenciesTest</userinput><![CDATA[
PHPUnit 5.7.0 by Sebastian Bergmann and contributors.

...

Time: 0 seconds, Memory: 3.25Mb

OK (3 tests, 3 assertions)]]></screen>
    </example>
  </section>

  <section id="writing-tests-for-phpunit.data-providers">
    <title>データプロバイダ</title>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@dataProvider</primary></indexterm>
      テストメソッドには任意の引数を渡すことができます。
      この引数は、データプロバイダメソッド
      (<xref linkend="writing-tests-for-phpunit.data-providers.examples.DataTest.php" />
      の <literal>additionProvider()</literal>)
      で指定します。使用するデータプロバイダメソッドを指定するには
      <literal>@dataProvider</literal> アノテーションを使用します。
    </para>

    <para>
      データプロバイダメソッドは、<literal>public</literal>
      でなければなりません。また、
      メソッドの返り値の型は、配列の配列あるいはオブジェクト
      (<literal>Iterator</literal> インターフェイスを実装しており、
      反復処理の際に配列を返すもの) である必要があります。
      この返り値の各要素に対して、その配列の中身を引数としてテストメソッドがコールされます。
    </para>

    <example id="writing-tests-for-phpunit.data-providers.examples.DataTest.php">
      <title>配列の配列を返すデータプロバイダの使用</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class DataTest extends TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this->assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return [
            [0, 0, 0],
            [0, 1, 1],
            [1, 0, 1],
            [1, 1, 3]
        ];
    }
}
?>]]></programlisting>

    <screen><userinput>phpunit DataTest</userinput><![CDATA[
PHPUnit 5.7.0 by Sebastian Bergmann and contributors.

...F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) DataTest::testAdd with data set #3 (1, 1, 3)
Failed asserting that 2 matches expected 3.

/home/sb/DataTest.php:9

FAILURES!
Tests: 4, Assertions: 4, Failures: 1.]]></screen>
    </example>

    <para>
      大量のデータセットを使う場合は、デフォルトの数字を使うのではなく、各データセットに文字列の名前をつけておくと便利です。
      出力もよりわかりやすくなり、テストを失敗させたデータセットの名前もわかるようになります。
    </para>

    <example id="writing-tests-for-phpunit.data-providers.examples.DataTest1.php">
      <title>データプロバイダでの名前つきデータセットの使用</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class DataTest extends TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this->assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return [
            'adding zeros'  => [0, 0, 0],
            'zero plus one' => [0, 1, 1],
            'one plus zero' => [1, 0, 1],
            'one plus one'  => [1, 1, 3]
        ];
    }
}
?>]]></programlisting>

    <screen><userinput>phpunit DataTest</userinput><![CDATA[
PHPUnit 4.6.0 by Sebastian Bergmann and contributors.

...F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) DataTest::testAdd with data set "one plus one" (1, 1, 3)
Failed asserting that 2 matches expected 3.

/home/sb/DataTest.php:9

FAILURES!
Tests: 4, Assertions: 4, Failures: 1.]]></screen>
    </example>

    <example id="writing-tests-for-phpunit.data-providers.examples.DataTest2.php">
      <title>Iterator オブジェクトを返すデータプロバイダの使用</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

require 'CsvFileIterator.php';

class DataTest extends TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this->assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return new CsvFileIterator('data.csv');
    }
}
?>]]></programlisting>

    <screen><userinput>phpunit DataTest</userinput><![CDATA[
PHPUnit 5.7.0 by Sebastian Bergmann and contributors.

...F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) DataTest::testAdd with data set #3 ('1', '1', '3')
Failed asserting that 2 matches expected '3'.

/home/sb/DataTest.php:11

FAILURES!
Tests: 4, Assertions: 4, Failures: 1.]]></screen>
    </example>

    <example id="writing-tests-for-phpunit.data-providers.examples.CsvFileIterator.php">
      <title>CsvFileIterator クラス</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class CsvFileIterator implements Iterator {
    protected $file;
    protected $key = 0;
    protected $current;

    public function __construct($file) {
        $this->file = fopen($file, 'r');
    }

    public function __destruct() {
        fclose($this->file);
    }

    public function rewind() {
        rewind($this->file);
        $this->current = fgetcsv($this->file);
        $this->key = 0;
    }

    public function valid() {
        return !feof($this->file);
    }

    public function key() {
        return $this->key;
    }

    public function current() {
        return $this->current;
    }

    public function next() {
        $this->current = fgetcsv($this->file);
        $this->key++;
    }
}
?>]]></programlisting>
    </example>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@dataProvider</primary></indexterm>
      <indexterm><primary>@depends</primary></indexterm>

      <literal>@dataProvider</literal> で指定したメソッドと
      <literal>@depends</literal> で指定したテストの両方からの入力を受け取るテストの場合、
      データプロバイダからの引数のほうが依存するテストからの引数より先にきます。
      依存するテストからの引数は、どちらのデータセットに対しても同じになります。
      <xref linkend="writing-tests-for-phpunit.data-providers.examples.DependencyAndDataProviderCombo.php"/>
      を参照ください。
    </para>

    <example id="writing-tests-for-phpunit.data-providers.examples.DependencyAndDataProviderCombo.php">
      <title>同じテストでの @depends と @dataProvider の組み合わせ</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class DependencyAndDataProviderComboTest extends TestCase
{
    public function provider()
    {
        return [['provider1'], ['provider2']];
    }

    public function testProducerFirst()
    {
        $this->assertTrue(true);
        return 'first';
    }

    public function testProducerSecond()
    {
        $this->assertTrue(true);
        return 'second';
    }

    /**
     * @depends testProducerFirst
     * @depends testProducerSecond
     * @dataProvider provider
     */
    public function testConsumer()
    {
        $this->assertEquals(
            ['provider1', 'first', 'second'],
            func_get_args()
        );
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit --verbose DependencyAndDataProviderComboTest</userinput><![CDATA[
PHPUnit 5.7.0 by Sebastian Bergmann and contributors.

...F

Time: 0 seconds, Memory: 3.50Mb

There was 1 failure:

1) DependencyAndDataProviderComboTest::testConsumer with data set #1 ('provider2')
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
Array (
-    0 => 'provider1'
+    0 => 'provider2'
1 => 'first'
2 => 'second'
)

/home/sb/DependencyAndDataProviderComboTest.php:31

FAILURES!
Tests: 4, Assertions: 4, Failures: 1.
]]></screen>
    </example>

    <note>
      <para>
        <indexterm><primary>Annotation</primary></indexterm>
        <indexterm><primary>@dataProvider</primary></indexterm>
        <indexterm><primary>@depends</primary></indexterm>

        あるテストがデータプロバイダを使う別のテストに依存している場合、
        別のテストで少なくともひとつのデータセットに対するテストが成功すれば
        そのテストも実行されます。
        データプロバイダを使ったテストの結果をそのテストに注入することはできません。
      </para>
    </note>

    <note>
      <para>
        <indexterm><primary>Annotation</primary></indexterm>
        <indexterm><primary>@dataProvider</primary></indexterm>
        <indexterm><primary>@depends</primary></indexterm>

        すべてのデータプロバイダを実行してから、
        静的メソッド <literal>setUpBeforeClass</literal>
        や <literal>setUp</literal> メソッドの最初の呼び出しが発生します。そのため、
        これらのメソッドで作った変数にデータプロバイダ内からアクセスすることはできません。
        そうなっている理由は、PHPUnit がテストの総数を算出できるようにするためです。
      </para>
    </note>
  </section>

  <section id="writing-tests-for-phpunit.exceptions">
    <title>例外のテスト</title>

    <para>
      <indexterm><primary>Exception</primary></indexterm>
      <indexterm><primary>expectException()</primary></indexterm>

      <xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php" />
      は、テストするコード内で例外がスローされたかどうかを
      <literal>expectException()</literal> メソッドを使用して調べる方法を示すものです。
    </para>

    <example id="writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php">
      <title>expectException() メソッドの使用法</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class ExceptionTest extends TestCase
{
    public function testException()
    {
        $this->expectException(InvalidArgumentException::class);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ExceptionTest</userinput>
PHPUnit 5.7.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) ExceptionTest::testException
Expected exception InvalidArgumentException

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>

    <para>
      <indexterm><primary>expectExceptionCode()</primary></indexterm>
      <indexterm><primary>expectExceptionMessage()</primary></indexterm>
      <indexterm><primary>expectExceptionMessageRegExp()</primary></indexterm>

      さらに、<literal>expectException()</literal>、
      <literal>expectExceptionCode()</literal>、
      <literal>expectExceptionMessage()</literal>、
      <literal>expectExceptionMessageRegExp()</literal> といったメソッドで、
      テスト対象のコードで発生するであろう例外をテストできます。
    </para>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@expectedException</primary></indexterm>

      別の方法として、<literal>@expectedException</literal>、
      <literal>@expectedExceptionCode</literal>、
      <literal>@expectedExceptionMessage</literal>、
      <literal>@expectedExceptionMessageRegExp</literal> といったアノテーションでも、
      テスト対象のコードで発生するであろう例外をテストできます。
      <xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php" />
      に例を示します。
    </para>

    <example id="writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php">
      <title>@expectedException アノテーションの使用法</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class ExceptionTest extends TestCase
{
    /**
     * @expectedException InvalidArgumentException
     */
    public function testException()
    {
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ExceptionTest</userinput>
PHPUnit 5.7.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) ExceptionTest::testException
Expected exception InvalidArgumentException

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>
  </section>

  <section id="writing-tests-for-phpunit.errors">
    <title>PHP のエラーのテスト</title>
    <para>
      <indexterm><primary>Error Handler</primary></indexterm>
      <indexterm><primary>PHP Error</primary></indexterm>
      <indexterm><primary>PHP Notice</primary></indexterm>
      <indexterm><primary>PHP Warning</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_Error</primary></indexterm>

      デフォルトでは、PHPUnit はテストの実行中に発生した PHP のエラーや警告そして notice
      を例外に変換します。これらの例外を用いて、たとえば
      <xref linkend="writing-tests-for-phpunit.exceptions.examples.ErrorTest.php" />
      のように PHP のエラーが発生することをテストできます。
    </para>

    <note>
      <para>
        PHP の実行時設定 <literal>error_reporting</literal> を使うと、
        PHPUnit がどのエラーを例外に変換するのかを制限できます。
        この機能に関して何か問題がでた場合は、PHP の設定を見直し、
        調べたいと思っているエラーを抑制するようになっていないかどうか確認しましょう。
      </para>
    </note>

    <example id="writing-tests-for-phpunit.exceptions.examples.ErrorTest.php">
      <title>@expectedException を用いた、PHP エラーが発生することのテスト</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class ExpectedErrorTest extends TestCase
{
    /**
     * @expectedException PHPUnit_Framework_Error
     */
    public function testFailingInclude()
    {
        include 'not_existing_file.php';
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit -d error_reporting=2 ExpectedErrorTest</userinput>
PHPUnit 5.7.0 by Sebastian Bergmann and contributors.

.

Time: 0 seconds

OK (1 test, 1 assertion)</screen>
    </example>

    <para>
      <indexterm><primary>PHPUnit_Framework_Error_Notice</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_Error_Warning</primary></indexterm>

      <literal>PHPUnit_Framework_Error_Notice</literal> および
      <literal>PHPUnit_Framework_Error_Warning</literal> は、
      それぞれ PHP の notice と警告に対応します。
    </para>

    <note>
      <para>
        例外をテストするときには可能な限り限定的にしなければいけません。
        あまりに一般化されすぎたクラスをテストすると、予期せぬ副作用を引き起こしかねません。
        というわけで、
        <literal>@expectedException</literal> や
        <literal>setExpectedException()</literal>
        を使った <literal>Exception</literal>
        クラスのテストはできないようにしました。
      </para>
    </note>

    <para>
        エラーを引き起こすような PHP の関数、たとえば <literal>fopen</literal>
        などに依存するテストを行うときには、テスト中にエラーを抑制できれば便利なことがあります。
        そうすれば、notice のせいで
        <literal>PHPUnit_Framework_Error_Notice</literal>
        が出てしまうことなく、返り値だけをチェックできるようになります。
        <example id="writing-tests-for-phpunit.exceptions.examples.TriggerErrorReturnValue.php">

            <title>PHP のエラーが発生するコードの返り値のテスト</title>
            <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class ErrorSuppressionTest extends TestCase
{
    public function testFileWriting() {
        $writer = new FileWriter;
        $this->assertFalse(@$writer->write('/is-not-writeable/file', 'stuff'));
    }
}
class FileWriter
{
    public function write($file, $content) {
        $file = fopen($file, 'w');
        if($file == false) {
            return false;
        }
        // ...
    }
}

?>]]></programlisting>
      <screen><userinput>phpunit ErrorSuppressionTest</userinput>
PHPUnit 5.7.0 by Sebastian Bergmann and contributors.

.

Time: 1 seconds, Memory: 5.25Mb

OK (1 test, 1 assertion)</screen>
        </example>
    もしエラーを抑制しなければ、このテストは失敗して
    <literal>fopen(/is-not-writeable/file): failed to open stream:
    No such file or directory</literal> となります。

    </para>
  </section>

  <section id="writing-tests-for-phpunit.output">
    <title>出力内容のテスト</title>

    <para>
      メソッドの実行結果を確かめる方法として、(<literal>echo</literal> や
      <literal>print</literal> などによる)
      出力が期待通りのものかを調べたいこともあるでしょう。
      <literal>PHPUnit\Framework\TestCase</literal> クラスは、PHP の
      <ulink url="http://www.php.net/manual/ja/ref.outcontrol.php">
      出力バッファリング</ulink> 機能を使用してこの仕組みを提供します。
    </para>

    <para>
      <xref linkend="writing-tests-for-phpunit.output.examples.OutputTest.php" />
      では、期待する出力内容を <literal>expectOutputString()</literal>
      メソッドで設定する方法を示します。
      期待通りの出力が得られなかった場合は、そのテストは失敗という扱いになります。
    </para>

    <example id="writing-tests-for-phpunit.output.examples.OutputTest.php">
      <title>関数やメソッドの出力内容のテスト</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class OutputTest extends TestCase
{
    public function testExpectFooActualFoo()
    {
        $this->expectOutputString('foo');
        print 'foo';
    }

    public function testExpectBarActualBaz()
    {
        $this->expectOutputString('bar');
        print 'baz';
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit OutputTest</userinput>
PHPUnit 5.7.0 by Sebastian Bergmann and contributors.

.F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) OutputTest::testExpectBarActualBaz
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'bar'
+'baz'

FAILURES!
Tests: 2, Assertions: 2, Failures: 1.</screen>
    </example>

    <para>
      <xref linkend="writing-tests-for-phpunit.output.tables.api" /> は、
      テストの出力用に提供するメソッドをまとめたものです。
    </para>

    <table id="writing-tests-for-phpunit.output.tables.api">
      <title>テストの出力用のメソッド</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>メソッド</entry>
            <entry>意味</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void expectOutputRegex(string $regularExpression)</literal></entry>
            <entry>出力が正規表現 <literal>$regularExpression</literal> にマッチするであろうという予測を設定します。</entry>
          </row>
          <row>
            <entry><literal>void expectOutputString(string $expectedString)</literal></entry>
            <entry>出力が文字列 <literal>$expectedString</literal> と等しくなるであろうという予測を設定します。</entry>
          </row>
          <row>
            <entry><literal>bool setOutputCallback(callable $callback)</literal></entry>
            <entry>たとえば出力時の正規化などに使用するコールバック関数を設定します。</entry>
          </row>
          <row>
            <entry><literal>string getActualOutput()</literal></entry>
            <entry>実際の出力を取得します。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <note>
      <para>
        strict モードでは、出力を発生させるテストは失敗します。
      </para>
    </note>
  </section>

  <section id="writing-tests-for-phpunit.error-output">
    <title>エラー出力</title>

    <para>
      テストが失敗した場合、PHPUnit は、状況を可能な限り詳細に報告します。
      これが、何が問題だったのかを調べるのに役立つでしょう。
    </para>

    <example id="writing-tests-for-phpunit.error-output.examples.ArrayDiffTest.php">
      <title>配列の比較に失敗したときのエラー出力</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class ArrayDiffTest extends TestCase
{
    public function testEquality() {
        $this->assertEquals(
            [1, 2,  3, 4, 5, 6],
            [1, 2, 33, 4, 5, 6]
        );
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ArrayDiffTest</userinput><![CDATA[
PHPUnit 5.7.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) ArrayDiffTest::testEquality
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
 Array (
     0 => 1
     1 => 2
-    2 => 3
+    2 => 33
     3 => 4
     4 => 5
     5 => 6
 )

/home/sb/ArrayDiffTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
    <para>
      この例では配列の要素のうちひとつだけが異なっています。
      それ以外の値も表示することで、どこが悪かったのかをわかりやすくしています。
    </para>

    <para>
      出力が長すぎる場合は PHPUnit が出力を分割し、違っている部分の前後数行だけを出力します。
    </para>
    <example id="writing-tests-for-phpunit.error-output.examples.LongArrayDiffTest.php">
      <title>要素数の多い配列の比較に失敗したときのエラー出力</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class LongArrayDiffTest extends TestCase
{
    public function testEquality() {
        $this->assertEquals(
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2,  3, 4, 5, 6],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 33, 4, 5, 6]
        );
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit LongArrayDiffTest</userinput><![CDATA[
PHPUnit 5.7.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) LongArrayDiffTest::testEquality
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
     13 => 2
-    14 => 3
+    14 => 33
     15 => 4
     16 => 5
     17 => 6
 )

/home/sb/LongArrayDiffTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
    <section id="writing-tests-for-phpunit.error-output.edge-cases">
      <title>エッジケース</title>

      <para>
        比較に失敗したときに、PHPUnit は入力値をテキスト形式にしてこれを比較します。
        この実装が原因で、実際の違う箇所よりも多くの問題を報告してしまうことがあります。
      </para>

      <para>
        この問題が発生するのは、
        assertEquals などの「緩い」比較の関数を、配列やオブジェクトに対して使った場合だけです。
      </para>

      <example id="writing-tests-for-phpunit.error-output.edge-cases.examples.ArrayWeakComparisonTest.php">
        <title>緩い比較を使った場合の diff の生成のエッジケース</title>
        <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class ArrayWeakComparisonTest extends TestCase
{
    public function testEquality() {
        $this->assertEquals(
            [1, 2, 3, 4, 5, 6],
            ['1', 2, 33, 4, 5, 6]
        );
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ArrayWeakComparisonTest</userinput><![CDATA[
PHPUnit 5.7.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) ArrayWeakComparisonTest::testEquality
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
 Array (
-    0 => 1
+    0 => '1'
     1 => 2
-    2 => 3
+    2 => 33
     3 => 4
     4 => 5
     5 => 6
 )

/home/sb/ArrayWeakComparisonTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>

      </example>
      <para>
        この例では、最初のインデックスの
        <literal>1</literal> と <literal>'1'</literal>
        がエラー報告されていますが、assertEquals ではこれらを等しいとみなしているはずです。
      </para>

    </section>
  </section>
</chapter>

