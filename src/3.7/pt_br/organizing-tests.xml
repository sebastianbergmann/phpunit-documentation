<?xml version="1.0" encoding="utf-8" ?>

<chapter id="organizing-tests">
  <title>Organizando Testes</title>

  <para>
    <indexterm><primary>Suíte de Testes</primary></indexterm>

    Um dos objetivos do PHPUnit (veja <xref linkend="goals" />) é que os testes devem ser combináveis: queremos ser capazes de executar qualquer quantidade ou combinação de testes juntos, por exemplo todos os testes para um projeto inteiro, ou os testes para todas as classes de um ambiente que é parte do projeto, ou apenas os testes para uma só classe.
  </para>

  <para>
    O PHPUnit suporta diferentes formas de organizar testes e combiná-los em uma suíte de testes. Este capítulo mostra as abordagens mais comuns.
  </para>

  <section id="organizing-tests.filesystem">
    <title>Compondo uma Suíte de Testes usando o Sistema de Arquivos</title>

    <para>
      Provavelmente o jeito mais fácil de compor uma suíte de testes é manter todos os arquivos-fonte dos casos de teste em um diretório de testes. O PHPUnit pode descobrir automaticamente e executar os testes atravessando recursivamente o diretório de testes.
    </para>

    <para>
      Vamos dar uma olhada na suíte de testes da biblioteca <ulink url="http://github.com/sebastianbergmann/php-object-freezer/">Object_Freezer</ulink>
      Observando a estrutura de diretórios desse projeto, podemos ver que as classes dos casos de teste no diretório <filename>Testes</filename> espelha o pacote e estrutura de classes do Sistema Sob Teste (SST – ou SST: System Under Teste) no diretório
      <filename>Object</filename>:
    </para>

    <screen>Object                              Tests
|-- Freezer                         |-- Freezer
|   |-- HashGenerator               |   |-- HashGenerator
|   |   `-- NonRecursiveSHA1.php    |   |   `-- NonRecursiveSHA1Test.php
|   |-- HashGenerator.php           |   |
|   |-- IdGenerator                 |   |-- IdGenerator
|   |   `-- UUID.php                |   |   `-- UUIDTest.php
|   |-- IdGenerator.php             |   |
|   |-- LazyProxy.php               |   |
|   |-- Storage                     |   |-- Storage
|   |   `-- CouchDB.php             |   |   `-- CouchDB
|   |                               |   |       |-- WithLazyLoadTest.php
|   |                               |   |       `-- WithoutLazyLoadTest.php
|   |-- Storage.php                 |   |-- StorageTest.php
|   `-- Util.php                    |   `-- UtilTest.php
`-- Freezer.php                     `-- FreezerTest.php</screen>

    <para>
      Para executar todos os testes para a biblioteca precisamos apenas apontar o executor de testes em linha-de-comando do PHPUnit para o diretório de teste:
    </para>

    <screen><userinput>phpunit Tests</userinput>
PHPUnit 3.7.0 by Sebastian Bergmann.

............................................................ 60 / 75
...............

Time: 0 seconds

OK (75 tests, 164 assertions)</screen>

    <note>
      <para>
        Se você apontar o executor de testes em linha-de-comando do PHPUnit para um diretório, ele irá procurar por arquivos <filename>*Test.php</filename>.
      </para>
    </note>

    <para>
      Para executar apenas os testes declarados na classe de casos de teste <literal>Object_FreezerTest</literal>
      em <filename>Tests/FreezerTest.php</filename>, podemos usar o seguinte comando:
    </para>

    <screen><userinput>phpunit Tests/FreezerTest</userinput>
PHPUnit 3.7.0 by Sebastian Bergmann.

............................

Time: 0 seconds

OK (28 tests, 60 assertions)</screen>

    <para>
      Para um controle mais refinado sobre quais testes executar, podemos usar o comutador
      <literal>--filter</literal>:
    </para>

    <screen><userinput>phpunit --filter testFreezingAnObjectWorks Tests</userinput>
PHPUnit 3.7.0 by Sebastian Bergmann.

.

Time: 0 seconds

OK (1 test, 2 assertions)</screen>

    <note>
      <para>
        Uma desvantagem dessa abordagem é que não temos controle sobre a ordem em que os testes são executados. Isso pode causar problemas com relação às dependências dos testes, veja <xref linkend="writing-tests-for-phpunit.test-dependencies"/>.
        Na próxima seção você vai ver como pode tornar explícita a ordem de execução de testes usando o arquivo de configuração XML.
      </para>
    </note>
  </section>

  <section id="organizing-tests.xml-configuration">
    <title>Compondo uma Suíte de Testes Usando uma Configuração XML</title>
    <indexterm><primary>XML Configuration</primary></indexterm>

    <para>
      O arquivo de configuração XML do PHPUnit (<xref linkend="appendixes.configuration"/>)
      também pode ser usado para compor uma suíte de testes.
      <xref linkend="organizing-tests.xml-configuration.examples.phpunit.xml"/>
      mostra um exemplo mínimo que adicionará todas as classes <literal>*Test</literal> que forem encontradas em arquivos <filename>*Test.php</filename> quando os
      <filename>Tests</filename> forem atravessados recursivamente.
    </para>

    <example id="organizing-tests.xml-configuration.examples.phpunit.xml">
      <title>Compondo uma Suíte de Testes Usando uma Configuração XML</title>
      <programlisting><![CDATA[<phpunit>
<testsuites>
<testsuite name="Object_Freezer">
<directory>Tests</directory>
</testsuite>
</testsuites>
</phpunit>]]></programlisting>
    </example>

    <para>
      A ordem de execução dos testes pode ser explicitada:
    </para>

    <example id="organizing-tests.xml-configuration.examples.phpunit.xml2">
      <title>Compondo uma Suíte de Testes Usando uma Configuração XML</title>
      <programlisting><![CDATA[<phpunit>
<testsuites>
<testsuite name="Object_Freezer">
<file>Tests/Freezer/HashGenerator/NonRecursiveSHA1Test.php</file>
<file>Tests/Freezer/IdGenerator/UUIDTest.php</file>
<file>Tests/Freezer/UtilTest.php</file>
<file>Tests/FreezerTest.php</file>
<file>Tests/Freezer/StorageTest.php</file>
<file>Tests/Freezer/Storage/CouchDB/WithLazyLoadTest.php</file>
<file>Tests/Freezer/Storage/CouchDB/WithoutLazyLoadTest.php</file>
</testsuite>
</testsuites>
</phpunit>]]></programlisting>
    </example>
  </section>
</chapter>
