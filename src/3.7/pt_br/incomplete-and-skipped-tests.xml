<?xml version="1.0" encoding="utf-8" ?>

<chapter id="incomplete-and-skipped-tests">
  <title>Testes Incompletos e Pulados</title>

  <section id="incomplete-and-skipped-tests.incomplete-tests">
    <title>Testes Incompletos</title>

    <para>
      Quando você está trabalhando em uma nova classe de caso de teste, você pode querer começar a escrever métodos de teste vazios, como:
<programlisting>public function testAlgumaCoisa()
{
}</programlisting>
para manter o controle sobre os testes que você já escreveu. O problema com os métodos de teste vazios é que eles são interpretados como bem-sucedidos pelo framework do PHPUnit. Esse erro de interpretação leva à inutilização dos relatórios de testes -- você não pode ver se um teste foi realmente bem-sucedido ou simplesmente ainda não foi implementado. Chamar <literal>$this->fail()</literal> no teste não implementado não ajuda em nada, já que o teste será interpretado como uma falha. Isso seria tão errado quando interpretar um teste não implementado como bem-sucedido.
    </para>

    <para>
      <indexterm><primary>Testes Incompletos</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_IncompleteTest</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_IncompleteTestError</primary></indexterm>

      Se imaginarmos que um teste bem-sucedido é uma luz verde e um teste mal-sucedido (falho) é uma luz vermelha, precisaremos de uma luz amarela adicional para marcar o teste como incompleto ou ainda não implementado. O
      <literal>PHPUnit_Framework_IncompleteTest</literal> é uma interface marcadora para marcar uma exceção que surge de um método de teste como resultado do teste ser incompleto ou atualmente não implementado. O
      <literal>PHPUnit_Framework_IncompleteTestError</literal> é a implementação padrão dessa interface.
    </para>

    <para>
      <xref linkend="incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php" />
      mostra uma classe de caso de teste, <literal>ExemploTest</literal>, que contém um método de teste, <literal>testAlgumaCoisa()</literal>. Chamando o método de conveniência <literal>markTestIncomplete()</literal> (que automaticamente traz uma exceção <literal>PHPUnit_Framework_IncompleteTestError</literal>) no método de teste, marcamos o teste como sendo incompleto.
    </para>

    <example id="incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php">
      <title>Marcando um teste como incompleto</title>
      <programlisting><![CDATA[<?php
class ExemploTest extends PHPUnit_Framework_TestCase
{
public function testAlgumaCoisa()
{
// Opcional: Teste alguma coisa aqui, se quiser
$this->assertTrue(TRUE, 'Já deveria funcionar.');

// Pare aqui e marque este teste como incompleto.
$this->markTestIncomplete(
'Este teste ainda não foi implementado.'
);
}
}
?>]]></programlisting>
    </example>

    <para>
      Um teste incompleto é denotado por um <literal>I</literal> na saída do executor de testes em linha-de-comando do PHPUnit, como mostrado no exemplo abaixo:
    </para>

    <screen><userinput>phpunit --verbose ExemploTest</userinput>
PHPUnit 3.7.0 by Sebastian Bergmann.

I

Time: 0 seconds, Memory: 3.75Mb

There was 1 incomplete test:

1) ExemploTest::testAlgumaCoisa
Este teste ainda não foi implementado.

/home/sb/SampleTest.php:12
OK, but incomplete or skipped tests!
Tests: 1, Assertions: 1, Incomplete: 1.</screen>

    <para>
      <xref linkend="incomplete-and-skipped-tests.incomplete-tests.tables.api" />
      mostra a API para marcar testes como incompletos.
    </para>

    <table id="incomplete-and-skipped-tests.incomplete-tests.tables.api">
      <title>API para Testes Incompletos</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Método</entry>
            <entry>Significado</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void markTestIncomplete()</literal></entry>
            <entry>Marca o teste atual como incompleto.</entry>
          </row>
          <row>
            <entry><literal>void markTestIncomplete(string $mensagem)</literal></entry>
            <entry>Marca o teste atual como incompleto usando <literal>$menssagem</literal> como uma mensagem explanatória.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="incomplete-and-skipped-tests.skipping-tests">
    <title>Pulando Testes</title>

    <para>
      Nem todos os testes podem ser executados em qualquer ambiente. Considere, por exemplo, uma camada de abstração de banco de dados contendo vários drivers para os vários sistemas de banco de dados que suporta. Os testes para o driver MySQL podem ser executados apenas, é claro, se um servidor MySQL estiver disponível.
    </para>

    <para>
      <xref linkend="incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php" />
      mostra uma classe de caso de teste, <literal>BancoDeDadosTest</literal>, que contém um método de teste, <literal>testConnection()</literal>. No método modelo da classe do caso de teste
      <literal>setUp()</literal>, verificamos se uma extensão MySQLi está disponível e usamos o método <literal>markTestSkipped()</literal>para pular o teste caso contrário.
    </para>

    <example id="incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php">
      <title>Pulando um teste</title>
      <programlisting><![CDATA[<?php
class BancoDeDadosTest extends PHPUnit_Framework_TestCase
{
protected function setUp()
{
if (!extension_loaded('mysqli')) {
$this->markTestSkipped(
'A extensão MySQLi não está disponível.'
);
}
}

public function testConnection()
{
// ...
}
}
?>]]></programlisting>
    </example>

    <para>
      Um teste que tenha sido pulado é denotado por um <literal>S</literal> na saída do executor de testes em linha-de-comando do PHPUnit, como mostrado no seguinte exemplo:
    </para>

    <screen><userinput>phpunit --verbose BancoDeDadosTest</userinput>
PHPUnit 3.7.0 by Sebastian Bergmann.

S

Time: 0 seconds, Memory: 3.75Mb

There was 1 skipped test:

1) BancoDeDadosTest::testConnection
A extensão MySQLi não está disponível.

/home/sb/BancoDeDadosTest.php:9
OK, but incomplete or skipped tests!
Tests: 1, Assertions: 0, Skipped: 1.</screen>

    <para>
      <xref linkend="incomplete-and-skipped-tests.skipped-tests.tables.api" />
      mostra a API para pular testes.
    </para>

    <table id="incomplete-and-skipped-tests.skipped-tests.tables.api">
      <title>API para Pular Testes</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Método</entry>
            <entry>Significado</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void markTestSkipped()</literal></entry>
            <entry>Marca o teste atual como pulado.</entry>
          </row>
          <row>
            <entry><literal>void markTestSkipped(string $menssagem)</literal></entry>
            <entry>Marca o teste atual como pulado usando <literal>$menssagem</literal> como uma mensagem explanatória.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="incomplete-and-skipped-tests.skipping-tests-using-requires">
    <title>Pulando Testes usando @requires</title>

    <para>
      Além do método acima também é possível usar a anotação
      <literal>@requires</literal> para expressar pré-condições comuns para um caso de teste.
    </para>

    <table id="incomplete-and-skipped-tests.requires.tables.api">
      <title>Possíveis usos para @requires</title>
      <tgroup cols="4" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Tipo</entry>
            <entry>Valores Possíveis</entry>
            <entry>Exemplos</entry>
            <entry>Outro exemplo</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>PHP</literal></entry>
            <entry>Qualquer identificador de versão do PHP</entry>
            <entry>@requires PHP 5.3.3</entry>
            <entry>@requires PHP 5.4-dev</entry>
          </row>
          <row>
            <entry><literal>PHPUnit</literal></entry>
            <entry>Qualquer identificador de versão do PHPUnit</entry>
            <entry>@requires PHPUnit 3.6.3</entry>
            <entry>@requires PHPUnit 3.7</entry>
          </row>
          <row>
            <entry><literal>função</literal></entry>
            <entry>Qualquer parâmetro válido para <ulink url="http://php.net/function_exists">function_exists</ulink></entry>
            <entry>@requires function imap_open</entry>
            <entry>@requires function ReflectionMethod::setAccessible</entry>
          </row>
          <row>
            <entry><literal>extensão</literal></entry>
            <entry>Qualquer nome de extensão</entry>
            <entry>@requires extension mysqli</entry>
            <entry>@requires extension curl</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <example id="incomplete-and-skipped-tests.skipping-tests.examples.DatabaseClassSkippingTest.php">
      <title>Pulando casos de teste usando @requires</title>
      <programlisting><![CDATA[<?php
/**
* @requires extension mysqli
*/
class BancoDeDadosTest extends PHPUnit_Framework_TestCase
{
/**
* @requires PHP 5.3
*/
public function testConnection()
{
// O Teste requer as extensões mysqli e PHP >= 5.3
}

// ... Todos os outros testes requerem a extensão mysqli
}
?>]]></programlisting>
    </example>

    <para>
      Se você está usando uma sintaxe que não compila com uma certa versão do PHP, procure dentro da configuração xml por includes dependentes de versão na seção chamada <xref linkend="appendixes.configuration.testsuites" />
    </para>
  </section>

</chapter>
