<?xml version="1.0" encoding="iso-8859-1" ?>

<chapter id="textui">
  <title>The Command-Line Test Runner</title>

  <caution>
    <para>
      You are looking at the documentation for a version of PHPUnit that is no
      longer supported.
    </para>

    <para>
      The documentation for the current version of PHPUnit can be found
      <ulink url="../../current/en/index.html">here</ulink>.
    </para>
  </caution>

  <para>
    The PHPUnit command-line test runner can be invoked through the
    <filename>phpunit</filename> command. The following code shows how to run
    tests with the PHPUnit command-line test runner:
  </para>

  <screen><userinput>phpunit ArrayTest</userinput>
PHPUnit 2.3.0 by Sebastian Bergmann.

..

Time: 0.067288

OK (2 tests)</screen>

  <para>
    For each test run, the PHPUnit command-line tool prints one character to
    indicate progress:
  </para>

  <variablelist>
    <varlistentry>
      <term><literal>.</literal></term>
      <listitem>
        <para>
          Printed when the test succeeds.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>F</literal></term>
      <listitem>
        <para>
          Printed when an assertion fails while running the test method.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>E</literal></term>
      <listitem>
        <para>
          Printed when an error occurs while running the test method.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>I</literal></term>
      <listitem>
        <para>
          Printed when the test is marked as being incomplete or not yet
          implemented (see <xref linkend="incomplete-tests" />).
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    <indexterm><primary>Error</primary></indexterm>
    <indexterm><primary>Failure</primary></indexterm>

    PHPUnit distinguishes between <emphasis>failures</emphasis> and
    <emphasis>errors</emphasis>. A failure is a violated PHPUnit
    assertion. An error is an unexpected exception or a PHP error. Sometimes
    this distinction proves useful since errors tend to be easier to fix
    than failures. If you have a big list of problems, it is best to
    tackle the errors first and see if you have any failures left when
    they are all fixed.
  </para>

  <para>
    Let's take a look at the command-line test runner's switches in
    the following code:
  </para>

  <screen><userinput>phpunit --help</userinput>
<![CDATA[PHPUnit 2.3.0 by Sebastian Bergmann.

Usage: phpunit [switches] UnitTest [UnitTest.php]
  --coverage-data <file> Write Code Coverage data in raw format to file.
  --coverage-html <file> Write Code Coverage data in HTML format to file.
  --coverage-text <file> Write Code Coverage data in text format to file.

  --testdox-html <file>  Write agile documentation in HTML format to file.
  --testdox-text <file>  Write agile documentation in Text format to file.
  --log-xml <file>       Log test progress in XML format to file.

  --loader <loader>      TestSuiteLoader implementation to use.

  --skeleton             Generate skeleton UnitTest class for Unit in Unit.php.

  --wait                 Waits for a keystroke after each test.

  --help                 Prints this usage information.
  --version              Prints the version and exits.]]></screen>

  <variablelist>
    <varlistentry>
      <term><literal>phpunit UnitTest</literal></term>
      <listitem>
        <para>
          Runs the tests that are provided by the class
          <literal>UnitTest</literal>. This class is expected to be declared
          in the <filename>UnitTest.php</filename> sourcefile.
        </para>

        <para>
          <literal>UnitTest</literal> must be either a class that inherits
          from <literal>PHPUnit2_Framework_TestCase</literal> or a class that
          provides a <literal>public static suite()</literal> method which
          returns an <literal>PHPUnit2_Framework_Test</literal> object, for
          example an instance of the
          <literal>PHPUnit2_Framework_TestSuite</literal> class.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>phpunit UnitTest UnitTest.php</literal></term>
      <listitem>
        <para>
          Runs the tests that are provided by the class
          <literal>UnitTest</literal>. This class is expected to be declared
          in the specified sourcefile.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Code-Coverage</primary></indexterm>
      <term><literal>--coverage-data</literal>, <literal>--coverage-html</literal>, and <literal>--coverage-text</literal></term>
      <listitem>
        <para>
          Control the collection and analysis of Code Coverage information for
          the tests that are run.
          (See <xref linkend="code-coverage-analysis" />.)
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Agile Documentation</primary></indexterm>
      <term><literal>--testdox-html</literal> and <literal>--testdox-text</literal></term>
      <listitem>
        <para>
          Generates agile documentation in HTML or plain text format for the
          tests that are run. (See <xref linkend="other-uses-for-tests" />.)
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Logfile</primary></indexterm>
      <term><literal>--log-xml</literal></term>
      <listitem>
        <para>
          Generates a logfile in XML format for the tests run.
        </para>

        <para>
          The following example shows the XML logfile generated for the tests
          in <literal>ArrayTest</literal>:
        </para>

        <screen><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="ArrayTest" tests="2" failures="0" errors="0" time="0.020026">
    <testcase name="testNewArrayIsEmpty" class="ArrayTest" time="0.014449"/>
    <testcase name="testArrayContainsAnElement" class="ArrayTest" time="0.005577"/>
  </testsuite>
</testsuites>]]></screen>

        <para>
          This XML logfile was generated for two tests,
          <literal>testFailure</literal> and <literal>testError</literal>,
          of a test-case class named <literal>FailureErrorTest</literal> and
          shows how failures and errors are denoted.
        </para>

        <screen><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="FailureErrorTest" tests="2" failures="1" errors="1" time="0.013603">
    <testcase name="testFailure" class="FailureErrorTest" time="0.011872">
      <failure message="" type="PHPUnit2_Framework_AssertionFailedError"></failure>
    </testcase>
    <testcase name="testError" class="FailureErrorTest" time="0.001731">
      <error message="" type="Exception"></error>
    </testcase>
  </testsuite>
</testsuites>
]]></screen>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>PHPUnit2_Runner_TestSuiteLoader</primary></indexterm>
      <term><literal>--loader</literal></term>
      <listitem>
        <para>
          Specifies the <literal>PHPUnit2_Runner_TestSuiteLoader</literal>
          implementation to use.
        </para>

        <para>
          The standard test suite loader will look for the sourcefile in the
          current working directory and in each directory that is specified in
          PHP's <literal>include_path</literal> configuration directive.
          Following the PEAR Naming Conventions, a class name such as
          <literal>Project_Package_Class</literal> is mapped to the
          sourcefile name <filename>Project/Package/Class.php</filename>.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <indexterm><primary>Skeleton Generator</primary></indexterm>
      <indexterm><primary>Incomplete Test</primary></indexterm>
      <term><literal>--skeleton</literal></term>
      <listitem>
        <para>
          Generates a skeleton test-case class <literal>UnitTest</literal>
          (in <filename>UnitTest.php</filename>) for a class
          <literal>Unit</literal> (in <filename>Unit.php</filename>).
          For each method in the original class, there will be an incomplete
          test-case (see <xref linkend="incomplete-tests" />) in the generated
          test-case class.
        </para>

        <para>
          The following example shows how to generate a a skeleton test class
          for a class named <literal>Sample</literal>.
        </para>

        <screen><userinput>phpunit --skeleton Sample</userinput>
PHPUnit 2.3.0 by Sebastian Bergmann.

Wrote test class skeleton for Sample to SampleTest.php.

<userinput>phpunit SampleTest</userinput>
PHPUnit 2.3.0 by Sebastian Bergmann.

I

Time: 0.007268
There was 1 incomplete test case:
1) testSampleMethod(SampleTest)

OK, but incomplete test cases!!!
Tests run: 1, incomplete test cases: 1.</screen>

        <para>
          When you are writing tests for existing code, you have to write the
          same code fragments as in the following example: <programlisting>public function testSampleMethod() {
}</programlisting> over and over again. PHPUnit can help you by analyzing the
          existing code and generating a skeleton test-case class for it.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><literal>--wait</literal></term>
      <listitem>
        <para>
          Waits for a keystroke after each test. This is useful if you are
          running the tests in a window that stays open only as long as the
          test runner is active.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <note>
    <para>
      When the tested code contains PHP syntax errors the TextUI test runner
      might exit without printing error information. The standard test suite
      loader will check the test suite sourcefile for PHP syntax errors, but
      not sourcefiles included by the test suite sourcefile. Future versions
      of PHPUnit will solve this issue by using a sandboxed PHP interpreter.
    </para>
  </note>
</chapter>
