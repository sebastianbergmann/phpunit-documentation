<?xml version="1.0" encoding="utf-8" ?>

<chapter id="incomplete-and-skipped-tests">
  <title>Tests incomplets et sautés</title>

  <section id="incomplete-and-skipped-tests.incomplete-tests">
    <title>Tests incomplets</title>

    <para>
      Quand vous travaillez sur une nouvelle classe de cas de test, vous pourriez vouloir
      commencer en écrivant des méthodes de test vides comme : <programlisting>public function testQuelquechose()
{
}</programlisting> pour garder la trace des tests que vous avez à écrire. Le problème avec
      les méthodes de test vides est qu'elles sont interprétées comme étant réussies par le
      framework PHPUnit. Cette mauvaise interprétation fait que le rapport de tests devient
      inutile -- vous ne pouvez pas voir si un test est effectivement réussi ou s'il n'a tout
      simplement pas été implémenté. Appeler
      <literal>$this->fail()</literal> dans une méthode de test non implémentée
      n'aide pas davantage, puisqu'alors le test sera interprété comme étant un échec.
      Ce serait tout aussi faux que d'interpréter un test non implémenté
      comme étant réussi.
    </para>

    <para>
      <indexterm><primary>Test incomplet</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_IncompleteTest</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_IncompleteTestError</primary></indexterm>

      Si nous pensons à un test réussi comme à un feu vert et à un échec de test
      comme à un feu rouge, nous avons besoin d'un feu orange additionnel pour signaler
      un test comme étant incomplet ou pas encore implémenté.
      <literal>PHPUnit_Framework_IncompleteTest</literal> est une interface de marquage
      pour signaler une exception qui est levée par une méthode de test comme résultat
      d'un test incomplet ou pas encore implémenté.
      <literal>PHPUnit_Framework_IncompleteTestError</literal> est l'implémentation
      standard de cette interface.
    </para>

    <para>
      <xref linkend="incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php" />
      montre une classe de cas de tests, <literal>SampleTest</literal>, qui contient une unique méthode de
      test, <literal>testSomething()</literal>. En appelant la méthode pratique
      <literal>markTestIncomplete()</literal> (qui lève automatiquement
      une exception <literal>PHPUnit_Framework_IncompleteTestError</literal>)
      dans la méthode de test, nous marquons le test comme étant incomplet.
    </para>

    <example id="incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php">
      <title>Signaler un test comme incomplet</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class SampleTest extends TestCase
{
    public function testSomething()
    {
        // Optional: Test anything here, if you want.
        $this->assertTrue(true, 'This should already work.');

        // Stop here and mark this test as incomplete.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
?>]]></programlisting>
    </example>

    <para>
      Un test incomplet est signalé par un <literal>I</literal> sur la sortie écran
      du lanceur de test en ligne de commandes PHPUnit, comme montré dans l'exemple
      suivant :
    </para>

    <screen><userinput>phpunit --verbose SampleTest</userinput>
PHPUnit 6.1.0 by Sebastian Bergmann and contributors.

I

Time: 0 seconds, Memory: 3.95Mb

There was 1 incomplete test:

1) SampleTest::testSomething
This test has not been implemented yet.

/home/sb/SampleTest.php:12
OK, but incomplete or skipped tests!
Tests: 1, Assertions: 1, Incomplete: 1.</screen>

    <para>
      <xref linkend="incomplete-and-skipped-tests.incomplete-tests.tables.api" />
      montre l'API pour marquer des tests comme incomplets.
    </para>

    <table id="incomplete-and-skipped-tests.incomplete-tests.tables.api">
      <title>API pour les tests incomplets</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Méthode</entry>
            <entry>Signification</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void markTestIncomplete()</literal></entry>
            <entry>Marque le test courant comme incomplet.</entry>
          </row>
          <row>
            <entry><literal>void markTestIncomplete(string $message)</literal></entry>
            <entry>Marque le test courant comme incomplet en utilisant <literal>$message</literal> comme message d'explication.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="incomplete-and-skipped-tests.skipping-tests">
    <title>Sauter des tests</title>

    <para>
      Tous les tests ne peuvent pas être exécutés dans tous les environnements. Considérez,
      par exemple, une couche d'abstraction de base de données qui possède différents pilotes
      pour les différents systèmes de base de données qu'elle gère. Les tests pour le pilote
      MySQL ne peuvent bien sûr être exécutés que si un serveur MySQL est disponible.
    </para>

    <para>
      <xref linkend="incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php" />
      montre une classe de cas de tests, <literal>DatabaseTest</literal>, qui contient une méthode de tests
      <literal>testConnection()</literal>. Dans le patron de méthode <literal>setUp()</literal>
      de la classe du cas de test, nous pouvons contrôler si l'extension
      MySQLi est disponible et utiliser la méthode <literal>markTestSkipped()</literal>
      pour sauter le test si ce n'est pas le cas.
    </para>

    <example id="incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php">
      <title>Sauter un test</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class DatabaseTest extends TestCase
{
    protected function setUp()
    {
        if (!extension_loaded('mysqli')) {
            $this->markTestSkipped(
              'The MySQLi extension is not available.'
            );
        }
    }

    public function testConnection()
    {
        // ...
    }
}
?>]]></programlisting>
    </example>

    <para>
      Un test qui a été sauté est signalé par un <literal>S</literal> dans la sortie
      écran du lanceur de tests en ligne de commande PHPUnit, comme montré dans
      l'exemple suivant.
    </para>

    <screen><userinput>phpunit --verbose DatabaseTest</userinput>
PHPUnit 6.1.0 by Sebastian Bergmann and contributors.

S

Time: 0 seconds, Memory: 3.95Mb

There was 1 skipped test:

1) DatabaseTest::testConnection
The MySQLi extension is not available.

/home/sb/DatabaseTest.php:9
OK, but incomplete or skipped tests!
Tests: 1, Assertions: 0, Skipped: 1.</screen>

    <para>
      <xref linkend="incomplete-and-skipped-tests.skipped-tests.tables.api" />
      montre l'API pour sauter des tests.
    </para>

    <table id="incomplete-and-skipped-tests.skipped-tests.tables.api">
      <title>API pour sauter des tests</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Méthode</entry>
            <entry>Signification</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void markTestSkipped()</literal></entry>
            <entry>Marque le test courant comme sauté.</entry>
          </row>
          <row>
            <entry><literal>void markTestSkipped(string $message)</literal></entry>
            <entry>Marque le test courant comme étant sauté en utilisant <literal>$message</literal> comme message d'explication.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="incomplete-and-skipped-tests.skipping-tests-using-requires">
    <title>Sauter des tests en utilisant @requires</title>

    <para>
      En plus des méthodes ci-dessus, il est également possible d'utiliser
      l'annotation <literal>@requires</literal> pour exprimer les préconditions communes pour un cas de test.
    </para>

    <table id="incomplete-and-skipped-tests.requires.tables.api">
      <title>Usages possibles de @requires</title>
      <tgroup cols="4" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Type</entry>
            <entry>Valeurs possibles</entry>
            <entry>Exemple</entry>
            <entry>Autre exemple</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>PHP</literal></entry>
            <entry>Tout identifiant de version PHP</entry>
            <entry>@requires PHP 5.3.3</entry>
            <entry>@requires PHP 7.1-dev</entry>
          </row>
          <row>
            <entry><literal>PHPUnit</literal></entry>
            <entry>Tout identifiant de version PHPUnit</entry>
            <entry>@requires PHPUnit 3.6.3</entry>
            <entry>@requires PHPUnit 4.6</entry>
          </row>
          <row>
            <entry><literal>OS</literal></entry>
            <entry>Une expression regulière qui match <ulink url="http://php.net/manual/en/reserved.constants.php#constant.php-os">PHP_OS</ulink></entry>
            <entry>@requires OS Linux</entry>
            <entry>@requires OS WIN32|WINNT</entry>
          </row>
          <row>
            <entry><literal>function</literal></entry>
            <entry>Tout paramètre valide pour <ulink url="http://php.net/function_exists">function_exists</ulink></entry>
            <entry>@requires function imap_open</entry>
            <entry>@requires function ReflectionMethod::setAccessible</entry>
          </row>
          <row>
            <entry><literal>extension</literal></entry>
            <entry>Tout nom d'extension</entry>
            <entry>@requires extension mysqli</entry>
            <entry>@requires extension redis 2.2.0</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <example id="incomplete-and-skipped-tests.skipping-tests.examples.DatabaseClassSkippingTest.php">
      <title>Sauter des cas de tests en utilisant @requires</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

/**
 * @requires extension mysqli
 */
class DatabaseTest extends TestCase
{
    /**
     * @requires PHP 5.3
     */
    public function testConnection()
    {
        // Test requires the mysqli extension and PHP >= 5.3
    }

    // ... All other tests require the mysqli extension
}
?>]]></programlisting>
    </example>

 	  <para>
		  Si vous utilisez une syntaxe qui ne compile pas avec une version données de PHP, regardez
      dans la configuration xml pour les inclusions dépendant de la version dans <xref linkend="appendixes.configuration.testsuites" />
    </para>
  </section>

</chapter>
