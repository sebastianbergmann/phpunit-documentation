<?xml version="1.0" encoding="utf-8" ?>

<chapter id="fixtures">
  <title>Fixtures</title>

  <para>
    <indexterm><primary>Fixture</primary></indexterm>

    L'une des parties les plus consommatrices en temps lors de l'écriture
    de tests est d'écrire le code pour configurer le monde dans un état connu
    puis de le remettre dans son état initial quand le test est terminé. Cet état
    connu est appelé la <emphasis>fixture</emphasis> du test.
  </para>

  <para>
    Dans <xref linkend="writing-tests-for-phpunit.examples.StackTest.php" />, la
    fixture était simplement le tableau sauvegardé dans la variable <literal>$fixture</literal>.
    La plupart du temps, cependant, la fixture sera beaucoup plus complexe
    qu'un simple tableau, et le volume de code nécessaire pour la mettre en place
    croîtra dans les mêmes proportions. Le contenu effectif du test sera perdu
    dans le bruit de configuration de la fixture. Ce problème s'aggrave quand 
    vous écrivez plusieurs tests doté de fixtures similaires. Sans l'aide du
    framework de test, nous aurions à dupliquer le code qui configure la fixture
    pour chaque test que nous écrivons.
  </para>

  <para>
    <indexterm><primary>Méthode canevas</primary></indexterm>
    <indexterm><primary>setUp()</primary></indexterm>
    <indexterm><primary>tearDown()</primary></indexterm>

    PHPUnit gère le partage du code de configuration. Avant qu'une méthode de test ne soit
    lancée, une méthode canevas appelée <literal>setUp()</literal> est invoquée.
    <literal>setUp()</literal> est l'endroit où vous créez les objets sur lesquels
    vous allez passer les tests. Une fois que la méthode de test est finie, qu'elle ait
    réussi ou échoué, une autre méthode canevas appelée
    <literal>tearDown()</literal> est invoquée. <literal>tearDown()</literal>
    est l'endroit où vous nettoyez les objets sur lesquels vous avez passé les tests.
  </para>

  <para>
    Dans <xref linkend="writing-tests-for-phpunit.examples.StackTest2.php" /> nous avons
    utilisé la relation producteur-consommateur entre les tests pour partager une fixture. Ce
    n'est pas toujours souhaitable ni même possible. <xref linkend="fixtures.examples.StackTest.php"/>
    montre comme nous pouvons écrire les tests de <literal>PileTest</literal> de telle façon
    que ce n'est pas la fixture elle-même qui est réutilisée mais le code qui l'a créée.
    D'abord nous déclarons la variable d'instance, <literal>$pile</literal>, que nous
    allons utiliser à la place d'une variable locale à la méthode. Puis nous plaçons
    la création de la fixture <literal>tableau</literal> dans la méthode 
    <literal>setUp()</literal>. Enfin, nous supprimons le code redondant des méthodes
    de test et nous utilisons la variable d'instance nouvellement introduite.
    <literal>$this->pile</literal>, à la place de la variable locale à la méthode
    <literal>$pile</literal> avec la méthode d'assertion <literal>assertEquals()</literal>.
  </para>

  <example id="fixtures.examples.StackTest.php">
    <title>Using setUp() to create the stack fixture</title>
    <programlisting><![CDATA[<?php
class PileTest extends PHPUnit_Framework_TestCase
{
    protected $pile;

    protected function setUp()
    {
        $this->pile = array();
    }

    public function testVide()
    {
        $this->assertTrue(empty($this->pile));
    }

    public function testPush()
    {
        array_push($this->pile, 'foo');
        $this->assertEquals('foo', $this->pile[count($this->pile)-1]);
        $this->assertFalse(empty($this->pile));
    }

    public function testPop()
    {
        array_push($this->pile, 'foo');
        $this->assertEquals('foo', array_pop($this->pile));
        $this->assertTrue(empty($this->pile));
    }
}
?>]]></programlisting>
  </example>

  <para>
    <indexterm><primary>Méthode canevas</primary></indexterm>
    <indexterm><primary>setUpBeforeClass()</primary></indexterm>
    <indexterm><primary>setUp()</primary></indexterm>
    <indexterm><primary>tearDown()</primary></indexterm>
    <indexterm><primary>tearDownAfterClass()</primary></indexterm>

    Les méthodes canevas <literal>setUp()</literal> et <literal>tearDown()</literal>
    sont exécutées une fois pour chaque méthode de test (et pour les nouvelles instances)
    de la classe de cas de test.
  </para>

  <para>
    <indexterm><primary>Méthode canevas</primary></indexterm>
    <indexterm><primary>setUpBeforeClass()</primary></indexterm>
    <indexterm><primary>setUp()</primary></indexterm>
    <indexterm><primary>assertPreConditions()</primary></indexterm>
    <indexterm><primary>assertPostConditions()</primary></indexterm>
    <indexterm><primary>tearDown()</primary></indexterm>
    <indexterm><primary>tearDownAfterClass()</primary></indexterm>
    <indexterm><primary>onNotSuccessfulTest()</primary></indexterm>

    De plus, les méthodes canevas <literal>setUpBeforeClass()</literal> et
    <literal>tearDownAfterClass()</literal> sont appelées respectivement avant 
    que le premier test de la classe de cas de test ne soit exécuté et après
    que le dernier test de la classe de test a été exécuté.
  </para>

  <para>
    <indexterm><primary>Méthode canevas</primary></indexterm>

    L'exemple ci-dessous montre toutes les méthodes canevas qui sont disponibles
    dans une classe de cas de test.
  </para>

  <example id="fixtures.examples.TemplateMethodsTest.php">
    <title>Exemple montrant toutes les méthodes canevas disponibles</title>
    <programlisting><![CDATA[<?php
class TemplateMethodsTest extends PHPUnit_Framework_TestCase
{
    public static function setUpBeforeClass()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function setUp()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function assertPreConditions()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    public function testOne()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
        $this->assertTrue(TRUE);
    }

    public function testTwo()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
        $this->assertTrue(FALSE);
    }

    protected function assertPostConditions()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function tearDown()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    public static function tearDownAfterClass()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function onNotSuccessfulTest(Exception $e)
    {
        fwrite(STDOUT, __METHOD__ . "\n");
        throw $e;
    }
}
?>]]></programlisting>
     <screen><userinput>phpunit TemplateMethodsTest</userinput><![CDATA[
PHPUnit 4.3.0 by Sebastian Bergmann.

TemplateMethodsTest::setUpBeforeClass
TemplateMethodsTest::setUp
TemplateMethodsTest::assertPreConditions
TemplateMethodsTest::testOne
TemplateMethodsTest::assertPostConditions
TemplateMethodsTest::tearDown
.TemplateMethodsTest::setUp
TemplateMethodsTest::assertPreConditions
TemplateMethodsTest::testTwo
TemplateMethodsTest::tearDown
TemplateMethodsTest::onNotSuccessfulTest
FTemplateMethodsTest::tearDownAfterClass

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) TemplateMethodsTest::testTwo
Failed asserting that <boolean:false> is true.
/home/sb/TemplateMethodsTest.php:30

FAILURES!
Tests: 2, Assertions: 2, Failures: 1.]]></screen>
  </example>

  <section id="fixtures.more-setup-than-teardown">
    <title>Plus de setUp() que de tearDown()</title>

    <para>
      <literal>setUp()</literal> et <literal>tearDown()</literal> sont sympathiquement
      symétriques en théorie mais pas en pratique. En pratique, vous n'avez besoin 
      d'implémenter <literal>tearDown()</literal> que si vous avez alloué
      des ressources externes telles que des fichiers ou des sockets dans
      <literal>setUp()</literal>. Si votre <literal>setUp()</literal> ne crée simplement
      que de purs objets PHP, vous pouvez généralement ignorer <literal>tearDown()</literal>. 
      Cependant, si vous créez de nombreux objets dans votre <literal>setUp()</literal>, vous
      pourriez vouloir libérer (<literal>unset()</literal>) les variables pointant vers
      ces objets dans votre <literal>tearDown()</literal> de façon à ce qu'ils puissent être
      récupérés par le ramasse-miettes. Le nettoyage des objets de cas de test n'est pas 
      prévisible.
    </para>
  </section>

  <section id="fixtures.variations">
    <title>Variantes</title>

    <para>
      Que se passe-t'il si vous avez deux tests avec deux setups légèrement
      différents ? Il y a deux possibilités :
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Si le code des <literal>setUp()</literal> ne diffère que légèrement, extrayez le
          code qui diffère du code de <literal>setUp()</literal> pour le mettre dans la méthode
          de test.
        </para>
      </listitem>

      <listitem>
        <para>
          Si vous avez vraiment deux <literal>setUp()</literal> différentes, vous
          avez besoin de classes de cas de test différentes. Nommez les classes selon
          les différences constatées dans les setup.
        </para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="fixtures.sharing-fixture">
    <title>Partager les Fixtures</title>

    <para>
      Il existe quelques bonnes raisons pour partager des fixtures entre les tests,
      mais dans la plupart des cas la nécessité de partager une fixture entre plusieurs
      tests résulte d'un problème de conception non résolu.
    </para>

    <para>
      Un bon exemple de fixture qu'il est raisonnable de partager entre plusieurs
      tests est une connexion à une base de données : vous vous connectez une fois
      à la base de données et vous réutilisez cette connexion au lieu d'en créer 
      une nouvelle pour chaque test. Ceci rend vos tests plus rapides.
    </para>

    <para>
      <indexterm><primary>setUpBeforeClass</primary></indexterm>
      <indexterm><primary>tearDownAfterClass</primary></indexterm>

      <xref linkend="fixtures.sharing-fixture.examples.DatabaseTest.php" />
      utilise les méthodes canevas <literal>setUpBeforeClass()</literal> et
      <literal>tearDownAfterClass()</literal> pour respectivement établir la connexion à la 
      base de données avant le premier test de la classe de cas de test et pour
      de déconnecter de la base de données après le dernier test du cas de test.
    </para>

    <example id="fixtures.sharing-fixture.examples.DatabaseTest.php">
      <title>Partager les fixtures entre les tests d'une série de tests</title>
      <programlisting><![CDATA[<?php
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    protected static $dbh;

    public static function setUpBeforeClass()
    {
        self::$dbh = new PDO('sqlite::memory:');
    }

    public static function tearDownAfterClass()
    {
        self::$dbh = NULL;
    }
}
?>]]></programlisting>
    </example>

    <para>
      On n'insistera jamais assez sur le fait que partager les fixtures
      entre les tests réduit la valeur de ces tests. Le problème de conception
      sous-jacent est que les objets ne sont pas faiblement couplés. Vous pourrez
      obtenir de meilleurs résultats en résolvant le problème de conception
      sous-jacent puis en écrivant des tests utilisant des bouchons 
      (voir <xref linkend="test-doubles" />), plutôt qu'en créant
      des dépendances entre les tests à l'exécution et en ignorant l'opportunité
      d'améliorer votre conception.
    </para>
  </section>

  <section id="fixtures.global-state">
    <title>Etat global</title>

    <para>
      <ulink url="http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html">Il est difficile de tester du code qui utilise des singletons.</ulink>
      La même chose est vraie pour le code qui utilise des variables globales. Typiquement,
      le code que vous voulez tester est fortement couplé avec une variable globale et 
      vous ne pouvez pas contrôler sa création. Un problème additionnel réside dans le fait
      qu'un test qui modifie une variable globale peut faire échouer un autre test.
    </para>

    <para>
      En PHP, les variables globales fonctionnent comme ceci :
    </para>

    <itemizedlist>
      <listitem><para>Une variable globale <literal>$foo = 'bar';</literal> est enregistrée comme <literal>$GLOBALS['foo'] = 'bar';</literal>.</para></listitem>
      <listitem><para>La variable <literal>$GLOBALS</literal> est une variable appelée <emphasis>super-globale</emphasis>.</para></listitem>
      <listitem><para>Les variables super-globales sont des variables internes qui sont toujours disponibles dans toutes les portées.</para></listitem>
      <listitem><para>Dans la portée d'une fonction ou d'une méthode, vous pouvez accéder à la variable globale <literal>$foo</literal> soit en accédant directement à <literal>$GLOBALS['foo']</literal> soit en utilisant <literal>global $foo;</literal> pour créer une variable locale faisant référence à la variable globale.</para></listitem>
    </itemizedlist>

    <para>
      A part les variables globales, les attributs statiques des classes font
      également partie de l'état global.
    </para>

    <para>
      <indexterm><primary>Variables globales</primary></indexterm>
      <indexterm><primary>Indépendance des tests</primary></indexterm>

      Par défaut, PHPUnit exécute vos tests de façon à ce que des modifications
      aux variables globales et super-globales (
      <literal>$GLOBALS</literal>,
      <literal>$_ENV</literal>, <literal>$_POST</literal>,
      <literal>$_GET</literal>, <literal>$_COOKIE</literal>,
      <literal>$_SERVER</literal>, <literal>$_FILES</literal>,
      <literal>$_REQUEST</literal>) n'affectent pas les autres tests. Optionnellement,
      cette indépendance peut être étendue aux attributs statiques des classes.
    </para>

    <note>
      <para>
        L'implémentation des opérations de sauvegarde et de restauration des attributs
        statiques des classes nécessite PHP 5.3 (ou supérieur).
      </para>
      <para>
        L'implémentation des opérations de sauvegarde et de restauration des variables
        globales et des attributs statiques des classes utilise 
        <literal>serialize()</literal> et <literal>unserialize()</literal>.
      </para>
      <para>
        Les objets de certaines classes qui sont fournis pas PHP lui-même, tel que
        <literal>PDO</literal> par exemple, ne peuvent pas être sérialisés si bien que
        l'opération de sauvegarde va échouer quand un tel objet sera enregistré dans le tableau
        <literal>$GLOBALS</literal>, par exemple.
      </para>
    </note>

    <para>
      <indexterm><primary><literal>@backupGlobals</literal></primary></indexterm>
      <indexterm><primary><literal>$backupGlobalsBlacklist</literal></primary></indexterm>

      L'annotation <literal>@backupGlobals</literal> qui est discutée dans 
      <xref linkend="appendixes.annotations.backupGlobals"/> peut être utilisée pour 
      contrôler les opérations de sauvegarde et de restauration des variables globales.
      Alternativement, vous pouvez fournir une liste noire des variables globales qui doivent
      être exclues des opérations de sauvegarde et de restauration comme ceci :
      <programlisting>class MonTest extends PHPUnit_Framework_TestCase
{
    protected $backupGlobalsBlacklist = array('globalVariable');

    // ...
}</programlisting>
    </para>

    <note>
      <para>
        Merci de noter que le réglage de l'attribut <literal>$backupGlobalsBlacklist</literal>
        à l'intérieur de la méthode <literal>setUp()</literal>, par exemple, n'a aucun effet.
      </para>
    </note>

    <para>
      <indexterm><primary><literal>@backupStaticAttributes</literal></primary></indexterm>
      <indexterm><primary><literal>$backupStaticAttributesBlacklist</literal></primary></indexterm>

      L'annotation <literal>@backupStaticAttributes</literal> qui est discutée dans 
      <xref linkend="appendixes.annotations.backupStaticAttributes"/> peut être utilisée pour 
      contrôler les opérations de sauvegarde et de restauration des attributs statiques.
      Alternativement, vous pouvez fournir une liste noire des attributs statiques qui doivent
      être exclus des opérations de sauvegarde et de restauration comme ceci :
      <programlisting>class MonTest extends PHPUnit_Framework_TestCase
{
    protected $backupStaticAttributesBlacklist = array(
      'className' => array('attributeName')
    );

    // ...
}</programlisting>
    </para>

    <note>
      <para>
        Merci de noter que le réglage de l'attribut <literal>$backupStaticAttributesBlacklist</literal>
        à l'intérieur de la méthode <literal>setUp()</literal>, par exemple, n'a aucun effet.
      </para>
    </note>
  </section>
</chapter>
