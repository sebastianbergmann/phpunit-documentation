<?xml version="1.0" encoding="utf-8" ?>

<chapter id="installation">
  <title>Instalando PHPUnit</title>

  <section id="installation.requirements">
    <title>Requerimentos</title>

    <para>
      PHPUnit 5.3 requer PHP 5.6; Usar a última versão do PHP é altamente recomendável.
    </para>

    <para>
      PHPUnit requer as extensões <ulink
      url="http://php.net/manual/en/dom.setup.php">dom</ulink> e <ulink
      url="http://php.net/manual/en/json.installation.php">json</ulink>,
      que são normalmente habilitadas por padrão.
    </para>

    <para>
      PHPUnit também requer as extensões
      <ulink
      url="http://php.net/manual/en/pcre.installation.php">pcre</ulink>,
      <ulink
      url="http://php.net/manual/en/reflection.installation.php">reflection</ulink>
      e <ulink url="http://php.net/manual/en/spl.installation.php">spl</ulink>.
      Elas são requeridas pelo núcleo do PHP desde 5.3.0 e normalmente não podem
      ser desabilitadas.
    </para>

    <para>
      A funcionalidade de relatório de cobertura de código requer as extensões
      <ulink url="http://xdebug.org/">Xdebug</ulink> (2.1.3 ou superior) e
      <ulink url="http://php.net/manual/en/tokenizer.installation.php">tokenizer</ulink>.

      Geração de relatórios XML requer a extensão
      <ulink url="http://php.net/manual/en/xmlwriter.installation.php">xmlwriter</ulink>.
    </para>
  </section>

  <section id="installation.phar">
    <title>PHP Archive (PHAR)</title>

    <para>
      A maneira mais fácil de obter o PHPUnit é baixar um <ulink
      url="http://php.net/phar">PHP Archive (PHAR)</ulink> que tem todas dependências
      requeridas (assim como algumas opcionais) do PHPUnit empacotados em um único
      arquivo.
    </para>

    <para>
      A extensão <ulink url="http://php.net/manual/en/phar.installation.php">phar</ulink>
      é requerida para usar PHP Archives (PHAR).
    </para>

    <para>
        A extensão
        <ulink url="http://php.net/manual/en/openssl.installation.php">openssl</ulink>
        é requerida para usar a funcionalidade <literal>--self-update</literal>
        do PHAR.
    </para>

    <para>
      Se a extensão <ulink url="http://suhosin.org/">Suhosin</ulink> está
      habilitada, você precisa permitir a execução dos PHARs em seu
      <literal>php.ini</literal>:

      <screen>
suhosin.executor.include.whitelist = phar
</screen>
    </para>

    <note>
      <para>
        Para baixar de <literal>https://phar.phpunit.de/</literal> você precisa de um
        cliente com suporte a
        <ulink url="http://en.wikipedia.org/wiki/Server_Name_Indication">TLS/SNI</ulink>;
        e.g., wget 1.14 (ou superior).
      </para>
    </note>

    <para>
      Para instalar globalmente o PHAR:
    </para>

    <screen>
<prompt>$</prompt> <userinput>wget https://phar.phpunit.de/phpunit.phar</userinput>
<prompt>$</prompt> <userinput>chmod +x phpunit.phar</userinput>
<prompt>$</prompt> <userinput>sudo mv phpunit.phar /usr/local/bin/phpunit</userinput>
<prompt>$</prompt> <userinput>phpunit --version</userinput>
<computeroutput>PHPUnit x.y.z by Sebastian Bergmann and contributors.</computeroutput>
</screen>

    <para>
      Você pode também usar o arquivo PHAR baixado diretamente:
    </para>

    <screen>
<prompt>$</prompt> <userinput>wget https://phar.phpunit.de/phpunit.phar</userinput>
<prompt>$</prompt> <userinput>php phpunit.phar --version</userinput>
<computeroutput>PHPUnit x.y.z by Sebastian Bergmann and contributors.</computeroutput>
</screen>

    <section id="installation.phar.windows">
      <title>Windows</title>

      <para>
        Instalar globalmente o PHAR envolve o mesmo procedimento de instalar manualmente o
        <ulink url="https://getcomposer.org/doc/00-intro.md#installation-windows">
        Composer no Windows</ulink>:
      </para>

      <orderedlist>
        <listitem>
          <para>
            Crie um diretório para os binários PHP; e.g., <filename>C:\bin</filename>
          </para>
        </listitem>
        <listitem>
          <para>
            Acrescente <userinput>;C:\bin</userinput> à sua variável de ambiente
            <varname>PATH</varname>
            (<ulink url="http://stackoverflow.com/questions/6318156/adding-python-path-on-windows-7">ajuda relacionada</ulink>)
          </para>
        </listitem>
        <listitem>
          <para>
            Baixe <ulink url="https://phar.phpunit.de/phpunit.phar"/> e
            salve o arquivo como <filename>C:\bin\phpunit.phar</filename>
          </para>
        </listitem>
        <listitem>
          <para>
            Abra uma linha de comando (e.g.,
            pressione <keycombo><keycap>Windows</keycap><keycap>R</keycap></keycombo>
            » digite <userinput>cmd</userinput>
            » <keycap>ENTER</keycap>)
          </para>
        </listitem>
        <listitem>
          <para>
            Crie um script de envoltório batch (resulta em
            <filename>C:\bin\phpunit.cmd</filename>):
          </para>
          <screen>
<prompt>C:\Users\username&gt;</prompt> <userinput>cd C:\bin</userinput>
<prompt>C:\bin&gt;</prompt> <userinput>echo @php "%~dp0phpunit.phar" %* &gt; phpunit.cmd</userinput>
<prompt>C:\bin&gt;</prompt> <userinput>exit</userinput>
</screen>
        </listitem>
        <listitem>
          <para>
            Abra uma nova linha de comando e confirme que você pode executar PHPUnit
            de qualquer caminho:
          </para>
          <screen>
<prompt>C:\Users\username&gt;</prompt> <userinput>phpunit --version</userinput>
<computeroutput>PHPUnit x.y.z by Sebastian Bergmann and contributors.</computeroutput>
</screen>
        </listitem>
      </orderedlist>

      <para>
        Para ambientes shell Cygwin e/ou MingW32 (e.g., TortoiseGit), você
        pode pular o passo 5 acima, simplesmente salve o arquivo como
        <filename>phpunit</filename> (sem a extensão <filename>.phar</filename>),
        e torne-o executável via
        <userinput>chmod 775 phpunit</userinput>.
      </para>

    </section>

    <section id="installation.phar.verification">
      <title>Verificando lançamentos do PHAR PHPUnit</title>

      <para>
        Todos lançamentos oficiais do código distribuído pelo Projeto PHPUnit são
        assinados pelo gerenciador de lançamentos para o lançamento. Assinaturas PGP e hashes SHA1
        estão disponíveis para verificação no <ulink
        url="https://phar.phpunit.de/">phar.phpunit.de</ulink>.
      </para>

      <para>
        O exemplo a seguir detalha como a verificação de lançamento funciona. Começamos
        baixando <filename>phpunit.phar</filename> bem como sua
        assinatura PGP independente <filename>phpunit.phar.asc</filename>:
      </para>

      <screen><userinput>wget https://phar.phpunit.de/phpunit.phar</userinput>
<userinput>wget https://phar.phpunit.de/phpunit.phar.asc</userinput></screen>

      <para>
        Queremos verificar o PHP Archive do PHPUnit (<filename>phpunit.phar</filename>)
        contra sua assinatura independente (<filename>phpunit.phar.asc</filename>):
      </para>

      <screen><userinput>gpg phpunit.phar.asc</userinput>
gpg: Signature made Sat 19 Jul 2014 01:28:02 PM CEST using RSA key ID 6372C20A
gpg: Can't check signature: public key not found</screen>

      <para>
        Nós não temos a chave pública do gerenciador de lançamento (<literal>6372C20A</literal>)
        no próprio sistema local. A fim de prosseguir com a verificação nós precisamos
        recuperar a chave pública do gerenciador de lançamentos a partir de um servidor de chaves.
        Um tal servidor é <filename>pgp.uni-mainz.de</filename>. Os servidores de chaves públicas
        são conectados entre si, então você deve ser capaz de se conectar a qualquer servidor de chaves.
      </para>

      <screen><userinput>gpg --keyserver pgp.uni-mainz.de --recv-keys 0x4AA394086372C20A</userinput><![CDATA[
gpg: requesting key 6372C20A from hkp server pgp.uni-mainz.de
gpg: key 6372C20A: public key "Sebastian Bergmann <sb@sebastian-bergmann.de>" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)]]></screen>

      <para>
        Agora recebemos uma chave pública para uma entidade conhecida como "Sebastian
        Bergmann &lt;sb@sebastian-bergmann.de&gt;". Porém, nós não temos nenhuma maneira
        de verificar que essa foi criada pela pessoa conhecida como Sebastian
        Bergmann. Mas, vamos tentar verificar a assinatura de lançamento novamente.
      </para>

      <screen><userinput>gpg phpunit.phar.asc</userinput><![CDATA[
gpg: Signature made Sat 19 Jul 2014 01:28:02 PM CEST using RSA key ID 6372C20A
gpg: Good signature from "Sebastian Bergmann <sb@sebastian-bergmann.de>"
gpg:                 aka "Sebastian Bergmann <sebastian@php.net>"
gpg:                 aka "Sebastian Bergmann <sebastian@thephp.cc>"
gpg:                 aka "Sebastian Bergmann <sebastian@phpunit.de>"
gpg:                 aka "Sebastian Bergmann <sebastian.bergmann@thephp.cc>"
gpg:                 aka "[jpeg image of size 40635]"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: D840 6D0D 8294 7747 2937  7831 4AA3 9408 6372 C20A]]></screen>

      <para>
        Neste ponto, a assinatura é boa, mas não confiamos nesta chave. Uma
        boa assinatura significa que o arquivo não foi adulterado. Porém, devido
        a natureza da criptografia de chave pública, você precisa adicionalmente
        verificar que a chave <literal>6372C20A</literal> foi criada pelo verdadeiro
        Sebastian Bergmann.
      </para>

      <para>
        Qualquer invasor pode criar uma chave pública e enviá-la para os servidores
        de chave pública. Eles podem, então, criar um lançamento malicioso assinado pela
        chave fake. Então, se você tentar verificar a assinatura desse lançamento corrompido,
        terá sucesso por quê a chave não é a chave "verdadeira". Portanto, você
        precisa validar o autenticidade dessa chave. Validar a autenticidade da
        chave pública, no entanto, está fora do escopo desta documentação.
      </para>

      <para>
        Pode ser prudente criar um script shell para gerenciar a instalação do PHPUnit
        que verifica a assinatura GnuPG antes de rodar sua suíte de teste. Por exemplo:
      </para>

      <screen><![CDATA[
#!/usr/bin/env bash
clean=1 # Delete phpunit.phar after the tests are complete?
aftercmd="php phpunit.phar --bootstrap bootstrap.php src/tests"
gpg --fingerprint D8406D0D82947747293778314AA394086372C20A
if [ $? -ne 0 ]; then
    echo -e "\033[33mDownloading PGP Public Key...\033[0m"
    gpg --recv-keys D8406D0D82947747293778314AA394086372C20A
    # Sebastian Bergmann <sb@sebastian-bergmann.de>
    gpg --fingerprint D8406D0D82947747293778314AA394086372C20A
    if [ $? -ne 0 ]; then
        echo -e "\033[31mCould not download PGP public key for verification\033[0m"
        exit
    fi
fi

if [ "$clean" -eq 1 ]; then
    # Let's clean them up, if they exist
    if [ -f phpunit.phar ]; then
        rm -f phpunit.phar
    fi
    if [ -f phpunit.phar.asc ]; then
        rm -f phpunit.phar.asc
    fi
fi

# Let's grab the latest release and its signature
if [ ! -f phpunit.phar ]; then
    wget https://phar.phpunit.de/phpunit.phar
fi
if [ ! -f phpunit.phar.asc ]; then
    wget https://phar.phpunit.de/phpunit.phar.asc
fi

# Verify before running
gpg --verify phpunit.phar.asc phpunit.phar
if [ $? -eq 0 ]; then
    echo
    echo -e "\033[33mBegin Unit Testing\033[0m"
    # Run the testing suite
    `$after_cmd`
    # Cleanup
    if [ "$clean" -eq 1 ]; then
        echo -e "\033[32mCleaning Up!\033[0m"
        rm -f phpunit.phar
        rm -f phpunit.phar.asc
    fi
else
    echo
    chmod -x phpunit.phar
    mv phpunit.phar /tmp/bad-phpunit.phar
    mv phpunit.phar.asc /tmp/bad-phpunit.phar.asc
    echo -e "\033[31mSignature did not match! PHPUnit has been moved to /tmp/bad-phpunit.phar\033[0m"
    exit 1
fi
      ]]></screen>
    </section>
  </section>

  <section id="installation.composer">
    <title>Composer</title>

    <para>
      Simplesmente adicione uma dependência <literal>phpunit/phpunit</literal> ao
      arquivo <literal>composer.json</literal> do projeto se você usa o
      <ulink url="https://getcomposer.org/">Composer</ulink> para gerenciar as
      dependências do seu projeto. Aqui está um exemplo mínimo de um arquivo
      <literal>composer.json</literal> que define apenas uma dependência em desenvolvimento
      do PHPUnit 5.3:
    </para>

    <programlisting><![CDATA[{
    "require-dev": {
        "phpunit/phpunit": "5.3.*"
    }
}]]></programlisting>

    <para>
      Para uma instalação em todo o sistema, você pode rodar:
    </para>

    <screen><userinput>composer global require "phpunit/phpunit=4.6.*"</userinput></screen>

    <para>
      Certifique-se de que você tem <literal>~/.composer/vendor/bin/</literal> em seu
      path.
    </para>
  </section>

  <section id="installation.optional-packages">
    <title>Pacotes adicionais</title>

    <para>
      Os seguintes pacotes opcionais estão disponíveis:
    </para>

    <variablelist>
      <varlistentry>
        <term>
          <literal>PHP_Invoker</literal>
        </term>

        <listitem>
          <para>
            A classe utilitária para invocar callables com um tempo limite. Este pacote é
            requerido para impor limites de tempo de teste no modo estrito.
          </para>

          <para>
            Este pacote está incluso na distribuição PHAR do PHPUnit. Ele pode ser
            instalado via Composer adicionando a seguinte dependência
            <literal>"require-dev"</literal>:
          </para>

          <screen><userinput>"phpunit/php-invoker": "*"</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>DbUnit</literal>
        </term>

        <listitem>
          <para>
            DbUnit porta para PHP/PHPUnit suportar teste de interação de banco de dados.
          </para>

          <para>
            Este pacote está incluso na distribuição PHAR do PHPUnit. Ele pode ser
            instalado via Composer adicionando a seguinte dependência
            <literal>"require-dev"</literal>:
          </para>

          <screen><userinput>"phpunit/dbunit": ">=1.2"</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_Selenium</literal>
        </term>

        <listitem>
          <para>
            Integração Selenium RC para PHPUnit.
          </para>

          <para>
            Este pacote está incluso na distribuição PHAR do PHPUnit. Ele pode ser
            instalado via Composer adicionando a seguinte dependência
            <literal>"require-dev"</literal>:
          </para>

          <screen><userinput>"phpunit/phpunit-selenium": ">=1.2"</userinput></screen>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</chapter>
