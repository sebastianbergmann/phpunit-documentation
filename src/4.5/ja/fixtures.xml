<?xml version="1.0" encoding="utf-8" ?>

<chapter id="fixtures">
  <title>フィクスチャ</title>

  <para>
    <indexterm><primary>Fixture</primary></indexterm>

    テストを記述する際にいちばん時間を食うのは、テストを開始するための事前設定と
    テスト終了後の後始末の処理を書くことです。この事前設定は、テストの
    <emphasis>フィクスチャ</emphasis> と呼ばれます。
  </para>

  <para>
    <xref linkend="writing-tests-for-phpunit.examples.StackTest.php" />
    では、フィクスチャは
    <literal>$stack</literal> という変数に格納された配列だけでした。
    しかし、たいていの場合はフィクスチャはこれより複雑なものとなり、
    それを準備するにはかなりの量のコードが必要です。本来のテストの内容が、
    フィクスチャを設定するためのコードの中に埋もれてしまうことになります。
    この問題は、複数のテストで同じようなフィクスチャを設定する場合により顕著になります。
    テストフレームワークの助けがなければ、
    個々のテストのなかで同じような準備コードを繰り返し書くはめになってしまいます。
  </para>

  <para>
    <indexterm><primary>Template Method (テンプレートメソッド)</primary></indexterm>
    <indexterm><primary>setUp()</primary></indexterm>
    <indexterm><primary>tearDown()</primary></indexterm>

    PHPUnit は、準備用のコードの共有をサポートしています。
    各テストメソッドが実行される前に、<literal>setUp()</literal>
    という名前のテンプレートメソッドが実行されます。<literal>setUp()</literal>
    は、テスト対象のオブジェクトを生成するような処理に使用します。
    テストメソッドの実行が終了すると、それが成功したか否かにかかわらず、
    <literal>tearDown()</literal> という名前の別のテンプレートメソッドが実行されます。
    <literal>tearDown()</literal> では、テスト対象のオブジェクトの後始末などを行います。
  </para>

  <para>
    <xref linkend="writing-tests-for-phpunit.examples.StackTest2.php" />
    producer-consumer の関係を使って複数のテストでフィクスチャを共有しました。
    これは常に要求されるというものではありませんし、常に可能だとも限りません。
    <xref linkend="fixtures.examples.StackTest.php"/> では、
    フィクスチャを再利用するのではなくコードで作成する方式で
    <literal>StackTest</literal> にテストを書く方法をごらんいただきましょう。
    まずインスタンス変数 <literal>$stack</literal> を宣言し、
    メソッドローカル変数のかわりにこれを使うことにします。
    そして、<literal>array</literal> の作成を
    <literal>setUp()</literal> メソッドで行います。
    最後に、冗長なコードをテストメソッドから削除し、
    アサーションメソッド <literal>assertEquals()</literal>
    ではメソッド変数 <literal>$stack</literal> のかわりに
    新たに導入したインスタンス変数 <literal>$this->stack</literal>
    を使うようにします。
  </para>

  <example id="fixtures.examples.StackTest.php">
    <title>setUp() を使用して stack フィクスチャを作成する</title>
    <programlisting><![CDATA[<?php
class StackTest extends PHPUnit_Framework_TestCase
{
    protected $stack;

    protected function setUp()
    {
        $this->stack = array();
    }

    public function testEmpty()
    {
        $this->assertTrue(empty($this->stack));
    }

    public function testPush()
    {
        array_push($this->stack, 'foo');
        $this->assertEquals('foo', $this->stack[count($this->stack)-1]);
        $this->assertFalse(empty($this->stack));
    }

    public function testPop()
    {
        array_push($this->stack, 'foo');
        $this->assertEquals('foo', array_pop($this->stack));
        $this->assertTrue(empty($this->stack));
    }
}
?>]]></programlisting>
  </example>

  <para>
    <indexterm><primary>Template Method</primary></indexterm>
    <indexterm><primary>setUpBeforeClass()</primary></indexterm>
    <indexterm><primary>setUp()</primary></indexterm>
    <indexterm><primary>tearDown()</primary></indexterm>
    <indexterm><primary>tearDownAfterClass()</primary></indexterm>

    テンプレートメソッド <literal>setUp()</literal> および <literal>tearDown()</literal>
    は、テストケースクラスのテストメソッドごとに (そして最初にインスタンスを作成したときに)
    一度ずつ実行されます。
  </para>

  <para>
    <indexterm><primary>Template Method</primary></indexterm>
    <indexterm><primary>setUpBeforeClass()</primary></indexterm>
    <indexterm><primary>setUp()</primary></indexterm>
    <indexterm><primary>assertPreConditions()</primary></indexterm>
    <indexterm><primary>assertPostConditions()</primary></indexterm>
    <indexterm><primary>tearDown()</primary></indexterm>
    <indexterm><primary>tearDownAfterClass()</primary></indexterm>
    <indexterm><primary>onNotSuccessfulTest()</primary></indexterm>

    さらに、テンプレートメソッド <literal>setUpBeforeClass()</literal> および
    <literal>tearDownAfterClass()</literal> が存在します。
    これらはそれぞれ、テストケースクラスの最初のテストメソッドの実行前と
    テストケースクラスの最後のテストの実行後にコールされます。
  </para>

  <para>
    <indexterm><primary>Template Method</primary></indexterm>

    以下の例は、テストケースクラスで使用できるすべてのテンプレートメソッドを示すものです。
  </para>

  <example id="fixtures.examples.TemplateMethodsTest.php">
    <title>利用可能なすべてのテンプレートメソッド</title>
    <programlisting><![CDATA[<?php
class TemplateMethodsTest extends PHPUnit_Framework_TestCase
{
    public static function setUpBeforeClass()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function setUp()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function assertPreConditions()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    public function testOne()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
        $this->assertTrue(TRUE);
    }

    public function testTwo()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
        $this->assertTrue(FALSE);
    }

    protected function assertPostConditions()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function tearDown()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    public static function tearDownAfterClass()
    {
        fwrite(STDOUT, __METHOD__ . "\n");
    }

    protected function onNotSuccessfulTest(Exception $e)
    {
        fwrite(STDOUT, __METHOD__ . "\n");
        throw $e;
    }
}
?>]]></programlisting>
     <screen><userinput>phpunit TemplateMethodsTest</userinput><![CDATA[
PHPUnit 4.5.0 by Sebastian Bergmann and contributors.

TemplateMethodsTest::setUpBeforeClass
TemplateMethodsTest::setUp
TemplateMethodsTest::assertPreConditions
TemplateMethodsTest::testOne
TemplateMethodsTest::assertPostConditions
TemplateMethodsTest::tearDown
.TemplateMethodsTest::setUp
TemplateMethodsTest::assertPreConditions
TemplateMethodsTest::testTwo
TemplateMethodsTest::tearDown
TemplateMethodsTest::onNotSuccessfulTest
FTemplateMethodsTest::tearDownAfterClass

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) TemplateMethodsTest::testTwo
Failed asserting that <boolean:false> is true.
/home/sb/TemplateMethodsTest.php:30

FAILURES!
Tests: 2, Assertions: 2, Failures: 1.]]></screen>
  </example>

  <section id="fixtures.more-setup-than-teardown">
    <title>tearDown() よりも setUp()</title>

    <para>
      <literal>setUp()</literal> と <literal>tearDown()</literal>
      は理屈上では対称的になるはずですが、実際にはそうではありません。実際には、
      <literal>tearDown()</literal> を実装する必要があるのは <literal>setUp()</literal>
      で外部リソース (ファイルやソケットなど) を割り当てた場合のみです。もし
      <literal>setUp()</literal> で単に PHP オブジェクトを作成しただけの場合は、
      一般には <literal>tearDown()</literal> は必要ありません。しかし、もし
      <literal>setUp()</literal> で大量のオブジェクトを作成した場合には、
      それらの後始末をするために <literal>tearDown()</literal> で変数を
      <literal>unset()</literal> したくなることもあるでしょう。
      テストケースオブジェクト自体のガベージコレクションにはあまり意味がありません。
    </para>
  </section>

  <section id="fixtures.variations">
    <title>バリエーション</title>

    <para>
      ふたつのテストがあって、それぞれの setup がほんの少しだけ違う場合にはどうなるでしょう?
      このような場合は、二種類の可能性が考えられます。
    </para>

    <itemizedlist>
      <listitem>
        <para>
          もし <literal>setUp()</literal> の違いがごくわずかなものなら、
          その違う部分を <literal>setUp()</literal>
          からテストメソッドのほうに移動させます。
        </para>
      </listitem>

      <listitem>
        <para>
          <literal>setUp()</literal> の違いが大きければ、
          テストケースクラスを別に分ける必要があります。それぞれのクラスには、
          setup の違いを表す名前をつけます。
        </para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="fixtures.sharing-fixture">
    <title>フィクスチャの共有</title>

    <para>
      複数のテストの間でフィクスチャを共有する利点は、ほとんどありません。
      しかし、設計上の問題などでどうしても
      フィクスチャを共有しなければならないこともあるでしょう。
    </para>

    <para>
      複数のテスト間で共有する意味のあるフィクスチャの例として意味のあるものといえば、
      データベースとの接続でしょう。テストのたびに新しいデータベース接続を毎回作成するのではなく、
      最初にログインした状態を再利用するということです。こうすることで、
      テストの実行時間を短縮できます。
    </para>

    <para>
      <indexterm><primary>setUpBeforeClass</primary></indexterm>
      <indexterm><primary>tearDownAfterClass</primary></indexterm>

      <xref linkend="fixtures.sharing-fixture.examples.DatabaseTest.php" />
      では、テンプレートメソッド <literal>setUpBeforeClass()</literal> および
      <literal>tearDownAfterClass()</literal> を用いて、
      テストケースクラス内の最初のテストを実行する前にデータベースに接続し、
      最後のテストが終わってから接続を切断するようにしています。
    </para>

    <example id="fixtures.sharing-fixture.examples.DatabaseTest.php">
      <title>テストスイートの複数テスト間でのフィクスチャの共有</title>
      <programlisting><![CDATA[<?php
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    protected static $dbh;

    public static function setUpBeforeClass()
    {
        self::$dbh = new PDO('sqlite::memory:');
    }

    public static function tearDownAfterClass()
    {
        self::$dbh = NULL;
    }
}
?>]]></programlisting>
    </example>

    <para>
      このようにフィクスチャを共有することがテストの価値を下げてしまうということを、
      まだうまく伝え切れていないかもしれません。問題なのは、
      各オブジェクトが疎結合になっていないという設計なのです。
      複数が連携しているようなテストを作って設計上の問題から目をそらしてしまうのではなく、
      きちんと設計しなおした上で、スタブ (<xref linkend="test-doubles" /> を参照ください)
      を使用するテストを書くことをお勧めします。
    </para>
  </section>

  <section id="fixtures.global-state">
    <title>グローバルな状態</title>

    <para>
      <ulink url="http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html">singleton
      を使用するコードをテストするのはたいへんです</ulink>。
      同様に、グローバル変数を使うコードのテストもまたたいへんです。
      一般に、テスト対象のコードはグローバル変数と密接に関連しており、
      グローバル変数の内容を制御することはできません。
      さらに別の問題もあって、あるテストの中でグローバル変数を変更してしまうと
      別のテストがうまく動かなくなる可能性があります。
    </para>

    <para>
      PHP では、グローバル変数は次のような動きをします。
    </para>

    <itemizedlist>
      <listitem><para>グローバル変数 <literal>$foo = 'bar';</literal> は、<literal>$GLOBALS['foo'] = 'bar';</literal> として格納される。</para></listitem>
      <listitem><para><literal>$GLOBALS</literal> は<emphasis>スーパーグローバル</emphasis>変数と呼ばれる。</para></listitem>
      <listitem><para>スーパーグローバル変数は組み込みの変数で、すべてのスコープで常に利用できる。</para></listitem>
      <listitem><para>関数やメソッドのスコープでグローバル変数 <literal>$foo</literal> にアクセスするには、直接 <literal>$GLOBALS['foo']</literal> にアクセスするか、あるいは <literal>global $foo;</literal> を用いて (グローバル変数を参照する) ローカル変数を作成する。</para></listitem>
    </itemizedlist>

    <para>
      グローバル変数のほかに、クラスの静的属性もグローバル状態となります。
    </para>

    <para>
      <indexterm><primary>Global Variable</primary></indexterm>
      <indexterm><primary>Test Isolation</primary></indexterm>

      デフォルトでは、PHPUnit がテストを実行する際には、
      グローバル変数やスーパーグローバル変数 (<literal>$GLOBALS</literal>,
      <literal>$_ENV</literal>, <literal>$_POST</literal>,
      <literal>$_GET</literal>, <literal>$_COOKIE</literal>,
      <literal>$_SERVER</literal>, <literal>$_FILES</literal>,
      <literal>$_REQUEST</literal>) への変更が他のテストへの影響を及ぼさないようにします。
      オプションで、この分離をクラスの静的属性まで拡張することもできます。
    </para>

    <note>
      <para>
        グローバル変数やクラスの静的属性のバックアップ・リストアには
        <literal>serialize()</literal> および
        <literal>unserialize()</literal> を使用しています。
      </para>
      <para>
        PHP 組み込みの一部のクラス、たとえば <literal>PDO</literal>
        のオブジェクトはシリアライズできないため、そのようなオブジェクトが
        <literal>$GLOBALS</literal> 配列に格納されている場合はバックアップ操作が失敗します。
      </para>
    </note>

    <para>
      <indexterm><primary><literal>@backupGlobals</literal></primary></indexterm>
      <indexterm><primary><literal>$backupGlobalsBlacklist</literal></primary></indexterm>

      <xref linkend="appendixes.annotations.backupGlobals"/> で説明している
      <literal>@backupGlobals</literal> アノテーションを使用すると、
      グローバル変数のバックアップ・リストア操作を制御することができます。
      あるいは、グローバル変数のブラックリストを指定して、
      その変数だけはバックアップ・リストアの対象から除外することもできます。
      <programlisting>class MyTest extends PHPUnit_Framework_TestCase
{
    protected $backupGlobalsBlacklist = array('globalVariable');

    // ...
}</programlisting>
    </para>

    <note>
      <para>
        <literal>$backupGlobalsBlacklist</literal>
        プロパティをたとえば <literal>setUp()</literal>
        メソッド内で設定しても効果が及びません。
      </para>
    </note>

    <para>
      <indexterm><primary><literal>@backupStaticAttributes</literal></primary></indexterm>
      <indexterm><primary><literal>$backupStaticAttributesBlacklist</literal></primary></indexterm>

      <xref linkend="appendixes.annotations.backupStaticAttributes"/>
      で説明する <literal>@backupStaticAttributes</literal> アノテーションを使うと、
      宣言されたクラス内のすべての static プロパティの値をバックアップしてからテストを始め、
      テストが終わった後でそれらの値を復元することができます。
    </para>

    <para>
      テストが始まる際に、宣言されたすべてのクラスについて処理を行います。テストクラス自身だけではありません。
      処理するのは、クラスの static プロパティだけです。関数の内部の static 変数は対象外です。
    </para>

    <note>
      <para>
        <literal>@backupStaticAttributes</literal> の操作は、テストメソッドの前に実行されます。
        ただし、有効になっている場合だけです。
        先に実行されたテストメソッドの中で static プロパティの値が変更されており、かつそのメソッドでは
        <literal>@backupStaticAttributes</literal> が有効になっていなかった場合、
        バックアップ (そしてリストア) されるのは、先に実行されたメソッドで変更後の値になります。
        もともと宣言されていたデフォルト値ではありません。
        PHP は、static 変数が宣言された当時のデフォルト値を、どこにも記録していないのです。
      </para>
      <para>
        これは、テストの内部で新しく読み込んだ (宣言した) クラスの static プロパティについても同様です。
        この場合も、もともと宣言されていたデフォルト値を、テストの後に復元することはできません。デフォルト値が残っていないからです。
        テスト内で設定された値が、それ以降のテストに持ち越されます。
      </para>
      <para>
        ユニットテストでは、テスト対象の static プロパティの値は、<literal>setUp()</literal>
        で明示的にリセットしておくことを推奨します
        (そして、<literal>tearDown()</literal> でもリセットしておけば、それ以降のテストに影響を及ぼすこともなくなります)。
      </para>
    </note>

    <para>
      static 属性のブラックリストを渡せば、保存と復元の対象からそれらを除外することもできます。
      ブラックリストは、このように指定します。

      <programlisting>
class MyTest extends PHPUnit_Framework_TestCase
{
    protected $backupStaticAttributesBlacklist = array(
      'className' => array('attributeName')
    );

    // ...
}
</programlisting>
    </para>

    <note>
      <para>
        <literal>$backupStaticAttributesBlacklist</literal>
        プロパティをたとえば <literal>setUp()</literal>
        メソッド内で設定しても効果が及びません。
      </para>
    </note>
  </section>
</chapter>
