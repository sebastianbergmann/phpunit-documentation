<?xml version="1.0" encoding="utf-8"?>

<chapter id="selenium">
  <title>PHPUnit 与 Selenium</title>

  <section id="selenium.selenium-rc">
    <title>Selenium Server</title>

    <para>
      <indexterm><primary>Selenium Server</primary></indexterm>

      <ulink url="http://seleniumhq.org/">Selenium Server</ulink>是一个测试工具，它允许用任意主流浏览器为任意 HTTP 网站上的用任意编程语言开发的 web 应用程序编写自动用户界面测试。它通过操作系统来驱动浏览器进程来执行自动测试。Selenium 测试直接运行于某个浏览器中，就和真实用户一样。这些测试既可以用于 <emphasis>验收测试</emphasis>（通过在集成好的系统中执行较高层面的测试而非仅对系统的各个单元分别单独测试。）也可以用于<emphasis>浏览器兼容性测试</emphasis>（通过在不同的操作系统与浏览器上对 web 应用程序进行测试）。</para>

    <para>PHPUnit_Selenium 只支持 Selenium 2.x 服务器的脚本。服务器可以通过从 1.x 就提供的传统 Selenium RC API 访问，也可以从 PHPUnit_Selenium 1.2 用 WebDriver API（部分实现）访问。</para>
    <para>这个决定的原因是 Selenium 2 是向后兼容的，而 Selenium RC 已经不再维护了。</para>

  </section>

  <section id="selenium.installation">
    <title>安装</title>

    <para>首先，安装 Selenium Server：</para>

    <orderedlist>
      <listitem>下载 <ulink url="http://seleniumhq.org/download/">Selenium Server</ulink> 的分发档。</listitem>
      <listitem>将分发档解压，然后将 <filename>selenium-server-standalone-2.9.0.jar</filename>（注意版本后缀） 复制到合适的位置，比如说 <filename>/usr/local/bin</filename>。</listitem>
      <listitem>运行 <userinput>java -jar /usr/local/bin/selenium-server-standalone-2.9.0.jar</userinput> 来启动 Selenium Server 服务器端。</listitem>
    </orderedlist>

    <para>PHPUnit 的 PHAR 分发中已经包含了 PHPUnit_Selenium 组件包。若要通过 Composer 安装此组件包，添加如下 <literal>&quot;require-dev&quot;</literal> 依赖项：</para>

    <screen><userinput>&quot;phpunit/phpunit-selenium&quot;: &quot;&gt;=1.2&quot;</userinput></screen>

    <para>现在可以用 Selenium Server 的客户端/服务器端协议来向它发送命令了。</para>
  </section>

  <section id="selenium.selenium2testcase">
    <title>PHPUnit_Extensions_Selenium2TestCase</title>

    <para>
      <indexterm><primary><literal>PHPUnit_Extensions_Selenium2TestCase</literal></primary></indexterm>通过 <literal>PHPUnit_Extensions_Selenium2TestCase</literal> 测试用例能够使用 WebDriver API（部分实现）。</para>

    <para>
      <xref linkend="selenium.selenium2testcase.examples.WebTest.php"/>展示了如何对 <systemitem role="URL">http://www.example.com/</systemitem> 网站 <literal>&lt;title&gt;</literal> 元素的内容进行测试。</para>
    <example id="selenium.selenium2testcase.examples.WebTest.php">
      <title>PHPUnit_Extensions_Selenium2TestCase 的用法示例</title>
      <programlisting><![CDATA[<?php
class WebTest extends PHPUnit_Extensions_Selenium2TestCase
{
    protected function setUp()
    {
        $this->setBrowser('firefox');
        $this->setBrowserUrl('http://www.example.com/');
    }

    public function testTitle()
    {
        $this->url('http://www.example.com/');
        $this->assertEquals('Example WWW Page', $this->title());
    }

}
?>]]></programlisting>
      <screen><userinput>phpunit WebTest</userinput><![CDATA[
PHPUnit 4.5.0 by Sebastian Bergmann and contributors.

F

Time: 28 seconds, Memory: 3.00Mb

There was 1 failure:

1) WebTest::testTitle
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'Example WWW Page'
+'IANA — Example domains'

/home/giorgio/WebTest.php:13

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen></example>

  <para>Selenium2TestCase 的命令是通过 __call() 来实现的。请参考 <ulink url="https://github.com/sebastianbergmann/phpunit-selenium/blob/master/Tests/Selenium2TestCaseTest.php">the end-to-end test for PHPUnit_Extensions_Selenium2TestCase</ulink> 以获取所有受支持的特性的列表。</para>
  </section>

  <section id="selenium.seleniumtestcase">
    <title>PHPUnit_Extensions_SeleniumTestCase</title>

    <para>
      <indexterm><primary><literal>PHPUnit_Extensions_SeleniumTestCase</literal></primary></indexterm><literal>PHPUnit_Extensions_SeleniumTestCase</literal>  测试用例扩展实现了客户端/服务器端协议来与 Selenium Server 沟通，同时还为 web 测试实现了一些特殊的断言方法。</para>

    <para>
      <xref linkend="selenium.seleniumtestcase.examples.WebTest.php"/>展示了如何对 <systemitem role="URL">http://www.example.com/</systemitem> 网站 <literal>&lt;title&gt;</literal> 元素的内容进行测试。</para>

    <example id="selenium.seleniumtestcase.examples.WebTest.php">
      <title>PHPUnit_Extensions_SeleniumTestCase 的用法示例</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Extensions/SeleniumTestCase.php';

class WebTest extends PHPUnit_Extensions_SeleniumTestCase
{
    protected function setUp()
    {
        $this->setBrowser('*firefox');
        $this->setBrowserUrl('http://www.example.com/');
    }

    public function testTitle()
    {
        $this->open('http://www.example.com/');
        $this->assertTitle('Example WWW Page');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit WebTest</userinput><![CDATA[
PHPUnit 4.5.0 by Sebastian Bergmann and contributors.

F

Time: 9 seconds, Memory: 6.00Mb

There was 1 failure:

1) WebTest::testTitle
Current URL: http://www.iana.org/domains/example/

Failed asserting that 'IANA — Example domains' matches PCRE pattern "/Example WWW Page/".


FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>


    <para>与 <literal>PHPUnit_Framework_TestCase</literal> 类不同，扩展自 <literal>PHPUnit_Extensions_SeleniumTestCase</literal> 的测试用例类必须提供 <literal>setUp()</literal> 方法。这个方法用来配置 Selenium Server 会话。<xref linkend="selenium.seleniumtestcase.tables.seleniumrc-api.setup"/> 中列出了所有用于这方面的方法。</para>

    <table id="selenium.seleniumtestcase.tables.seleniumrc-api.setup">
      <title>Selenium Server API: 设置</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>方法</entry>
            <entry>含义</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void setBrowser(string $browser)</literal></entry>
            <entry>设置用于 Selenium Server 服务器的浏览器。</entry>
          </row>
          <row>
            <entry><literal>void setBrowserUrl(string $browserUrl)</literal></entry>
            <entry>设置测试的基准 URL (base URL)。</entry>
          </row>
          <row>
            <entry><literal>void setHost(string $host)</literal></entry>
            <entry>设定 Selenium Server 服务器连接的主机名。</entry>
          </row>
          <row>
            <entry><literal>void setPort(int $port)</literal></entry>
            <entry>设定 Selenium Server 服务器连接的端口号。</entry>
          </row>
          <row>
            <entry><literal>void setTimeout(int $timeout)</literal></entry>
            <entry>设定 Selenium Server 服务器连接的超时时间。</entry>
          </row>
          <row>
            <entry><literal>void setSleep(int $seconds)</literal></entry>
            <entry>设定 Selenium Server 客户端向 Selenium Server 服务器端发送动作多个命令之间需要休眠的秒数</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>PHPUnit 还可以在 Selenium 测试失败时截屏。要启用这个功能，在测试用例类里设置 <literal>$captureScreenshotOnFailure</literal>、<literal>$screenshotPath</literal> 和 <literal>$screenshotUrl</literal>，如<xref linkend="selenium.seleniumtestcase.examples.WebTest2.php"/>中所示。</para>

    <example id="selenium.seleniumtestcase.examples.WebTest2.php">
      <title>当测试失败时截屏</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Extensions/SeleniumTestCase.php';

class WebTest extends PHPUnit_Extensions_SeleniumTestCase
{
    protected $captureScreenshotOnFailure = TRUE;
    protected $screenshotPath = '/var/www/localhost/htdocs/screenshots';
    protected $screenshotUrl = 'http://localhost/screenshots';

    protected function setUp()
    {
        $this->setBrowser('*firefox');
        $this->setBrowserUrl('http://www.example.com/');
    }

    public function testTitle()
    {
        $this->open('http://www.example.com/');
        $this->assertTitle('Example WWW Page');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit WebTest</userinput><![CDATA[
PHPUnit 4.5.0 by Sebastian Bergmann and contributors.

F

Time: 7 seconds, Memory: 6.00Mb

There was 1 failure:

1) WebTest::testTitle
Current URL: http://www.iana.org/domains/example/
Screenshot: http://localhost/screenshots/334b080f2364b5f11568ee1c7f6742c9.png

Failed asserting that 'IANA — Example domains' matches PCRE pattern "/Example WWW Page/".


FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>

    <para>可以对每个测试都用一组浏览器运行：不要用 <literal>setBrowser()</literal> 来设定单个浏览器，而是在测试用例类里声明一个名称为<literal>$browsers</literal> 的 <literal>public static</literal> 数组。这个数组里的每个项目都描述了一个浏览器配置。这些浏览器可以各自由不同的 Selenium Server 服务器承载。<xref linkend="selenium.seleniumtestcase.examples.WebTest3.php"/> 展示了例子。</para>

    <example id="selenium.seleniumtestcase.examples.WebTest3.php">
      <title>设置多个浏览器配置</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Extensions/SeleniumTestCase.php';

class WebTest extends PHPUnit_Extensions_SeleniumTestCase
{
    public static $browsers = array(
      array(
        'name'    => 'Firefox on Linux',
        'browser' => '*firefox',
        'host'    => 'my.linux.box',
        'port'    => 4444,
        'timeout' => 30000,
      ),
      array(
        'name'    => 'Safari on MacOS X',
        'browser' => '*safari',
        'host'    => 'my.macosx.box',
        'port'    => 4444,
        'timeout' => 30000,
      ),
      array(
        'name'    => 'Safari on Windows XP',
        'browser' => '*custom C:\Program Files\Safari\Safari.exe -url',
        'host'    => 'my.windowsxp.box',
        'port'    => 4444,
        'timeout' => 30000,
      ),
      array(
        'name'    => 'Internet Explorer on Windows XP',
        'browser' => '*iexplore',
        'host'    => 'my.windowsxp.box',
        'port'    => 4444,
        'timeout' => 30000,
      )
    );

    protected function setUp()
    {
        $this->setBrowserUrl('http://www.example.com/');
    }

    public function testTitle()
    {
        $this->open('http://www.example.com/');
        $this->assertTitle('Example Web Page');
    }
}
?>]]></programlisting>
    </example>

    <para>
      <literal>PHPUnit_Extensions_SeleniumTestCase</literal> 可以为通过 Selenium 运行的测试收集代码覆盖率信息：</para>

    <orderedlist>
      <listitem>将 <filename>PHPUnit/Extensions/SeleniumCommon/phpunit_coverage.php</filename> 复制到 web 服务器文档根目录下。</listitem>
      <listitem>在 web 服务器上的 <filename>php.ini</filename> 配置文件中，分别将 <filename>PHPUnit/Extensions/SeleniumCommon/prepend.php</filename> 和 <filename>PHPUnit/Extensions/SeleniumCommon/append.php</filename> 配置为 <literal>auto_prepend_file</literal> 和 <literal>auto_append_file</literal>。</listitem>
      <listitem>在扩展自 <literal>PHPUnit_Extensions_SeleniumTestCase</literal> 的测试用例类中，用 <programlisting>protected $coverageScriptUrl = 'http://host/phpunit_coverage.php';</programlisting> 来配置 <filename>phpunit_coverage.php</filename> 脚本所在的 URL。</listitem>
    </orderedlist>

    <para>
      <xref linkend="selenium.seleniumtestcase.tables.assertions"/> 列出了 <literal>PHPUnit_Extensions_SeleniumTestCase</literal> 所提供的各种断言方法。</para>

    <table id="selenium.seleniumtestcase.tables.assertions">
      <title>断言</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>断言</entry>
            <entry>含义</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void assertElementValueEquals(string $locator, string $text)</literal></entry>
            <entry>当由 <literal>$locator</literal> 所标识的元素的值与给定的 <literal>$text</literal>不等时报告错误。</entry>
          </row>
          <row>
            <entry><literal>void assertElementValueNotEquals(string $locator, string $text)</literal></entry>
            <entry>当由 <literal>$locator</literal> 所标识的元素的值与给定的 <literal>$text</literal>相等时报告错误。</entry>
          </row>
          <row>
            <entry><literal>void assertElementValueContains(string $locator, string $text)</literal></entry>
            <entry>当由 <literal>$locator</literal> 所标识的元素的值不包含给定的 <literal>$text</literal>时报告错误。</entry>
          </row>
          <row>
            <entry><literal>void assertElementValueNotContains(string $locator, string $text)</literal></entry>
            <entry>当由 <literal>$locator</literal> 所标识的元素的值包含给定的 <literal>$text</literal>时报告错误。</entry>
          </row>
          <row>
            <entry><literal>void assertElementContainsText(string $locator, string $text)</literal></entry>
            <entry>当由 <literal>$locator</literal> 所标识的元素不包含给定的 <literal>$text</literal>时报告错误。</entry>
          </row>
          <row>
            <entry><literal>void assertElementNotContainsText(string $locator, string $text)</literal></entry>
            <entry>当由 <literal>$locator</literal> 所标识的元素包含给定的 <literal>$text</literal>时报告错误。</entry>
          </row>
          <row>
            <entry><literal>void assertSelectHasOption(string $selectLocator, string $option)</literal></entry>
            <entry>当给定的选项不可用时报告错误。</entry>
          </row>
          <row>
            <entry><literal>void assertSelectNotHasOption(string $selectLocator, string $option)</literal></entry>
            <entry>当给定的选项可用时报告错误。</entry>
          </row>
          <row>
            <entry><literal>void assertSelected($selectLocator, $option)</literal></entry>
            <entry>当给定的标签未被选定时报告错误。</entry>
          </row>
          <row>
            <entry><literal>void assertNotSelected($selectLocator, $option)</literal></entry>
            <entry>当给定的标签被选定时报告错误。</entry>
          </row>
          <row>
            <entry><literal>void assertIsSelected(string $selectLocator, string $value)</literal></entry>
            <entry>当给定的值未被选定时报告错误。</entry>
          </row>
          <row>
            <entry><literal>void assertIsNotSelected(string $selectLocator, string $value)</literal></entry>
            <entry>当给定的值被选定时报告一个错误。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <xref linkend="selenium.seleniumtestcase.tables.template-methods"/>列出了 <literal>PHPUnit_Extensions_SeleniumTestCase</literal> 的模板方法：</para>

    <table id="selenium.seleniumtestcase.tables.template-methods">
      <title>模板方法</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>方法</entry>
            <entry>含义</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void defaultAssertions()</literal></entry>
            <entry>覆盖本方法来为所有测试用例中的测试执行公用断言。每次向 Selenium Server 服务器发送命令之后都会调用本方法。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>请查看 <ulink url="http://release.seleniumhq.org/selenium-core/1.0.1/reference.html">Selenium 命令文档</ulink>来获得所有可用的命令的参考以及它们的使用方法。</para>
    <para>Selenium 1 命令是通过 __call 来动态实现的。请查看 <ulink url="https://github.com/sebastianbergmann/phpunit-selenium/blob/master/PHPUnit/Extensions/SeleniumTestCase/Driver.php#L410">PHPUnit_Extensions_SeleniumTestCase_Driver::__call() 的 API 文档</ulink> 来获取所有 PHP 侧所支持的所有方法的列表以及它们的参数和返回类型。</para>

    <para>通过使用 <literal>runSelenese($filename)</literal> 方法，可以从 Selenese/HTML 规格来运行 Selenium 测试。此外，通过使用静态属性 <literal>$seleneseDirectory</literal>，可以从包含 Selenese/HTML 文件的目录里自动创建测试对象。PHPUnit 会在指定的目录中的递归查找 <literal>.htm</literal> 文件，并预期这些文件内含 Selenese/HTML。<xref linkend="selenium.seleniumtestcase.examples.WebTest4.php"/> 展示了例子。</para>

    <example id="selenium.seleniumtestcase.examples.WebTest4.php">
      <title>用包含 Selenese/HTML 文件的目录作为测试</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Extensions/SeleniumTestCase.php';

class SeleneseTests extends PHPUnit_Extensions_SeleniumTestCase
{
    public static $seleneseDirectory = '/path/to/files';
}
?>]]></programlisting>
    </example>

    <para>从 Selenium 1.1.1 开始，包含了一个实验性的特性，允许用户在不同测试之间共享会话(session)。唯一支持的情况是当使用单个浏览器时在所有测试间共享会话。在初始启动(bootstrap)文件中调用 <literal>PHPUnit_Extensions_SeleniumTestCase::shareSession(true)</literal> 来启用会话共享。在碰到不成功的测试（失败或不完整）时会话将会重置；用户自行决定如何避免测试之间的互动，可以重设 cookies 或者从被测应用程序登出（通过 tearDown() 方法）。</para>
  </section>
</chapter>