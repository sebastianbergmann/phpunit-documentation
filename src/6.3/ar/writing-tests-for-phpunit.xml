<?xml version="1.0" encoding="utf-8" ?>

<chapter id="writing-tests-for-phpunit">
  <title>Writing Tests for PHPUnit</title>

  <para>
    <indexterm><primary>PHPUnit\Framework\TestCase</primary></indexterm>

    <xref linkend="writing-tests-for-phpunit.examples.StackTest.php" /> shows
    how we can write tests using PHPUnit that exercise PHP's array operations.
    The example introduces the basic conventions and steps for writing tests
    with PHPUnit:
  </para>

  <orderedlist>
    <listitem><para>The tests for a class <literal>Class</literal> go into a class <literal>ClassTest</literal>.</para></listitem>
    <listitem><para><literal>ClassTest</literal> inherits (most of the time) from <literal>PHPUnit\Framework\TestCase</literal>.</para></listitem>
    <listitem><para>The tests are public methods that are named <literal>test*</literal>.</para><para><indexterm><primary>Annotation</primary></indexterm><indexterm><primary>@test</primary></indexterm>Alternatively, you can use the <literal>@test</literal> annotation in a method's docblock to mark it as a test method.</para></listitem>
    <listitem><para>Inside the test methods, assertion methods such as <literal>assertEquals()</literal> (see <xref linkend="appendixes.assertions" />) are used to assert that an actual value matches an expected value.</para></listitem>
  </orderedlist>

  <example id="writing-tests-for-phpunit.examples.StackTest.php">
    <title>Testing array operations with PHPUnit</title>
    <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class StackTest extends TestCase
{
    public function testPushAndPop()
    {
        $stack = [];
        $this->assertEquals(0, count($stack));

        array_push($stack, 'foo');
        $this->assertEquals('foo', $stack[count($stack)-1]);
        $this->assertEquals(1, count($stack));

        $this->assertEquals('foo', array_pop($stack));
        $this->assertEquals(0, count($stack));
    }
}
?>]]></programlisting>
  </example>

  <blockquote>
    <attribution>Martin Fowler</attribution>
    <para>
      Whenever you are tempted to type something into a
      <literal>print</literal> statement or a debugger expression, write it
      as a test instead.
    </para>
  </blockquote>

  <section id="writing-tests-for-phpunit.test-dependencies">
    <title>Test Dependencies</title>

    <blockquote>
      <attribution>Adrian Kuhn et. al.</attribution>
      <para>
        Unit Tests are primarily written as a good practice to help developers
        identify and fix bugs, to refactor code and to serve as documentation
        for a unit of software under test. To achieve these benefits, unit tests
        ideally should cover all the possible paths in a program. One unit test
        usually covers one specific path in one function or method. However a
        test method is not necessary an encapsulated, independent entity. Often
        there are implicit dependencies between test methods, hidden in the
        implementation scenario of a test.
      </para>
    </blockquote>

    <para>
      <indexterm><primary>Test Dependencies</primary></indexterm>

      PHPUnit supports the declaration of explicit dependencies between test
      methods. Such dependencies do not define the order in which the test
      methods are to be executed but they allow the returning of an instance of
      the test fixture by a producer and passing it to the dependent consumers.
    </para>

    <itemizedlist>
      <listitem><para>A producer is a test method that yields its unit under test as return value.</para></listitem>
      <listitem><para>A consumer is a test method that depends on one or more producers and their return values.</para></listitem>
    </itemizedlist>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@depends</primary></indexterm>

      <xref linkend="writing-tests-for-phpunit.examples.StackTest2.php" /> shows
      how to use the <literal>@depends</literal> annotation to express
      dependencies between test methods.
    </para>

    <example id="writing-tests-for-phpunit.examples.StackTest2.php">
      <title>Using the <literal>@depends</literal> annotation to express dependencies</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class StackTest extends TestCase
{
    public function testEmpty()
    {
        $stack = [];
        $this->assertEmpty($stack);

        return $stack;
    }

    /**
     * @depends testEmpty
     */
    public function testPush(array $stack)
    {
        array_push($stack, 'foo');
        $this->assertEquals('foo', $stack[count($stack)-1]);
        $this->assertNotEmpty($stack);

        return $stack;
    }

    /**
     * @depends testPush
     */
    public function testPop(array $stack)
    {
        $this->assertEquals('foo', array_pop($stack));
        $this->assertEmpty($stack);
    }
}
?>]]></programlisting>
    </example>

    <para>
      In the example above, the first test, <literal>testEmpty()</literal>,
      creates a new array and asserts that it is empty. The test then returns
      the fixture as its result. The second test, <literal>testPush()</literal>,
      depends on <literal>testEmpty()</literal> and is passed the result of that
      depended-upon test as its argument. Finally, <literal>testPop()</literal>
      depends upon <literal>testPush()</literal>.
    </para>

    <note>
      <para>
        <indexterm><primary>Annotation</primary></indexterm>
        <indexterm><primary>@depends</primary></indexterm>

        The return value yielded by a producer is passed "as-is" to its
        consumers by default. This means that when a producer returns an object,
        a reference to that object is passed to the consumers. When a copy
        should be used instead of a reference, then <code>@depends clone</code>
        should be used instead of <code>@depends</code>.
      </para>
    </note>

    <para>
      <indexterm><primary>Defect Localization</primary></indexterm>

      To quickly localize defects, we want our attention to be focussed on
      relevant failing tests. This is why PHPUnit skips the execution of a test
      when a depended-upon test has failed. This improves defect localization by
      exploiting the dependencies between tests as shown in
      <xref linkend="writing-tests-for-phpunit.examples.DependencyFailureTest.php" />.
    </para>

    <example id="writing-tests-for-phpunit.examples.DependencyFailureTest.php">
      <title>Exploiting the dependencies between tests</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class DependencyFailureTest extends TestCase
{
    public function testOne()
    {
        $this->assertTrue(false);
    }

    /**
     * @depends testOne
     */
    public function testTwo()
    {
    }
}
?>]]></programlisting>

      <screen><userinput>phpunit --verbose DependencyFailureTest</userinput><![CDATA[
PHPUnit 6.3.0 by Sebastian Bergmann and contributors.

FS

Time: 0 seconds, Memory: 5.00Mb

There was 1 failure:

1) DependencyFailureTest::testOne
Failed asserting that false is true.

/home/sb/DependencyFailureTest.php:6

There was 1 skipped test:

1) DependencyFailureTest::testTwo
This test depends on "DependencyFailureTest::testOne" to pass.


FAILURES!
Tests: 1, Assertions: 1, Failures: 1, Skipped: 1.]]></screen>
    </example>

    <para>
      A test may have more than one <literal>@depends</literal> annotation.
      PHPUnit does not change the order in which tests are executed, you have to
      ensure that the dependencies of a test can actually be met before the test
      is run.
    </para>

    <para>
      A test that has more than one <literal>@depends</literal> annotation
      will get a fixture from the first producer as the first argument, a fixture
      from the second producer as the second argument, and so on.
      See <xref linkend="writing-tests-for-phpunit.examples.MultipleDependencies.php" />
    </para>

    <example id="writing-tests-for-phpunit.examples.MultipleDependencies.php">
      <title>Test with multiple dependencies</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class MultipleDependenciesTest extends TestCase
{
    public function testProducerFirst()
    {
        $this->assertTrue(true);
        return 'first';
    }

    public function testProducerSecond()
    {
        $this->assertTrue(true);
        return 'second';
    }

    /**
     * @depends testProducerFirst
     * @depends testProducerSecond
     */
    public function testConsumer()
    {
        $this->assertEquals(
            ['first', 'second'],
            func_get_args()
        );
    }
}
?>]]></programlisting>

      <screen><userinput>phpunit --verbose MultipleDependenciesTest</userinput><![CDATA[
PHPUnit 6.3.0 by Sebastian Bergmann and contributors.

...

Time: 0 seconds, Memory: 3.25Mb

OK (3 tests, 3 assertions)]]></screen>
    </example>
  </section>

  <section id="writing-tests-for-phpunit.data-providers">
    <title>Data Providers</title>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@dataProvider</primary></indexterm>
      A test method can accept arbitrary arguments. These arguments are to be
      provided by a data provider method (<literal>additionProvider()</literal> in
      <xref linkend="writing-tests-for-phpunit.data-providers.examples.DataTest.php" />).
      The data provider method to be used is specified using the
      <literal>@dataProvider</literal> annotation.
    </para>

    <para>
      A data provider method must be <literal>public</literal> and either return
      an array of arrays or an object that implements the <literal>Iterator</literal>
      interface and yields an array for each iteration step. For each array that
      is part of the collection the test method will be called with the contents
      of the array as its arguments.
    </para>

    <example id="writing-tests-for-phpunit.data-providers.examples.DataTest.php">
      <title>Using a data provider that returns an array of arrays</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class DataTest extends TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this->assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return [
            [0, 0, 0],
            [0, 1, 1],
            [1, 0, 1],
            [1, 1, 3]
        ];
    }
}
?>]]></programlisting>

    <screen><userinput>phpunit DataTest</userinput><![CDATA[
PHPUnit 6.3.0 by Sebastian Bergmann and contributors.

...F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) DataTest::testAdd with data set #3 (1, 1, 3)
Failed asserting that 2 matches expected 3.

/home/sb/DataTest.php:9

FAILURES!
Tests: 4, Assertions: 4, Failures: 1.]]></screen>
    </example>

    <para>
      When using a large number of datasets it's useful to name each one with string key instead of default numeric.
      Output will be more verbose as it'll contain that name of a dataset that breaks a test.
    </para>

    <example id="writing-tests-for-phpunit.data-providers.examples.DataTest1.php">
      <title>Using a data provider with named datasets</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class DataTest extends TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this->assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return [
            'adding zeros'  => [0, 0, 0],
            'zero plus one' => [0, 1, 1],
            'one plus zero' => [1, 0, 1],
            'one plus one'  => [1, 1, 3]
        ];
    }
}
?>]]></programlisting>

    <screen><userinput>phpunit DataTest</userinput><![CDATA[
PHPUnit 6.3.0 by Sebastian Bergmann and contributors.

...F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) DataTest::testAdd with data set "one plus one" (1, 1, 3)
Failed asserting that 2 matches expected 3.

/home/sb/DataTest.php:9

FAILURES!
Tests: 4, Assertions: 4, Failures: 1.]]></screen>
    </example>

    <example id="writing-tests-for-phpunit.data-providers.examples.DataTest2.php">
      <title>Using a data provider that returns an Iterator object</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

require 'CsvFileIterator.php';

class DataTest extends TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this->assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return new CsvFileIterator('data.csv');
    }
}
?>]]></programlisting>

    <screen><userinput>phpunit DataTest</userinput><![CDATA[
PHPUnit 6.3.0 by Sebastian Bergmann and contributors.

...F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) DataTest::testAdd with data set #3 ('1', '1', '3')
Failed asserting that 2 matches expected '3'.

/home/sb/DataTest.php:11

FAILURES!
Tests: 4, Assertions: 4, Failures: 1.]]></screen>
    </example>

    <example id="writing-tests-for-phpunit.data-providers.examples.CsvFileIterator.php">
      <title>The CsvFileIterator class</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class CsvFileIterator implements Iterator {
    protected $file;
    protected $key = 0;
    protected $current;

    public function __construct($file) {
        $this->file = fopen($file, 'r');
    }

    public function __destruct() {
        fclose($this->file);
    }

    public function rewind() {
        rewind($this->file);
        $this->current = fgetcsv($this->file);
        $this->key = 0;
    }

    public function valid() {
        return !feof($this->file);
    }

    public function key() {
        return $this->key;
    }

    public function current() {
        return $this->current;
    }

    public function next() {
        $this->current = fgetcsv($this->file);
        $this->key++;
    }
}
?>]]></programlisting>
    </example>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@dataProvider</primary></indexterm>
      <indexterm><primary>@depends</primary></indexterm>

      When a test receives input from both a <literal>@dataProvider</literal>
      method and from one or more tests it <literal>@depends</literal> on, the
      arguments from the data provider will come before the ones from
      depended-upon tests. The arguments from depended-upon tests will be the
      same for each data set.
      See <xref linkend="writing-tests-for-phpunit.data-providers.examples.DependencyAndDataProviderCombo.php"/>
    </para>

    <example id="writing-tests-for-phpunit.data-providers.examples.DependencyAndDataProviderCombo.php">
      <title>Combination of @depends and @dataProvider in same test</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class DependencyAndDataProviderComboTest extends TestCase
{
    public function provider()
    {
        return [['provider1'], ['provider2']];
    }

    public function testProducerFirst()
    {
        $this->assertTrue(true);
        return 'first';
    }

    public function testProducerSecond()
    {
        $this->assertTrue(true);
        return 'second';
    }

    /**
     * @depends testProducerFirst
     * @depends testProducerSecond
     * @dataProvider provider
     */
    public function testConsumer()
    {
        $this->assertEquals(
            ['provider1', 'first', 'second'],
            func_get_args()
        );
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit --verbose DependencyAndDataProviderComboTest</userinput><![CDATA[
PHPUnit 6.3.0 by Sebastian Bergmann and contributors.

...F

Time: 0 seconds, Memory: 3.50Mb

There was 1 failure:

1) DependencyAndDataProviderComboTest::testConsumer with data set #1 ('provider2')
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
Array (
-    0 => 'provider1'
+    0 => 'provider2'
1 => 'first'
2 => 'second'
)

/home/sb/DependencyAndDataProviderComboTest.php:31

FAILURES!
Tests: 4, Assertions: 4, Failures: 1.
]]></screen>
    </example>

    <note>
      <para>
        <indexterm><primary>Annotation</primary></indexterm>
        <indexterm><primary>@dataProvider</primary></indexterm>
        <indexterm><primary>@depends</primary></indexterm>

        When a test depends on a test that uses data providers, the depending
        test will be executed when the test it depends upon is successful for at
        least one data set. The result of a test that uses data providers cannot
        be injected into a depending test.
      </para>
    </note>

    <note>
      <para>
        <indexterm><primary>Annotation</primary></indexterm>
        <indexterm><primary>@dataProvider</primary></indexterm>
        <indexterm><primary>@depends</primary></indexterm>

        All data providers are executed before both the call to the <literal>setUpBeforeClass</literal>
        static method and the first call to the <literal>setUp</literal> method.
        Because of that you can't access any variables you create there from
        within a data provider. This is required in order for PHPUnit to be able
        to compute the total number of tests.
      </para>
    </note>
  </section>

  <section id="writing-tests-for-phpunit.exceptions">
    <title>Testing Exceptions</title>

    <para>
      <indexterm><primary>Exception</primary></indexterm>
      <indexterm><primary>expectException()</primary></indexterm>

      <xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php" />
      shows how to use the <literal>expectException()</literal> method to test
      whether an exception is thrown by the code under test.
    </para>

    <example id="writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php">
      <title>Using the expectException() method</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class ExceptionTest extends TestCase
{
    public function testException()
    {
        $this->expectException(InvalidArgumentException::class);
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ExceptionTest</userinput>
PHPUnit 6.3.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) ExceptionTest::testException
Expected exception InvalidArgumentException

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>

    <para>
      <indexterm><primary>expectExceptionCode()</primary></indexterm>
      <indexterm><primary>expectExceptionMessage()</primary></indexterm>
      <indexterm><primary>expectExceptionMessageRegExp()</primary></indexterm>

      In addition to the <literal>expectException()</literal> method the
      <literal>expectExceptionCode()</literal>,
      <literal>expectExceptionMessage()</literal>, and
      <literal>expectExceptionMessageRegExp()</literal> methods exist to set up
      expectations for exceptions raised by the code under test.
    </para>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@expectedException</primary></indexterm>

      Alternatively, you can use the <literal>@expectedException</literal>,
      <literal>@expectedExceptionCode</literal>,
      <literal>@expectedExceptionMessage</literal>, and
      <literal>@expectedExceptionMessageRegExp</literal> annotations to set up
      expectations for exceptions raised by the code under test.
      <xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php" />
      shows an example.
    </para>

    <example id="writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php">
      <title>Using the @expectedException annotation</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class ExceptionTest extends TestCase
{
    /**
     * @expectedException InvalidArgumentException
     */
    public function testException()
    {
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ExceptionTest</userinput>
PHPUnit 6.3.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 4.75Mb

There was 1 failure:

1) ExceptionTest::testException
Expected exception InvalidArgumentException

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>
  </section>

  <section id="writing-tests-for-phpunit.errors">
    <title>Testing PHP Errors</title>
    <para>
      <indexterm><primary>Error Handler</primary></indexterm>
      <indexterm><primary>PHP Error</primary></indexterm>
      <indexterm><primary>PHP Notice</primary></indexterm>
      <indexterm><primary>PHP Warning</primary></indexterm>
      <indexterm><primary>PHPUnit\Framework\Error</primary></indexterm>

      By default, PHPUnit converts PHP errors, warnings, and notices that are
      triggered during the execution of a test to an exception. Using these
      exceptions, you can, for instance, expect a test to trigger a PHP error as
      shown in <xref linkend="writing-tests-for-phpunit.exceptions.examples.ErrorTest.php" />.
    </para>

    <note>
      <para>
        PHP's <literal>error_reporting</literal> runtime configuration can
        limit which errors PHPUnit will convert to exceptions. If you are
        having issues with this feature, be sure PHP is not configured to
        suppress the type of errors you're testing.
      </para>
    </note>

    <example id="writing-tests-for-phpunit.exceptions.examples.ErrorTest.php">
      <title>Expecting a PHP error using @expectedException</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class ExpectedErrorTest extends TestCase
{
    /**
     * @expectedException PHPUnit\Framework\Error
     */
    public function testFailingInclude()
    {
        include 'not_existing_file.php';
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit -d error_reporting=2 ExpectedErrorTest</userinput>
PHPUnit 6.3.0 by Sebastian Bergmann and contributors.

.

Time: 0 seconds, Memory: 5.25Mb

OK (1 test, 1 assertion)</screen>
    </example>

    <para>
      <indexterm><primary>PHPUnit\Framework\Error\Notice</primary></indexterm>
      <indexterm><primary>PHPUnit\Framework\Error\Warning</primary></indexterm>

      <literal>PHPUnit\Framework\Error\Notice</literal> and
      <literal>PHPUnit\Framework\Error\Warning</literal> represent PHP notices
      and warnings, respectively.
    </para>

    <note>
      <para>
        You should be as specific as possible when testing exceptions. Testing
        for classes that are too generic might lead to undesirable
        side-effects. Accordingly, testing for the <literal>Exception</literal>
        class with <literal>@expectedException</literal> or
        <literal>setExpectedException()</literal> is no longer permitted.
      </para>
    </note>

    <para>
        When testing that relies on php functions that trigger errors like
        <literal>fopen</literal> it can sometimes be useful to use error
        suppression while testing. This allows you to check the return values by
        suppressing notices that would lead to a phpunit
        <literal>PHPUnit\Framework\Error\Notice</literal>.
        <example id="writing-tests-for-phpunit.exceptions.examples.TriggerErrorReturnValue.php">

            <title>Testing return values of code that uses PHP Errors</title>
            <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class ErrorSuppressionTest extends TestCase
{
    public function testFileWriting() {
        $writer = new FileWriter;
        $this->assertFalse(@$writer->write('/is-not-writeable/file', 'stuff'));
    }
}
class FileWriter
{
    public function write($file, $content) {
        $file = fopen($file, 'w');
        if($file == false) {
            return false;
        }
        // ...
    }
}

?>]]></programlisting>
      <screen><userinput>phpunit ErrorSuppressionTest</userinput>
PHPUnit 6.3.0 by Sebastian Bergmann and contributors.

.

Time: 1 seconds, Memory: 5.25Mb

OK (1 test, 1 assertion)</screen>
        </example>
    Without the error suppression the test would fail reporting
    <literal>fopen(/is-not-writeable/file): failed to open stream:
    No such file or directory</literal>.

    </para>
  </section>

  <section id="writing-tests-for-phpunit.output">
    <title>Testing Output</title>

    <para>
      Sometimes you want to assert that the execution of a method, for
      instance, generates an expected output (via <literal>echo</literal> or
      <literal>print</literal>, for example). The
      <literal>PHPUnit\Framework\TestCase</literal> class uses PHP's
      <ulink url="http://www.php.net/manual/en/ref.outcontrol.php">Output
      Buffering</ulink> feature to provide the functionality that is
      necessary for this.
    </para>

    <para>
      <xref linkend="writing-tests-for-phpunit.output.examples.OutputTest.php" />
      shows how to use the <literal>expectOutputString()</literal> method to
      set the expected output. If this expected output is not generated, the
      test will be counted as a failure.
    </para>

    <example id="writing-tests-for-phpunit.output.examples.OutputTest.php">
      <title>Testing the output of a function or method</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class OutputTest extends TestCase
{
    public function testExpectFooActualFoo()
    {
        $this->expectOutputString('foo');
        print 'foo';
    }

    public function testExpectBarActualBaz()
    {
        $this->expectOutputString('bar');
        print 'baz';
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit OutputTest</userinput>
PHPUnit 6.3.0 by Sebastian Bergmann and contributors.

.F

Time: 0 seconds, Memory: 5.75Mb

There was 1 failure:

1) OutputTest::testExpectBarActualBaz
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'bar'
+'baz'


FAILURES!
Tests: 2, Assertions: 2, Failures: 1.</screen>
    </example>

    <para>
      <xref linkend="writing-tests-for-phpunit.output.tables.api" />
      shows the methods provided for testing output
    </para>

    <table id="writing-tests-for-phpunit.output.tables.api">
      <title>Methods for testing output</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void expectOutputRegex(string $regularExpression)</literal></entry>
            <entry>Set up the expectation that the output matches a <literal>$regularExpression</literal>.</entry>
          </row>
          <row>
            <entry><literal>void expectOutputString(string $expectedString)</literal></entry>
            <entry>Set up the expectation that the output is equal to an <literal>$expectedString</literal>.</entry>
          </row>
          <row>
            <entry><literal>bool setOutputCallback(callable $callback)</literal></entry>
            <entry>Sets up a callback that is used to, for instance, normalize the actual output.</entry>
          </row>
          <row>
            <entry><literal>string getActualOutput()</literal></entry>
            <entry>Get the actual output.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <note>
      <para>
        A test that emits output will fail in strict mode.
      </para>
    </note>
  </section>

  <section id="writing-tests-for-phpunit.error-output">
    <title>Error output</title>

    <para>
      Whenever a test fails PHPUnit tries its best to provide you with as much
      context as possible that can help to identify the problem.
    </para>

    <example id="writing-tests-for-phpunit.error-output.examples.ArrayDiffTest.php">
      <title>Error output generated when an array comparison fails</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class ArrayDiffTest extends TestCase
{
    public function testEquality() {
        $this->assertEquals(
            [1, 2,  3, 4, 5, 6],
            [1, 2, 33, 4, 5, 6]
        );
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ArrayDiffTest</userinput><![CDATA[
PHPUnit 6.3.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) ArrayDiffTest::testEquality
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
 Array (
     0 => 1
     1 => 2
-    2 => 3
+    2 => 33
     3 => 4
     4 => 5
     5 => 6
 )

/home/sb/ArrayDiffTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
    <para>
      In this example only one of the array values differs and the other values
      are shown to provide context on where the error occurred.
    </para>

    <para>
      When the generated output would be long to read PHPUnit will split it up
      and provide a few lines of context around every difference.
    </para>
    <example id="writing-tests-for-phpunit.error-output.examples.LongArrayDiffTest.php">
      <title>Error output when an array comparison of an long array fails</title>
      <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class LongArrayDiffTest extends TestCase
{
    public function testEquality() {
        $this->assertEquals(
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2,  3, 4, 5, 6],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 33, 4, 5, 6]
        );
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit LongArrayDiffTest</userinput><![CDATA[
PHPUnit 6.3.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) LongArrayDiffTest::testEquality
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
     13 => 2
-    14 => 3
+    14 => 33
     15 => 4
     16 => 5
     17 => 6
 )


/home/sb/LongArrayDiffTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
    </example>
    <section id="writing-tests-for-phpunit.error-output.edge-cases">
      <title>Edge cases</title>

      <para>
        When a comparison fails PHPUnit creates textual representations of the
        input values and compares those. Due to that implementation a diff
        might show more problems than actually exist.
      </para>

      <para>
        This only happens when using assertEquals or other 'weak' comparison
        functions on arrays or objects.
      </para>

      <example id="writing-tests-for-phpunit.error-output.edge-cases.examples.ArrayWeakComparisonTest.php">
        <title>Edge case in the diff generation when using weak comparison</title>
        <programlisting><![CDATA[<?php
use PHPUnit\Framework\TestCase;

class ArrayWeakComparisonTest extends TestCase
{
    public function testEquality() {
        $this->assertEquals(
            [1, 2, 3, 4, 5, 6],
            ['1', 2, 33, 4, 5, 6]
        );
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ArrayWeakComparisonTest</userinput><![CDATA[
PHPUnit 6.3.0 by Sebastian Bergmann and contributors.

F

Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) ArrayWeakComparisonTest::testEquality
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ @@
 Array (
-    0 => 1
+    0 => '1'
     1 => 2
-    2 => 3
+    2 => 33
     3 => 4
     4 => 5
     5 => 6
 )


/home/sb/ArrayWeakComparisonTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>

      </example>
      <para>
        In this example the difference in the first index between
        <literal>1</literal> and <literal>'1'</literal> is
        reported even though assertEquals considers the values as a match.
      </para>

    </section>
  </section>
</chapter>
