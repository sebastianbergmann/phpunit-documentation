<?xml version="1.0" encoding="utf-8" ?>

<chapter id="automating-tests">
  <title>Automatiser les tests</title>

  <para>
    Même les bons programmeurs font des erreurs. La différence entre un bon
    programmeur et un mauvais est que le bon programmeur utilise des tests
    pour détecter ses erreurs dès que possible. Plus vite vous faites des tests
    pour trouver une erreur, plus grandes sont vos chances de la trouver et 
    moins la recherche et la correction vous coûteront cher. Ceci explique
    pourquoi repousser les tests juste avant la livraison d'un logiciel est
    tellement problématique. La plupart des erreurs ne seront pas trouvées
    du tout et le coût pour corriger celles qui auront été trouvées sera tel
    que vous devrez faire des choix car vous ne pourrez pas les corriger toutes.
  </para>

  <para>
    <indexterm><primary>Tests unitaires</primary></indexterm>

    Tester avec PHPUnit n'est pas une activité totalement différente de ce
    vous faites probablement déjà. C'est juste une façon différente de la 
    réaliser. La différence se situe entre <emphasis>tester</emphasis>, c'est-à-dire,
    contrôler que votre programme se comporte de la façon attendue, et <emphasis>réaliser une batterie
    de tests</emphasis>, morceaux de code exécutables qui testent automatiquement 
    la justesse de parties (unités) du logiciel. Ces morceaux de code exécutables
    sont appelés tests unitaires.
  </para>

  <para>
    Dans ce chapitre, nous partirons du simple code de test à base de <literal>print</literal>
    pour aboutir au test totalement automatisé. Imaginez qu'il vous a été demandé de
    tester le <literal>array</literal> de PHP (tableau). Parmi les fonctionnalités à tester se 
    trouve la fonction <literal>count()</literal>. Pour un tableau nouvellement créé,
    nous attendons que la fonction <literal>count()</literal> retourne 
    <literal>0</literal>. Après avoir ajouté un élément, <literal>count()</literal>
    doit retourner <literal>1</literal>.
    <xref linkend="automating-tests.examples.array-test.php" /> montre ce que 
    nous voulons tester.
  </para>

  <example id="automating-tests.examples.array-test.php">
    <title>Tester les opérations sur les tableaux</title>
    <programlisting><![CDATA[<?php
$fixture = array();
// $fixture doit être vide.

$fixture[] = 'element';
// $fixture doit contenir un élément.
?>]]></programlisting>
  </example>

  <para>
    Un moyen vraiment simple de contrôler que nous obtenons les résultats
    que nous attendons consiste à afficher le résultat de 
    <literal>count()</literal> avant et après l'ajout de l'élément (voir
    <xref linkend="automating-tests.examples.array-test2.php" />).
    Si nous obtenons <literal>0</literal> puis <literal>1</literal>,
    <literal>array</literal> et <literal>count()</literal> se comportent comme 
    espéré.
  </para>

  <example id="automating-tests.examples.array-test2.php">
    <title>Utiliser print pour tester les opérations sur les tableaux</title>
    <programlisting><![CDATA[<?php
$fixture = array();
print count($fixture) . "\n";

$fixture[] = 'element';
print count($fixture) . "\n";
?>]]></programlisting>
    <screen>0
1</screen>
  </example>

  <para>
    Maintenant, nous aimerions passer de tests qui nécessitent une interprétation manuelle
    à des tests qui sont exécutés automatiquement. Dans
    <xref linkend="automating-tests.examples.array-test3.php" />, nous écrivons 
    la comparaison entre les valeurs attendues et constatées dans le code de test et nous
    affichons <literal>ok</literal> si ces valeurs sont égales. Si jamais nous voyons un message 
    <literal>not ok</literal>, nous savons que quelque chose ne va pas.
  </para>

  <example id="automating-tests.examples.array-test3.php">
    <title>Comparer les valeurs attendues et constatées pour tester les opérations sur les tableaux</title>
    <programlisting><![CDATA[<?php
$fixture = array();
print count($fixture) == 0 ? "ok\n" : "not ok\n";

$fixture[] = 'element';
print count($fixture) == 1 ? "ok\n" : "not ok\n";
?>]]></programlisting>
    <screen>ok
ok</screen>
  </example>

  <para>
    <indexterm><primary>Assertions</primary></indexterm>

    Nous factorisons maintenant la comparaison des valeurs attendues et constatées
    dans une fonction qui lève une Exception quand il y a non correspondance
    (<xref linkend="automating-tests.examples.array-test4.php" />). Ceci 
    nous offre deux avantages : l'écriture de tests devient plus facile et nous 
    n'avons de message que quand il y a un problème.
  </para>

  <example id="automating-tests.examples.array-test4.php">
    <title>Utiliser une fonction d'assertion pour tester les opérations sur les tableaux</title>
    <programlisting><![CDATA[<?php
$fixture = array();
assertTrue(count($fixture) == 0);

$fixture[] = 'element';
assertTrue(count($fixture) == 1);

function assertTrue($condition)
{
    if (!$condition) {
        throw new Exception('Assertion en échec.');
    }
}
?>]]></programlisting>
  </example>

  <para>
    <indexterm><primary>Tests automatisés</primary></indexterm>

    Le test est maintenant complètement automatisé. Au lieu de simplement
    <emphasis>tester</emphasis> comme nous le faisions dans notre première version,
    avec cette version, nous avons un <emphasis>test automatisé</emphasis>.
  </para>

  <para>
    L'objectif en utilisant des tests automatisés et de faire moins d'erreurs. Tant que
    votre code ne sera pas parfait, même avec d'excellents tests, vous constaterez
    certainement une réduction drastique des défauts dès que vous commencerez à utiliser
    des tests automatisés. Les tests automatisés vous donnent une confiance justifiée en votre code.
    Vous pouvez mettre à profit cette confiance pour faire évoluer de façon plus audacieuse votre conception
    (refactoring), mieux collaborer avec les autres membres de votre équipe (tests communs à l'équipe),
    améliorer les relations avec vos clients et rentrer chez vous tous les soirs avec la
    preuve que le système est meilleur maintenant qu'il ne l'était ce matin grâce à vos
    efforts.
  </para>
</chapter>
