<?xml version="1.0" encoding="utf-8" ?>

<chapter id="api">
  <title>PHPUnit API</title>

  <para>
    たいていの場合は、PHPUnit の API は単純なものです。単に
    <literal>PHPUnit_Framework_TestCase</literal> を継承したテストケースを作成し、
    <literal>assertTrue()</literal> あるいは <literal>assertEquals()</literal>
    をコールすればよいのです。しかし、PHPUnit をより深く知りたい方のために、
    ここではすべてのクラスおよび公開メソッドを説明します。
  </para>

  <section id="api.overview">
    <title>概要</title>

    <para>
      ほとんどの場合、PHPUnit を使用する際には以下の
      5 つのクラスやインターフェイスに出会うことになるでしょう。
    </para>

    <variablelist>
      <varlistentry>
        <term><literal>PHPUnit_Framework_Assert</literal></term>
        <listitem>
          <para>
          実際の値が想定した値どおりかどうかを調べるための静的メソッドを集めたもの。
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>PHPUnit_Framework_Test</literal></term>
        <listitem>
          <para>
            テストケースとして動作するすべてのオブジェクトのインターフェイス。
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>PHPUnit_Framework_TestCase</literal></term>
        <listitem>
          <para>
            ひとつのテスト。
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>PHPUnit_Framework_TestSuite</literal></term>
        <listitem>
          <para>
            テストの集まり。
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>PHPUnit_Framework_TestResult</literal></term>
        <listitem>
          <para>
           ひとつあるいは複数のテストの実行結果をまとめたもの。
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>
      PHPUnit の、5 つの基本クラス/インターフェイスである
      <literal>PHPUnit_Framework_Assert</literal>、
      <literal>PHPUnit_Framework_Test</literal>、
      <literal>PHPUnit_Framework_TestCase</literal>、
      <literal>PHPUnit_Framework_TestSuite</literal> およびand
      <literal>PHPUnit_Framework_TestResult</literal> の関係を
      <xref linkend="api.overview.figures.PHPUnit_Framework.png" />
      に示します。
    </para>

    <figure id="api.overview.figures.PHPUnit_Framework.png">
      <title>PHPUnit の 5 つの基本クラス/インターフェイス</title>

      <graphic fileref="figures/PHPUnit_Framework.png" />
    </figure>
  </section>

  <section id="api.assert">
    <title>PHPUnit_Framework_Assert</title>
    <indexterm><primary>PHPUnit_Framework_Assert</primary></indexterm>

    <para>
      <indexterm><primary>Assertions</primary></indexterm>
      <indexterm><primary>Design-by-Contract (規約による設計)</primary></indexterm>

      PHPUnit 用に書かれたテストケースのほとんどは、間接的に
      <literal>PHPUnit_Framework_Assert</literal>
      を継承しています。ここには、
      値を自動的にチェックして矛盾を報告するためのメソッドが含まれています。
      これらのメソッドは静的に宣言されているので、
      あなたが作成したメソッドの中で「規約による設計」方式のアサーションを使用し、
      PHPUnit に結果を報告させることができます
      (<xref linkend="api.assert.examples.Sample.php" /> を参照ください)。
    </para>

    <example id="api.assert.examples.Sample.php">
      <title>「規約による設計」方式のアサーション</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';

class Sample
{
    public function aSampleMethod($object)
    {
        PHPUnit_Framework_Assert::assertNotNull($object);
    }
}

$sample = new Sample;
$sample->aSampleMethod(NULL);
?>]]></programlisting>

<screen><![CDATA[Fatal error: Uncaught exception 'PHPUnit_Framework_ExpectationFailedException'
with message 'Failed asserting that <null> is not identical to <null>'.]]></screen>
    </example>

    <para>
      しかし、ほとんどの場合はこれらのアサーションはテストの中で行います。
    </para>

    <para>
      各アサーションメソッドには 2 種類の方式があります。
      エラー時に表示されるメッセージをパラメータとして指定する方法としない方法です。
      オプションで指定したメッセージは、通常はテストが失敗したことが報告される場面で
      表示されます。これにより、デバッグが楽になります。
    </para>

    <example id="api.assert.examples.MessageTest.php">
      <title>メッセージつきのアサーション</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';

class MessageTest extends PHPUnit_Framework_TestCase
{
    public function testMessage()
    {
        $this->assertTrue(FALSE, 'これは独自のメッセージです。');
    }
}
?>]]></programlisting>
    </example>

    <para>
      以下の例は、
      <xref linkend="api.assert.examples.MessageTest.php" /> のテスト
      <literal>testMessage()</literal>
      でメッセージつきのアサーションを使用した場合の出力結果です。
    </para>

    <screen><userinput>phpunit MessageTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) testMessage(MessageTest)
これは独自のメッセージです。
Failed asserting that <boolean:false> is true.
/home/sb/MessageTest.php:8

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>

    <para>
      以下に、すべてのアサーションをまとめます。
    </para>

    <section id="api.assert.assertArrayHasKey">
      <title><literal>assertArrayHasKey()</literal></title>
      <indexterm><primary>assertArrayHasKey()</primary></indexterm>
      <indexterm><primary>assertArrayNotHasKey()</primary></indexterm>
      <para><literal>assertArrayHasKey(mixed $key, array $array[, string $message = ''])</literal></para>
      <para><literal>$array</literal> にキー <literal>$key</literal> が存在しない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertArrayNotHasKey()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <example id="api.assert.assertArrayHasKey.example">
        <title>assertArrayHasKey() の使用法</title>
        <programlisting><![CDATA[<?php
class ArrayHasKeyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertArrayHasKey('foo', array('bar' => 'baz'));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ArrayHasKeyTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) ArrayHasKeyTest::testFailure
Failed asserting that an array has the key <string:foo>.
/home/sb/ArrayHasKeyTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertClassHasAttribute">
      <title><literal>assertClassHasAttribute()</literal></title>
      <indexterm><primary>assertClassHasAttribute()</primary></indexterm>
      <indexterm><primary>assertClassNotHasAttribute()</primary></indexterm>
      <para><literal>assertClassHasAttribute(string $attributeName, string $className[, string $message = ''])</literal></para>
      <para><literal>$className::attributeName</literal> が存在しない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertClassNotHasAttribute()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <example id="api.assert.assertClassHasAttribute.example">
        <title>assertClassHasAttribute() の使用法</title>
        <programlisting><![CDATA[<?php
class ClassHasAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertClassHasAttribute('foo', 'stdClass');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ClassHasAttributeTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) ClassHasAttributeTest::testFailure
Failed asserting that class "stdClass" has attribute "foo".
/home/sb/ClassHasAttributeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertClassHasStaticAttribute">
      <title><literal>assertClassHasStaticAttribute()</literal></title>
      <indexterm><primary>assertClassHasStaticAttribute()</primary></indexterm>
      <indexterm><primary>assertClassNotHasStaticAttribute()</primary></indexterm>
      <para><literal>assertClassHasStaticAttribute(string $attributeName, string $className[, string $message = ''])</literal></para>
      <para><literal>$className::attributeName</literal> が存在しない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertClassNotHasStaticAttribute()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <example id="api.assert.assertClassHasStaticAttribute.example">
        <title>assertClassHasStaticAttribute() の使用法</title>
        <programlisting><![CDATA[<?php
class ClassHasStaticAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertClassHasStaticAttribute('foo', 'stdClass');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ClassHasStaticAttributeTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) ClassHasStaticAttributeTest::testFailure
Failed asserting that class "stdClass" has static attribute "foo".
/home/sb/ClassHasStaticAttributeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertContains">
      <title><literal>assertContains()</literal></title>
      <indexterm><primary>assertContains()</primary></indexterm>
      <indexterm><primary>assertNotContains()</primary></indexterm>
      <indexterm><primary>assertAttributeContains()</primary></indexterm>
      <indexterm><primary>assertAttributeNotContains()</primary></indexterm>
      <para><literal>assertContains(mixed $needle, Iterator|array $haystack[, string $message = ''])</literal></para>
      <para><literal>$needle</literal> が <literal>$haystack</literal> の要素でない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertNotContains()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <para><literal>assertAttributeContains()</literal> と <literal>assertAttributeNotContains()</literal> は便利なラッパーで、クラスやオブジェクトの <literal>public</literal>、<literal>protected</literal>、<literal>private</literal> 属性を haystack として使用することができます。</para>
      <example id="api.assert.assertContains.example">
        <title>assertContains() の使用法</title>
        <programlisting><![CDATA[<?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertContains(4, array(1, 2, 3));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ContainsTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) ContainsTest::testFailure
Failed asserting that an array contains <integer:4>.
/home/sb/ContainsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>

      <para><literal>assertContains(string $needle, string $haystack[, string $message = ''])</literal></para>
      <para><literal>$needle</literal> が <literal>$haystack</literal> の部分文字列でない場合にエラー <literal>$message</literal> を報告します。</para>
      <example id="api.assert.assertContains.example2">
        <title>assertContains() の使用法</title>
        <programlisting><![CDATA[<?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertContains('baz', 'foobar');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ContainsTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) ContainsTest::testFailure
Failed asserting that <string:foobar> contains "baz".
/home/sb/ContainsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertContainsOnly">
      <title><literal>assertContainsOnly()</literal></title>
      <indexterm><primary>assertContainsOnly()</primary></indexterm>
      <indexterm><primary>assertNotContainsOnly()</primary></indexterm>
      <indexterm><primary>assertAttributeContainsOnly()</primary></indexterm>
      <indexterm><primary>assertAttributeNotContainsOnly()</primary></indexterm>
      <para><literal>assertContainsOnly(string $type, Iterator|array $haystack[, boolean $isNativeType = NULL, string $message = ''])</literal></para>
      <para><literal>$haystack</literal> の中身の型が <literal>$type</literal> だけではない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>$isNativeType</literal> はフラグで、<literal>$type</literal> がネイティブな PHP の型であるかどうかを表します。</para>
      <para><literal>assertNotContainsOnly()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <para><literal>assertAttributeContainsOnly()</literal> と <literal>assertAttributeNotContainsOnly()</literal> は便利なラッパーで、クラスやオブジェクトの <literal>public</literal>、<literal>protected</literal>、<literal>private</literal> 属性を実際の値として使用することができます。</para>
      <example id="api.assert.assertContainsOnly.example">
        <title>assertContainsOnly() の使用法</title>
        <programlisting><![CDATA[<?php
class ContainsOnlyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertContainsOnly('string', array('1', '2', 3));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ContainsOnlyTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) ContainsOnlyTest::testFailure
Failed asserting that
Array
(
    [0] => 1
    [1] => 2
    [2] => 3
)
 contains only values of type "string".
/home/sb/ContainsOnlyTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertEqualXMLStructure">
      <title><literal>assertEqualXMLStructure()</literal></title>
      <indexterm><primary>assertEqualXMLStructure()</primary></indexterm>
      <para><literal>assertEqualXMLStructure(DOMNode $expectedNode, DOMNode $actualNode[, boolean $checkAttributes = FALSE, string $message = ''])</literal></para>
      <para>XXX</para>
      <example id="api.assert.assertEqualXMLStructure.example">
        <title>assertEqualXMLStructure() の使用法</title>
        <programlisting><![CDATA[<?php
?>]]></programlisting>
        <screen><userinput>phpunit EqualXMLStructureTest</userinput><![CDATA[
]]></screen>
      </example>
    </section>

    <section id="api.assert.assertEquals">
      <title><literal>assertEquals()</literal></title>
      <indexterm><primary>assertEquals()</primary></indexterm>
      <indexterm><primary>assertNotEquals()</primary></indexterm>
      <indexterm><primary>assertAttributeEquals()</primary></indexterm>
      <indexterm><primary>assertAttributeNotEquals()</primary></indexterm>
      <para><literal>assertEquals(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para>2 つの変数 <literal>$expected</literal> と <literal>$actual</literal> が等しくない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertNotEquals()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <para><literal>assertAttributeEquals()</literal> と <literal>assertAttributeNotEquals()</literal> は便利なラッパーで、クラスやオブジェクトの <literal>public</literal>、<literal>protected</literal>、<literal>private</literal> 属性を実際の値として使用することができます。</para>
      <example id="api.assert.assertEquals.example">
        <title>assertEquals() の使用法</title>
        <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertEquals(1, 0);
    }

    public function testFailure2()
    {
        $this->assertEquals('bar', 'baz');
    }

    public function testFailure3()
    {
        $this->assertEquals("foo\nbar\nbaz\n", "foo\nbah\nbaz\n");
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EqualsTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

FFF

Time: 0 seconds

There were 3 failures:

1) EqualsTest::testFailure
Failed asserting that <integer:0> matches expected value <integer:1>.
/home/sb/EqualsTest.php:11

2) EqualsTest::testFailure2
Failed asserting that two strings are equal.
expected string <bar>
difference      <  x>
got string      <baz>
/home/sb/EqualsTest.php:16

3) EqualsTest::testFailure3
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ -1,3 +1,3 @@
 foo
-bar
+bah
 baz

/home/sb/EqualsTest.php:21

FAILURES!
Tests: 3, Assertions: 3, Failures: 3.]]></screen>
      </example>

      <para>引数 <literal>$expected</literal> と <literal>$actual</literal> の型により特化した比較については、以下を参照ください。</para>

      <para><literal>assertEquals(float $expected, float $actual[, string $message = '', float $delta = 0])</literal></para>
      <para>2 つの float 値 <literal>$expected</literal> と <literal>$actual</literal> の誤差が <literal>$delta</literal> より大きい場合にエラー <literal>$message</literal> を報告します。</para>
      <para>なぜ <literal>$delta</literal> が必要となるのかについては <ulink url="http://en.wikipedia.org/wiki/IEEE_754#Comparing_floating-point_numbers">comparing floating-point numbers</ulink> を参照ください。</para>
      <example id="api.assert.assertEquals.example2">
        <title>float 値での assertEquals() の使用法</title>
        <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testSuccess()
    {
        $this->assertEquals(1.0, 1.1, '', 0.2);
    }

    public function testFailure()
    {
        $this->assertEquals(1.0, 1.1);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EqualsTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

.F

Time: 0 seconds

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that <double:1.1> matches expected value <double:1>.
/home/sb/EqualsTest.php:11

FAILURES!
Tests: 2, Assertions: 2, Failures: 1.]]></screen>
      </example>

      <para><literal>assertEquals(DOMDocument $expected, DOMDocument $actual[, string $message = ''])</literal></para>
      <para>2 つの DOMDocument オブジェクト <literal>$expected</literal> と <literal>$actual</literal> で表される XML ドキュメントが (コメントを除去して正規化した状態で) 等しくない場合にエラー <literal>$message</literal> を報告します。</para>
      <example id="api.assert.assertEquals.example3">
        <title>DOMDocument オブジェクトでの assertEquals() の使用法</title>
        <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $expected = new DOMDocument;
        $expected->loadXML('<foo><bar/></foo>');

        $actual = new DOMDocument;
        $actual->loadXML('<bar><foo/></bar>');

        $this->assertEquals($expected, $actual);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EqualsTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ -1,4 +1,4 @@
 <?xml version="1.0"?>
-<foo>
-  <bar/>
-</foo>
+<bar>
+  <foo/>
+</bar>

/home/sb/EqualsTest.php:12

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>

      <para><literal>assertEquals(object $expected, object $actual[, string $message = ''])</literal></para>
      <para>2 つのオブジェクト <literal>$expected</literal> と <literal>$actual</literal> が同じ属性値を持たない場合にエラー <literal>$message</literal> を報告します。</para>
      <example id="api.assert.assertEquals.example4">
        <title>オブジェクトでの assertEquals() の使用法</title>
        <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $expected = new stdClass;
        $expected->foo = 'foo';
        $expected->bar = 'bar';

        $actual = new stdClass;
        $actual->foo = 'bar';
        $actual->baz = 'bar';

        $this->assertEquals($expected, $actual);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EqualsTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that two objects are equal.
--- Expected
+++ Actual
@@ -1,5 +1,5 @@
 stdClass Object
 (
-    [foo] => foo
-    [bar] => bar
+    [foo] => bar
+    [baz] => bar
 )

/home/sb/EqualsTest.php:14

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>

      <para><literal>assertEquals(array $expected, array $actual[, string $message = ''])</literal></para>
      <para>2 つの配列 <literal>$expected</literal> と <literal>$actual</literal> が等しくない場合にエラー <literal>$message</literal> を報告します。</para>

      <example id="api.assert.assertEquals.example5">
        <title>配列での assertEquals() の使用法</title>
        <programlisting><![CDATA[<?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertEquals(array('a', 'b', 'c'), array('a', 'c', 'd'));
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit EqualsTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) EqualsTest::testFailure
Failed asserting that two arrays are equal.
--- Expected
+++ Actual
@@ -1,6 +1,6 @@
 Array
 (
     [0] => a
-    [1] => b
-    [2] => c
+    [1] => c
+    [2] => d
 )

/home/sb/EqualsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertFalse">
      <title><literal>assertFalse()</literal></title>
      <indexterm><primary>assertFalse()</primary></indexterm>
      <para><literal>assertFalse(bool $condition[, string $message = ''])</literal></para>
      <para><literal>$condition</literal> が <literal>TRUE</literal> の場合にエラー <literal>$message</literal> を報告します。</para>
      <example id="api.assert.assertFalse.example">
        <title>assertFalse() の使用法</title>
        <programlisting><![CDATA[<?php
class FalseTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertFalse(TRUE);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit FalseTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) FalseTest::testFailure
Failed asserting that <boolean:true> is false.
/home/sb/FalseTest.php:11

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertFileEquals">
      <title><literal>assertFileEquals()</literal></title>
      <indexterm><primary>assertFileEquals()</primary></indexterm>
      <indexterm><primary>assertFileNotEquals()</primary></indexterm>
      <para><literal>assertFileEquals(string $expected, string $actual[, string $message = ''])</literal></para>
      <para><literal>$expected</literal> で指定したファイルと <literal>$actual</literal> で指定したファイルの内容が異なる場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertFileNotEquals()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <example id="api.assert.assertFileEquals.example">
        <title>assertFileEquals() の使用法</title>
        <programlisting><![CDATA[<?php
class FileEqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertFileEquals('/home/sb/expected', '/home/sb/actual');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit FileEqualsTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) FileEqualsTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ -1,2 +1,2 @@
-expected
+actual


/home/sb/FileEqualsTest.php:6

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertFileExists">
      <title><literal>assertFileExists()</literal></title>
      <indexterm><primary>assertFileExists()</primary></indexterm>
      <indexterm><primary>assertFileNotExists()</primary></indexterm>
      <para><literal>assertFileExists(string $filename[, string $message = ''])</literal></para>
      <para>ファイル <literal>$filename</literal> が存在しない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertFileNotExists()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <example id="api.assert.assertFileExists.example">
        <title>assertFileExists() の使用法</title>
        <programlisting><![CDATA[<?php
class FileExistsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertFileExists('/path/to/file');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit FileExistsTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) FileExistsTest::testFailure
Failed asserting that file "/path/to/file" exists.
/home/sb/FileExistsTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertGreaterThan">
      <title><literal>assertGreaterThan()</literal></title>
      <indexterm><primary>assertGreaterThan()</primary></indexterm>
      <indexterm><primary>assertAttributeGreaterThan()</primary></indexterm>
      <para><literal>assertGreaterThan(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para><literal>$actual</literal> の値が <literal>$expected</literal> の値より大きくない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertAttributeGreaterThan()</literal> は便利なラッパーで、クラスやオブジェクトの <literal>public</literal>、<literal>protected</literal>、<literal>private</literal> 属性を実際の値として使用することができます。</para>
      <example id="api.assert.assertGreaterThan.example">
        <title>assertGreaterThan() の使用法</title>
        <programlisting><![CDATA[<?php
class GreaterThanTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertGreaterThan(2, 1);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit GreaterThanTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) GreaterThanTest::testFailure
Failed asserting that <integer:1> is greater than <integer:2>.
/home/sb/GreaterThanTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertGreaterThanOrEqual">
      <title><literal>assertGreaterThanOrEqual()</literal></title>
      <indexterm><primary>assertGreaterThanOrEqual()</primary></indexterm>
      <indexterm><primary>assertAttributeGreaterThanOrEqual()</primary></indexterm>
      <para><literal>assertGreaterThanOrEqual(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para><literal>$actual</literal> の値が <literal>$expected</literal> の値以上でない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertAttributeGreaterThanOrEqual()</literal> は便利なラッパーで、クラスやオブジェクトの <literal>public</literal>、<literal>protected</literal>、<literal>private</literal> 属性を実際の値として使用することができます。</para>
      <example id="api.assert.assertGreaterThanOrEqual.example">
        <title>assertGreaterThanOrEqual() の使用法</title>
        <programlisting><![CDATA[<?php
class GreatThanOrEqualTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertGreaterThanOrEqual(2, 1);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit GreaterThanOrEqualTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) GreatThanOrEqualTest::testFailure
Failed asserting that <integer:1> is equal to <integer:2> or is greater than <integer:2>.
/home/sb/GreaterThanOrEqualTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertLessThan">
      <title><literal>assertLessThan()</literal></title>
      <indexterm><primary>assertLessThan()</primary></indexterm>
      <indexterm><primary>assertAttributeLessThan()</primary></indexterm>
      <para><literal>assertLessThan(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para><literal>$actual</literal> の値が <literal>$expected</literal> の値より小さくない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertAttributeLessThan()</literal> は便利なラッパーで、クラスやオブジェクトの <literal>public</literal>、<literal>protected</literal>、<literal>private</literal> 属性を実際の値として使用することができます。</para>
      <example id="api.assert.assertLessThan.example">
        <title>assertLessThan() の使用法</title>
        <programlisting><![CDATA[<?php
class LessThanTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertLessThan(1, 2);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit LessThanTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) LessThanTest::testFailure
Failed asserting that <integer:2> is less than <integer:1>.
/home/sb/LessThanTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertLessThanOrEqual">
      <title><literal>assertLessThanOrEqual()</literal></title>
      <indexterm><primary>assertLessThanOrEqual()</primary></indexterm>
      <indexterm><primary>assertAttributeLessThanOrEqual()</primary></indexterm>
      <para><literal>assertLessThanOrEqual(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para><literal>$actual</literal> の値が <literal>$expected</literal> の値以下でない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertAttributeLessThanOrEqual()</literal> は便利なラッパーで、クラスやオブジェクトの <literal>public</literal>、<literal>protected</literal>、<literal>private</literal> 属性を実際の値として使用することができます。</para>
      <example id="api.assert.assertLessThanOrEqual.example">
        <title>assertLessThanOrEqual() の使用法</title>
        <programlisting><![CDATA[<?php
class LessThanOrEqualTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertLessThanOrEqual(1, 2);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit LessThanOrEqualTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) LessThanOrEqualTest::testFailure
Failed asserting that <integer:2> is equal to <integer:1> or is less than <integer:1>.
/home/sb/LessThanOrEqualTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertNull">
      <title><literal>assertNull()</literal></title>
      <indexterm><primary>assertNull()</primary></indexterm>
      <indexterm><primary>assertNotNull()</primary></indexterm>
      <para><literal>$variable</literal> が <literal>NULL</literal> でないときにエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertNotNull()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <example id="api.assert.assertNull.example">
        <title>assertNull() の使用法</title>
        <programlisting><![CDATA[<?php
class NullTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertNull('foo');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit NotNullTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) NullTest::testFailure
Failed asserting that <string:foo> is null.
/home/sb/NullTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertObjectHasAttribute">
      <title><literal>assertObjectHasAttribute()</literal></title>
      <indexterm><primary>assertObjectHasAttribute()</primary></indexterm>
      <indexterm><primary>assertObjectNotHasAttribute()</primary></indexterm>
      <para><literal>assertObjectHasAttribute(string $attributeName, object $object[, string $message = ''])</literal></para>
      <para><literal>$object->attributeName</literal> が存在しない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertObjectNotHasAttribute()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <example id="api.assert.assertObjectHasAttribute.example">
        <title>assertObjectHasAttribute() の使用法</title>
        <programlisting><![CDATA[<?php
class ObjectHasAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertObjectHasAttribute('foo', new stdClass);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit ObjectHasAttributeTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) ObjectHasAttributeTest::testFailure
Failed asserting that object of class "stdClass" has attribute "foo".
/home/sb/ObjectHasAttributeTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertRegExp">
      <title><literal>assertRegExp()</literal></title>
      <indexterm><primary>assertRegExp()</primary></indexterm>
      <indexterm><primary>assertNotRegExp()</primary></indexterm>
      <para><literal>assertRegExp(string $pattern, string $string[, string $message = ''])</literal></para>
      <para><literal>$string</literal> が正規表現 <literal>$pattern</literal> にマッチしない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertNotRegExp()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <example id="api.assert.assertRegExp.example">
        <title>assertRegExp() の使用法</title>
        <programlisting><![CDATA[<?php
class RegExpTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertRegExp('/foo/', 'bar');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit RegExpTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) RegExpTest::testFailure
Failed asserting that <string:bar> matches PCRE pattern "/foo/".
/home/sb/RegExpTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertSame">
      <title><literal>assertSame()</literal></title>
      <indexterm><primary>assertSame()</primary></indexterm>
      <indexterm><primary>assertNotSame()</primary></indexterm>
      <indexterm><primary>assertAttributeSame()</primary></indexterm>
      <indexterm><primary>assertAttributeNotSame()</primary></indexterm>
      <para><literal>assertSame(mixed $expected, mixed $actual[, string $message = ''])</literal></para>
      <para>2 つの変数 <literal>$expected</literal> と <literal>$actual</literal> が同じ型・同じ値でない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertNotSame()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <para><literal>assertAttributeSame()</literal> と <literal>assertAttributeNotSame()</literal> は便利なラッパーで、クラスやオブジェクトの <literal>public</literal>、<literal>protected</literal>、<literal>private</literal> 属性を実際の値として使用することができます。</para>
      <example id="api.assert.assertSame.example">
        <title>assertSame() の使用法</title>
        <programlisting><![CDATA[<?php
class SameTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertSame('2204', 2204);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit SameTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) SameTest::testFailure
<integer:2204> does not match expected type "string".
/home/sb/SameTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>

      <para><literal>assertSame(object $expected, object $actual[, string $message = ''])</literal></para>
      <para>2 つの変数 <literal>$expected</literal> と <literal>$actual</literal> が同じオブジェクトを参照していない場合にエラー <literal>$message</literal> を報告します。</para>

      <example id="api.assert.assertSame.example2">
        <title>オブジェクトでの assertSame() の使用法</title>
        <programlisting><![CDATA[<?php
class SameTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertSame(new stdClass, new stdClass);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit SameTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) SameTest::testFailure
Failed asserting that two variables reference the same object.
/home/sb/SameTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertSelectCount">
      <title><literal>assertSelectCount()</literal></title>
      <indexterm><primary>assertSelectCount()</primary></indexterm>
      <para><literal>assertSelectCount(array $selector, integer $count, mixed $actual[, string $message = '', boolean $isHtml = TRUE])</literal></para>
      <para>XXX</para>
      <example id="api.assert.assertSelectCount.example">
        <title>assertSelectCount() の使用法</title>
        <programlisting><![CDATA[<?php
?>]]></programlisting>
        <screen><userinput>phpunit SelectCountTest</userinput><![CDATA[
]]></screen>
      </example>
    </section>

    <section id="api.assert.assertSelectEquals">
      <title><literal>assertSelectEquals()</literal></title>
      <indexterm><primary>assertSelectEquals()</primary></indexterm>
      <para><literal>assertSelectEquals(array $selector, string $content, integer $count, mixed $actual[, string $message = '', boolean $isHtml = TRUE])</literal></para>
      <para>XXX</para>
      <example id="api.assert.assertSelectEquals.example">
        <title>assertSelectEquals() の使用法</title>
        <programlisting><![CDATA[<?php
?>]]></programlisting>
        <screen><userinput>phpunit SelectEqualsTest</userinput><![CDATA[
]]></screen>
      </example>
    </section>

    <section id="api.assert.assertSelectRegExp">
      <title><literal>assertSelectRegExp()</literal></title>
      <indexterm><primary>assertSelectRegExp()</primary></indexterm>
      <para><literal>assertSelectRegExp(array $selector, string $pattern, integer $count, mixed $actual[, string $message = '', boolean $isHtml = TRUE])</literal></para>
      <para>XXX</para>
      <example id="api.assert.assertSelectRegExp.example">
        <title>assertSelectRegExp() の使用法</title>
        <programlisting><![CDATA[<?php
?>]]></programlisting>
        <screen><userinput>phpunit SelectRegExpTest</userinput><![CDATA[
]]></screen>
      </example>
    </section>

    <section id="api.assert.assertStringEndsWith">
      <title><literal>assertStringEndsWith()</literal></title>
      <indexterm><primary>assertStringEndsWith()</primary></indexterm>
      <indexterm><primary>assertStringEndsNotWith()</primary></indexterm>
      <para><literal>assertStringEndsWith(string $suffix, string $string[, string $message = ''])</literal></para>
      <para><literal>$string</literal> が <literal>$suffix</literal> で終わっていない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertStringEndsNotWith()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <example id="api.assert.assertStringEndsWith.example">
        <title>assertStringEndsWith() の使用法</title>
        <programlisting><![CDATA[<?php
class StringEndsWithTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertStringEndsWith('suffix', 'foo');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit StringEndsWithTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) StringEndsWithTest::testFailure
Failed asserting that <string:foo> ends with "suffix".
/home/sb/StringEndsWithTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertStringEqualsFile">
      <title><literal>assertStringEqualsFile()</literal></title>
      <indexterm><primary>assertStringEqualsFile()</primary></indexterm>
      <indexterm><primary>assertStringNotEqualsFile()</primary></indexterm>
      <para><literal>assertStringEqualsFile(string $expectedFile, string $actualString[, string $message = ''])</literal></para>
      <para><literal>$expectedFile</literal> で指定したファイルの内容に <literal>$actualString</literal> が含まれない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertStringNotEqualsFile()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <example id="api.assert.assertStringEqualsFile.example">
        <title>assertStringEqualsFile() の使用法</title>
        <programlisting><![CDATA[<?php
class StringEqualsFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertStringEqualsFile('/home/sb/expected', 'actual');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit StringEqualsFileTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) StringEqualsFileTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ -1,2 +1 @@
-expected
-
+actual
\ No newline at end of file

/home/sb/StringEqualsFileTest.php:6

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertStringStartsWith">
      <title><literal>assertStringStartsWith()</literal></title>
      <indexterm><primary>assertStringStartsWith()</primary></indexterm>
      <indexterm><primary>assertStringStartsNotWith()</primary></indexterm>
      <para><literal>assertStringStartsWith(string $prefix, string $string[, string $message = ''])</literal></para>
      <para><literal>$string</literal> が <literal>$prefix</literal> で始まっていない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertStringStartsNotWith()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <example id="api.assert.assertStringStartsWith.example">
        <title>assertStringStartsWith() の使用法</title>
        <programlisting><![CDATA[<?php
class StringStartsWithTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertStringStartsWith('prefix', 'foo');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit StringStartsWithTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) StringStartsWithTest::testFailure
Failed asserting that <string:foo> starts with "prefix".
/home/sb/StringStartsWithTest.php:6

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertTag">
      <title><literal>assertTag()</literal></title>
      <indexterm><primary>assertTag()</primary></indexterm>
      <indexterm><primary>assertNotTag()</primary></indexterm>
      <para><literal>assertTag(array $matcher, string $actual[, string $message = '', boolean $isHtml = TRUE])</literal></para>
      <para><literal>$actual</literal> が <literal>$matcher</literal> にマッチしない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>$matcher</literal> は連想配列で、アサーションに使用するマッチ条件を指定します。</para>
      <itemizedlist>
        <listitem><literal>id</literal>: 指定した <literal>id</literal> 属性のノードが対応する値にマッチすること。</listitem>
        <listitem><literal>tag</literal>: ノードの型が対応する値にマッチすること。</listitem>
        <listitem><literal>attributes</literal>: ノードの属性が、対応する値の連想配列 <literal>$attributes</literal> にマッチすること。</listitem>
        <listitem><literal>content</literal>: テキストの内容が指定した値にマッチすること。</listitem>
        <listitem><literal>parent</literal>: ノードの親が連想配列 <literal>$parent</literal> にマッチすること。</listitem>
        <listitem><literal>child</literal>: ノードの直接の子のうち少なくともひとつが連想配列 <literal>$child</literal> の条件を満たすこと。</listitem>
        <listitem><literal>ancestor</literal>: ノードの先祖のうちの少なくともひとつが連想配列 <literal>$ancestor</literal> の条件を満たすこと。</listitem>
        <listitem><literal>descendant</literal>: ノードの子孫のうちの少なくともひとつが連想配列 <literal>$descendant</literal> の条件を満たすこと。</listitem>
        <listitem><literal>children</literal>: ノードの子の数を数えるための連想配列。
          <itemizedlist>
            <listitem><literal>count</literal>: マッチする子の数がこの数に等しいこと。</listitem>
            <listitem><literal>less_than</literal>: マッチする子の数がこの数より少ないこと。</listitem>
            <listitem><literal>greater_than</literal>: マッチする子の数がこの数より多いこと。</listitem>
            <listitem><literal>only</literal>: 連想配列で子のマッチに使用するキーを指定し、それにマッチした子のみを数える。</listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
      <para><literal>assertNotTag()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <example id="api.assert.assertTag.example">
        <title>assertTag() の使用法</title>
        <programlisting><![CDATA[<?php
// id="my_id" という要素があることを表明する matcher
$matcher = array('id' => 'my_id');

// "span" タグが存在することを表明する matcher
$matcher = array('tag' => 'span');

// 中身が "Hello World" である "span" タグが存在することを表明する
// matcher
$matcher = array('tag' => 'span', 'content' => 'Hello World');

// 正規表現で指定した内容にマッチする中身を持つ "span" タグが
// 存在することを表明する matcher
$matcher = array('tag' => 'span', 'content' => '/Try P(HP|ython)/');

// class 属性に "list" が指定された "span" タグが存在することを表明する matcher
$matcher = array(
  'tag'        => 'span',
  'attributes' => array('class' => 'list')
);

// "span" が "div" の内部に存在することを表明する matcher
$matcher = array(
  'tag'    => 'span',
  'parent' => array('tag' => 'div')
);

// "span" が "table" 内のどこかに存在することを表明する matcher
$matcher = array(
  'tag'      => 'span',
  'ancestor' => array('tag' => 'table')
);

// 子要素に少なくともひとつの "em" を持つ "span" が存在することを表明する matcher
$matcher = array(
  'tag'   => 'span',
  'child' => array('tag' => 'em')
);

// "span" の中 (何段階か下でも可) に
// "strong" タグが存在することを表明する matcher
$matcher = array(
  'tag'        => 'span',
  'descendant' => array('tag' => 'strong')
);

// 直接の子として 5 から 10 の "em" タグを持つ "span"
// が存在することを表明する matcher
$matcher = array(
  'tag'      => 'span',
  'children' => array(
    'less_than'    => 11,
    'greater_than' => 4,
    'only'         => array('tag' => 'em')
  )
);

// "div" というタグが存在し、先祖に "ul" そして直接の親に "li"
// (class="enum") を持つこと、そして id="my_test" で中身が
// "Hello World" である "span" を子孫にもつことを表明する matcher
$matcher = array(
  'tag'        => 'div',
  'ancestor'   => array('tag' => 'ul'),
  'parent'     => array(
    'tag'        => 'li',
    'attributes' => array('class' => 'enum')
  ),
  'descendant' => array(
    'tag'   => 'span',
    'child' => array(
      'id'      => 'my_test',
      'content' => 'Hello World'
    )
  )
);

// assertTag() を使用して、$matcher を $html に適用します
$this->assertTag($matcher, $html);

// assertTag() を使用して、$matcher を $xml に適用します
$this->assertTag($matcher, $xml, '', FALSE);
?>]]></programlisting>
      </example>
    </section>

    <section id="api.assert.assertThat">
      <title><literal>assertThat()</literal></title>
      <indexterm><primary>assertThat()</primary></indexterm>

      <para>
        もっと複雑なアサーションを行う場合には、
        <literal>PHPUnit_Framework_Constraint</literal> クラスを使用します。
        これらは、<literal>assertThat()</literal> メソッドを使用して評価されます。
        <xref linkend="api.assert.assertThat.example"/> は、
        <literal>logicalNot()</literal> と <literal>equalTo()</literal>
        を用いて <literal>assertNotEquals()</literal>
        と同じアサーションを行う方法を示すものです。
      </para>

      <para><literal>assertThat(mixed $value, PHPUnit_Framework_Constraint $constraint[, $message = ''])</literal></para>
      <para><literal>$value</literal> が <literal>$constraint</literal> にマッチしない場合にエラー <literal>$message</literal> を報告します。</para>
      <example id="api.assert.assertThat.example">
        <title>assertThat() の使用法</title>
        <programlisting><![CDATA[<?php
class BiscuitTest extends PHPUnit_Framework_TestCase
{
    public function testEquals()
    {
        $theBiscuit = new Biscuit('Ginger');
        $myBiscuit  = new Biscuit('Ginger');

        $this->assertThat(
          $theBiscuit,
          $this->logicalNot(
            $this->equalTo($myBiscuit)
          )
        );
    }
}
?>]]></programlisting>
      </example>

      <para>
        <xref linkend="api.assert.assertThat.tables.constraints" /> に、
        使用できる <literal>PHPUnit_Framework_Constraint</literal> クラスをまとめます。
      </para>

      <table id="api.assert.assertThat.tables.constraints">
        <title>制約</title>

        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>制約</entry>
              <entry>意味</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <indexterm><primary>attribute()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_Attribute attribute(PHPUnit_Framework_Constraint $constraint, $attributeName)</literal></entry>
              <entry>別の制約を、クラスあるいはオブジェクトの属性として適用する制約。</entry>
            </row>
            <row>
              <indexterm><primary>anything()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsAnything anything()</literal></entry>
              <entry>あらゆる入力値を受け入れる制約。</entry>
            </row>
            <row>
              <indexterm><primary>arrayHasKey()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_ArrayHasKey arrayHasKey(mixed $key)</literal></entry>
              <entry>配列が指定したキーを保持していることを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>contains()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_TraversableContains contains(mixed $value)</literal></entry>
              <entry><literal>Iterator</literal> インターフェイスを実装している <literal>array</literal> やオブジェクトが、指定した値を保持していることを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>equalTo()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsEqual equalTo($value, $delta = 0, $maxDepth = 10)</literal></entry>
              <entry>ある値が別の値と等しいかどうかを調べる制約。</entry>
            </row>
            <row>
              <indexterm><primary>attributeEqualTo()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_Attribute attributeEqualTo($attributeName, $value, $delta = 0, $maxDepth = 10)</literal></entry>
              <entry>ある値がクラスあるいはオブジェクトの属性と等しいかどうかを調べる制約。</entry>
            </row>
            <row>
              <indexterm><primary>fileExists()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_FileExists fileExists()</literal></entry>
              <entry>指定した名前のファイルが存在するかどうかを調べる制約。</entry>
            </row>
            <row>
              <indexterm><primary>greaterThan()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_GreaterThan greaterThan(mixed $value)</literal></entry>
              <entry>評価される値が、指定した値より大きいことを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>greaterThanOrEqual()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_Or greaterThanOrEqual(mixed $value)</literal></entry>
              <entry>評価される値が、指定した値以上であることを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>classHasAttribute()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_ClassHasAttribute classHasAttribute(string $attributeName)</literal></entry>
              <entry>評価されるクラスに、指定した属性があることを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>classHasStaticAttribute()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_ClassHasStaticAttribute classHasStaticAttribute(string $attributeName)</literal></entry>
              <entry>評価されるクラスに、指定した static 属性があることを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>hasAttribute()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_ObjectHasAttribute hasAttribute(string $attributeName)</literal></entry>
              <entry>評価されるオブジェクトが、指定した属性を保持していることを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>identicalTo()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsIdentical identicalTo(mixed $value)</literal></entry>
              <entry>ある値が別の値と同一であることを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>isFalse()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsFalse isFalse()</literal></entry>
              <entry>評価される値が <literal>FALSE</literal> であることを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>isInstanceOf()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsInstanceOf isInstanceOf(string $className)</literal></entry>
              <entry>評価されるオブジェクトが、指定したクラスのインスタンスであることを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>isNull()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsNull isNull()</literal></entry>
              <entry>評価される値が <literal>NULL</literal> であることを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>isTrue()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsTrue isTrue()</literal></entry>
              <entry>評価される値が <literal>TRUE</literal> であることを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>isType()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_IsType isType(string $type)</literal></entry>
              <entry>評価される値が、指定した型であることを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>lessThan()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_LessThan lessThan(mixed $value)</literal></entry>
              <entry>評価される値が、指定した値より小さいことを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>lessThanOrEqual()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_Or lessThanOrEqual(mixed $value)</literal></entry>
              <entry>評価される値が、指定した値以下であることを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>logicalAnd()</primary></indexterm>
              <entry><literal>logicalAnd()</literal></entry>
              <entry>論理積 (AND)。</entry>
            </row>
            <row>
              <indexterm><primary>logicalNot()</primary></indexterm>
              <entry><literal>logicalNot(PHPUnit_Framework_Constraint $constraint)</literal></entry>
              <entry>論理否定 (NOT)。</entry>
            </row>
            <row>
              <indexterm><primary>logicalOr()</primary></indexterm>
              <entry><literal>logicalOr()</literal></entry>
              <entry>論理和 (OR)。</entry>
            </row>
            <row>
              <indexterm><primary>logicalXor()</primary></indexterm>
              <entry><literal>logicalXor()</literal></entry>
              <entry>排他的論理和 (XOR)。</entry>
            </row>
            <row>
              <indexterm><primary>matchesRegularExpression()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_PCREMatch matchesRegularExpression(string $pattern)</literal></entry>
              <entry>評価される文字列が、正規表現にマッチすることを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>stringContains()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_StringContains stringContains(string $string, bool $case)</literal></entry>
              <entry>評価される文字列が、指定した文字列を含むことを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>stringEndsWith()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_StringEndsWith stringEndsWith(string $suffix)</literal></entry>
              <entry>評価される文字列が、指定したサフィックスで終わることを保証する制約。</entry>
            </row>
            <row>
              <indexterm><primary>stringStartsWith()</primary></indexterm>
              <entry><literal>PHPUnit_Framework_Constraint_StringStartsWith stringStartsWith(string $prefix)</literal></entry>
              <entry>評価される文字列が、指定したプレフィックスで始まることを保証する制約。</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section id="api.assert.assertTrue">
      <title><literal>assertTrue()</literal></title>
      <indexterm><primary>assertTrue()</primary></indexterm>
      <para><literal>assertTrue(bool $condition[, string $message = ''])</literal></para>
      <para><literal>$condition</literal> が <literal>FALSE</literal> の場合にエラー <literal>$message</literal> を報告します。</para>
      <example id="api.assert.assertTrue.example">
        <title>assertTrue() の使用法</title>
        <programlisting><![CDATA[<?php
class TrueTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertTrue(FALSE);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit TrueTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) TrueTest::testFailure
Failed asserting that <boolean:false> is true.
/home/sb/TrueTest.php:11

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertType">
      <title><literal>assertType()</literal></title>
      <indexterm><primary>assertType()</primary></indexterm>
      <indexterm><primary>assertAttributeType()</primary></indexterm>
      <indexterm><primary>assertNotType()</primary></indexterm>
      <indexterm><primary>assertAttributeNotType()</primary></indexterm>
      <para><literal>assertType(string $expected, mixed $actual[, string $message = ''])</literal></para>
      <para>変数 <literal>$actual</literal> の型が <literal>$expected</literal> でない場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>$expected</literal> はこれらの定数のいずれかとなります。</para>
      <itemizedlist>
        <listitem><literal>PHPUnit_Framework_Constraint_IsType::TYPE_ARRAY</literal> (<literal>"array"</literal>)</listitem>
        <listitem><literal>PHPUnit_Framework_Constraint_IsType::TYPE_BOOL</literal> (<literal>"bool"</literal>)</listitem>
        <listitem><literal>PHPUnit_Framework_Constraint_IsType::TYPE_FLOAT</literal> (<literal>"float"</literal>)</listitem>
        <listitem><literal>PHPUnit_Framework_Constraint_IsType::TYPE_INT</literal> (<literal>"int"</literal>)</listitem>
        <listitem><literal>PHPUnit_Framework_Constraint_IsType::TYPE_NULL</literal> (<literal>"null"</literal>)</listitem>
        <listitem><literal>PHPUnit_Framework_Constraint_IsType::TYPE_NUMERIC</literal> (<literal>"numeric"</literal>)</listitem>
        <listitem><literal>PHPUnit_Framework_Constraint_IsType::TYPE_OBJECT</literal> (<literal>"object"</literal>)</listitem>
        <listitem><literal>PHPUnit_Framework_Constraint_IsType::TYPE_RESOURCE</literal> (<literal>"resource"</literal>)</listitem>
        <listitem><literal>PHPUnit_Framework_Constraint_IsType::TYPE_STRING</literal> (<literal>"string"</literal>)</listitem>
      </itemizedlist>
      <para><literal>assertNotType()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <example id="api.assert.assertType.example">
        <title>assertType() の使用法</title>
        <programlisting><![CDATA[<?php
class TypeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertType(PHPUnit_Framework_Constraint_IsType::TYPE_STRING, 2204);
    }

    public function testFailure2()
    {
        $this->assertType('string', 2204);
    }

    public function testFailure3()
    {
        $this->assertType('Exception', new stdClass);
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit TypeTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

FFF

Time: 0 seconds

There were 3 failures:

1) TypeTest::testFailure
Failed asserting that <integer:2204> is of type "string".
/home/sb/TypeTest.php:6

2) TypeTest::testFailure2
Failed asserting that <integer:2204> is of type "string".
/home/sb/TypeTest.php:11

3) TypeTest::testFailure3
Failed asserting that <stdClass> is an instance of class "Exception".
/home/sb/TypeTest.php:16

FAILURES!
Tests: 3, Assertions: 3, Failures: 3.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertXmlFileEqualsXmlFile">
      <title><literal>assertXmlFileEqualsXmlFile()</literal></title>
      <indexterm><primary>assertXmlFileEqualsXmlFile()</primary></indexterm>
      <indexterm><primary>assertXmlFileNotEqualsXmlFile()</primary></indexterm>
      <para><literal>assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile[, string $message = ''])</literal></para>
      <para><literal>$actualFile</literal> の XML ドキュメントが <literal>$expectedFile</literal> の XML ドキュメントと異なる場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertXmlFileNotEqualsXmlFile()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <example id="api.assert.assertXmlFileEqualsXmlFile.example">
        <title>assertXmlFileEqualsXmlFile() の使用法</title>
        <programlisting><![CDATA[<?php
class XmlFileEqualsXmlFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertXmlFileEqualsXmlFile(
          '/home/sb/expected.xml', '/home/sb/actual.xml');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit XmlFileEqualsXmlFileTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) XmlFileEqualsXmlFileTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ -1,4 +1,4 @@
 <?xml version="1.0"?>
 <foo>
-  <bar/>
+  <baz/>
 </foo>

/home/sb/XmlFileEqualsXmlFileTest.php:7

FAILURES!
Tests: 1, Assertions: 3, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertXmlStringEqualsXmlFile">
      <title><literal>assertXmlStringEqualsXmlFile()</literal></title>
      <indexterm><primary>assertXmlStringEqualsXmlFile()</primary></indexterm>
      <indexterm><primary>assertXmlStringNotEqualsXmlFile()</primary></indexterm>
      <para><literal>assertXmlStringEqualsXmlFile(string $expectedFile, string $actualXml[, string $message = ''])</literal></para>
      <para><literal>$actualXml</literal> の XML ドキュメントが <literal>$expectedFile</literal> の XML ドキュメントと異なる場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertXmlStringNotEqualsXmlFile()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <example id="api.assert.assertXmlStringEqualsXmlFile.example">
        <title>assertXmlStringEqualsXmlFile() の使用法</title>
        <programlisting><![CDATA[<?php
class XmlStringEqualsXmlFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertXmlStringEqualsXmlFile(
          '/home/sb/expected.xml', '<foo><baz/></foo>');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit XmlStringEqualsXmlFileTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) XmlStringEqualsXmlFileTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ -1,4 +1,4 @@
 <?xml version="1.0"?>
 <foo>
-  <bar/>
+  <baz/>
 </foo>

/home/sb/XmlStringEqualsXmlFileTest.php:7

FAILURES!
Tests: 1, Assertions: 2, Failures: 1.]]></screen>
      </example>
    </section>

    <section id="api.assert.assertXmlStringEqualsXmlString">
      <title><literal>assertXmlStringEqualsXmlString()</literal></title>
      <indexterm><primary>assertXmlStringEqualsXmlString()</primary></indexterm>
      <indexterm><primary>assertXmlStringNotEqualsXmlString()</primary></indexterm>
      <para><literal>assertXmlStringEqualsXmlString(string $expectedXml, string $actualXml[, string $message = ''])</literal></para>
      <para><literal>$actualXml</literal> の XML ドキュメントが <literal>$expectedXml</literal> の XML ドキュメントと異なる場合にエラー <literal>$message</literal> を報告します。</para>
      <para><literal>assertXmlStringNotEqualsXmlString()</literal> はこのアサーションの逆で、同じ引数をとります。</para>
      <example id="api.assert.assertXmlStringEqualsXmlString.example">
        <title>assertXmlStringEqualsXmlString() の使用法</title>
        <programlisting><![CDATA[<?php
class XmlStringEqualsXmlStringTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this->assertXmlStringEqualsXmlString(
          '<foo><bar/></foo>', '<foo><baz/></foo>');
    }
}
?>]]></programlisting>
        <screen><userinput>phpunit XmlStringEqualsXmlStringTest</userinput><![CDATA[
PHPUnit 3.4.4 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) XmlStringEqualsXmlStringTest::testFailure
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ -1,4 +1,4 @@
 <?xml version="1.0"?>
 <foo>
-  <bar/>
+  <baz/>
 </foo>

/home/sb/XmlStringEqualsXmlStringTest.php:7

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.]]></screen>
      </example>
    </section>

    <para>
      これら以外に、プロジェクトで使用している
      オブジェクト固有のアサーションが必要になることもあるでしょう。独自の
      <literal>Assert</literal> クラスを作成し、
      そこに独自のアサーションを含めてテストに使用することができます。
    </para>

    <para>
      アサーションに失敗すると、ボトルネックメソッド
      <literal>fail(string $message)</literal> がコールされ、これは
      <literal>PHPUnit_Framework_AssertionFailedError</literal> をスローします。
      このメソッドにもパラメータなしのものがあります。テストでエラーが発生した際に、
      <literal>fail()</literal> を明示的にコールします。
      例外が発生することが期待されるテストなどがその例になります。
      <xref linkend="api.assert.tables.bottleneck-methods" />
      に、PHPUnit のボトルネックメソッドをまとめます。
    </para>

    <table id="api.assert.tables.bottleneck-methods">
      <title>ボトルネックメソッド</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>メソッド</entry>
            <entry>意味</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <indexterm><primary>fail()</primary></indexterm>
            <entry><literal>void fail()</literal></entry>
            <entry>エラーを報告します。</entry>
          </row>
          <row>
            <entry><literal>void fail(string $message)</literal></entry>
            <entry>エラー <literal>$message</literal> を報告します。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <indexterm><primary>Incomplete Test</primary></indexterm>
      <indexterm><primary>Skipped Test</primary></indexterm>

      <literal>markTestIncomplete()</literal> および <literal>markTestSkipped()</literal>
      は、テストに対して「未完了」あるいは「省略」の印をつけるために便利なメソッドです。
    </para>

    <table id="api.assert.tables.incomplete-skipped">
      <title>テストに対して「未完了」あるいは「省略」の印をつける</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>メソッド</entry>
            <entry>意味</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <indexterm><primary>markTestIncomplete()</primary></indexterm>
            <entry><literal>void markTestIncomplete(string $message)</literal></entry>
            <entry>現在のテストに「未完了」の印をつけます。<literal>$message</literal> はオプションです。</entry>
          </row>
          <row>
            <indexterm><primary>markTestSkipped()</primary></indexterm>
            <entry><literal>void markTestSkipped(string $message)</literal></entry>
            <entry>現在のテストに「省略」の印をつけます。<literal>$message</literal> はオプションです。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      単体テストとは、もともとクラスの公開インターフェイスをテストするものです。
      しかし、時には非公開の属性の内容をテストしたいこともあるでしょう。
      <literal>readAttribute()</literal> メソッドを使用すると、
      指定したオブジェクトの属性の値を取得することができます。
    </para>

    <table id="api.assert.tables.readAttribute">
      <title>非公開属性へのアクセス</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>メソッド</entry>
            <entry>意味</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <indexterm><primary>readAttribute()</primary></indexterm>
            <entry><literal>Mixed readAttribute($object, $attributeName)</literal></entry>
            <entry>オブジェクトの指定した属性 (<literal>$attributeName</literal>) の値を返します。<literal>protected</literal> あるいは <literal>private</literal> である属性についても動作します。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="api.test">
    <title>PHPUnit_Framework_Test</title>
    <indexterm><primary>PHPUnit_Framework_Test</primary></indexterm>

    <para>
      <literal>PHPUnit_Framework_Test</literal> は、
      テストとして働くすべてのオブジェクトが使用する、
      一般的なインターフェイスです。これを実装したオブジェクトは、
      ひとつあるいは複数のテストを表すことになります。
      <xref linkend="api.test.tables.implementor-methods" />
      に示す 2 つのメソッドが定義されています。
    </para>

    <table id="api.test.tables.implementor-methods">
      <title>実装することになるメソッド</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>メソッド</entry>
            <entry>意味</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>int count()</literal></entry>
            <entry>テストの数を返します。</entry>
          </row>
          <row>
            <entry><literal>void run(PHPUnit_Framework_TestResult $result)</literal></entry>
            <entry>テストを実行し、結果を <literal>$result</literal> で報告します。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <literal>PHPUnit_Framework_Test</literal> の実装クラスとして有名なのは、
      <literal>PHPUnit_Framework_TestCase</literal> および
      <literal>PHPUnit_Framework_TestSuite</literal> の 2 つです。
      <literal>PHPUnit_Framework_Test</literal> を実装したクラスを独自に作成することも可能です。
      このインターフェイスはあえて小規模に設計されているので、実装するのは簡単でしょう。
    </para>
  </section>

  <section id="api.testcase">
    <title>PHPUnit_Framework_TestCase</title>
    <indexterm><primary>PHPUnit_Framework_TestCase</primary></indexterm>

    <para>
      テストケースクラスは <literal>PHPUnit_Framework_TestCase</literal>
      クラスを継承して作成します。たいていの場合は、
      テストスイートから自動的にテストを実行させることになるでしょう。
      この場合、(規約により) 各テストは <literal>test*</literal>
      という名前のメソッドにしておかなければなりません。
    </para>

    <para>
      <literal>PHPUnit_Framework_TestCase</literal> は
      <literal>PHPUnit_Framework_Test::countTestCases()</literal> を実装しており、
      これは常に <literal>1</literal> を返します。このクラスで実装されている
      <literal>PHPUnit_Framework_Test::run(PHPUnit_Framework_TestResult $result)</literal>
      は、まず <literal>setUp()</literal> を実行し、テストメソッドを実行し、
      それから <literal>tearDown()</literal> を実行し、その結果を
      <literal>PHPUnit_Framework_TestResult</literal> に報告します。
    </para>

    <para>
      <literal>PHPUnit_Framework_TestCase</literal> によって実装されているメソッドを
      <xref linkend="api.testcase.tables.api" /> にまとめます。
    </para>

    <table id="api.testcase.tables.api">
      <title>TestCase</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>メソッド</entry>
            <entry>意味</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>__construct()</literal></entry>
            <entry>テストケースを作成します。</entry>
          </row>
          <row>
            <entry><literal>__construct(string $name)</literal></entry>
            <entry>指定した名前のテストケースを作成します。この名前はテストケースを表示する際に使用されます。また、リフレクションで取得するテストメソッドの名前としても使用されます。</entry>
          </row>
          <row>
            <entry><literal>string getName()</literal></entry>
            <entry>テストケースの名前を返します。</entry>
          </row>
          <row>
            <entry><literal>void setName($name)</literal></entry>
            <entry>テストケースの名前を設定します。</entry>
          </row>
          <row>
            <entry><literal>PHPUnit_Framework_TestResult run(PHPUnit_Framework_TestResult $result)</literal></entry>
            <entry>テストケースを実行し、結果を <literal>$result</literal> に格納するための便利なメソッドです。</entry>
          </row>
          <row>
            <entry><literal>void runTest()</literal></entry>
            <entry>リフレクションによってテストメソッドを実行されたくない場合に、テストメソッドをオーバーライドします。</entry>
          </row>
          <row>
            <entry><literal>object getMock($originalClassName, [array $methods, [array $arguments, [string $mockClassName, [boolean $callOriginalConstructor, [boolean $callOriginalClone, [boolean $callAutoload]]]]]])</literal></entry>
            <entry>
             指定した <literal>$originalClassName</literal> 用のモックオブジェクト
             (<xref linkend="test-doubles" /> を参照ください) を返します。
             デフォルトでは、指定したクラスの全メソッドのモックが作成されます。
             二番目の (オプションの) パラメータを指定すると、
             その配列の要素と一致する名前のメソッドについてのみモックが作成されます。
             三番目の (オプションの) パラメータには、
             モックオブジェクトのコンストラクタに渡すパラメータを配列で指定します。
             四番目の (オプションの) パラメータを使用すると、
             モックオブジェクトのクラス名を指定することができます。
             五番目の (オプションの) パラメータを使用すると、
             元のオブジェクトの <literal>__construct()</literal> メソッドをコールしないようにすることができます。
             六番目の (オプションの) パラメータを使用すると、
             元のオブジェクトの <literal>__clone()</literal> メソッドをコールしないようにすることができます。
             七番目の (オプションの) パラメータを使用すると、
             モックオブジェクトの作成時に <literal>__autoload()</literal> を無効にすることができます。
            </entry>
          </row>
          <row>
            <entry><literal>object getMockForAbstractClass($originalClassName, [array $arguments, [string $mockClassName, [boolean $callOriginalConstructor, [boolean $callOriginalClone, [boolean $callAutoload]]]]])</literal></entry>
            <entry>
             指定した抽象クラス <literal>$originalClassName</literal> 用のモックオブジェクト
             (<xref linkend="test-doubles" /> を参照ください) を返します。
             指定した抽象クラスの全抽象メソッドのモックが作成されます。
             これにより、抽象クラスの具象メソッドをテストできるようになります。
            </entry>
          </row>
          <row>
            <entry><literal>object getMockFromWsdl($wsdlFile, [string $originalClassName, [string $mockClassName, [array $methods, [boolean $callOriginalConstructor)</literal></entry>
            <entry>
             <literal>$wsdlFile</literal> で指定した SOAP ウェブサービス用のモックオブジェクト
             (<xref linkend="test-doubles" /> を参照ください) を返します。
            </entry>
          </row>
          <row>
            <entry><literal>void iniSet(string $varName, mixed $newValue)</literal></entry>
            <entry>
             このメソッドは <ulink url="http://www.php.net/ini_set"><literal>ini_set()</literal></ulink>
             関数のラッパーです。テストが終了すると、<filename>php.ini</filename>
             の設定を自動的にもとの値に戻します。
            </entry>
          </row>
          <row>
            <entry><literal>void setLocale(integer $category, string $locale, ...)</literal></entry>
            <entry>
             このメソッドは <ulink url="http://www.php.net/setlocale"><literal>setlocale()</literal></ulink>
             関数のラッパーです。テストが終了すると、自動的にもとの設定値に戻します。
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      このクラスには、ふたつのテンプレートメソッド <literal>setUp()</literal>
      および <literal>tearDown()</literal> が存在します。これをオーバーライドすると、
      実行しようとしているテストに関する前処理や後始末を行うことができます。
      <xref linkend="api.testcase.tables.template-methods" />
      にこれらのメソッドをまとめます。
      テンプレートメソッド <literal>assertPreConditions()</literal>
      および <literal>assertPostConditions()</literal> を使用すると、
      テストケースクラス内のすべてのテストで実行するアサーションを定義することができます。
    </para>

    <table id="api.testcase.tables.template-methods">
      <title>テンプレートメソッド</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>メソッド</entry>
            <entry>意味</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <indexterm><primary>setUp()</primary></indexterm>
            <entry><literal>void setUp()</literal></entry>
            <entry>これをオーバーライドして、fixture の準備、たとえばオブジェクトグラフの作成などを行います。</entry>
          </row>
          <row>
            <indexterm><primary>assertPreConditions()</primary></indexterm>
            <entry><literal>void assertPreConditions()</literal></entry>
            <entry>これをオーバーライドして、テストケースクラス内のすべてのテストで共有するアサーションを実行します。このメソッドがコールされるのは、テストの実行が始まる前に setUp() がコールされた後です。</entry>
          </row>
          <row>
            <indexterm><primary>assertPostConditions()</primary></indexterm>
            <entry><literal>void assertPostConditions()</literal></entry>
            <entry>これをオーバーライドして、テストケースクラス内のすべてのテストで共有するアサーションを実行します。このメソッドがコールされるのは、テストの実行が終わる前に tearDown() がコールされる前です。</entry>
          </row>
          <row>
            <indexterm><primary>tearDown()</primary></indexterm>
            <entry><literal>void tearDown()</literal></entry>
            <entry>これをオーバーライドして、fixture の後始末、たとえばオブジェクトグラフの削除などを行います。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="api.testsuite">
    <title>PHPUnit_Framework_TestSuite</title>
    <indexterm><primary>PHPUnit_Framework_TestSuite</primary></indexterm>

    <para>
      <literal>PHPUnit_Framework_TestSuite</literal> は複数の
      <literal>PHPUnit_Framework_Test</literal> を組み合わせたものです。
      簡単に言うと、このクラスには複数のテストケースが含まれており、
      テストスイートを実行するとそれらの全てのテストが実行されます。
      テストスイートは composite なので、テストスイートの中に別のテストスイートを含め、
      さらにそのテストスイートの中には別のテストスイートが含まれており……
      といったことも可能です。これにより、
      いろいろなところから集めたテストをひとまとめにすることが簡単になります。
    </para>

    <para>
      <literal>run(PHPUnit_Framework_TestResult $result)</literal> および
      <literal>countTestCases()</literal> の 2 つに加え、
      <literal>PHPUnit_Framework_TestSuite</literal> は名前つきインスタンス、
      名前なしインスタンスを作成するためのメソッドも用意しています。
      <literal>PHPUnit_Framework_TestSuite</literal>
      のインスタンスを作成するためのメソッドを
      <xref linkend="api.testsuite.tables.creating-instances" />
      に示します。
    </para>

    <table id="api.testsuite.tables.creating-instances">
      <title>名前つき、あるいは名前なしインスタンスの作成</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>メソッド</entry>
            <entry>意味</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>__construct()</literal></entry>
            <entry>空のテストスイートを返します。</entry>
          </row>
          <row>
            <entry><literal>__construct(string $theClass)</literal></entry>
            <entry><literal>test*</literal> という名前のメソッドを持つ、<literal>$theClass</literal> という名前のクラスのインスタンスを含むテストスイートを返します。<literal>$theClass</literal> という名前のクラスが存在しない場合は、<literal>$theClass</literal> という名前の空のテストスイートが返されます。</entry>
          </row>
          <row>
            <entry><literal>__construct(string $theClass, string $name)</literal></entry>
            <entry><literal>test*</literal> という名前のメソッドを持つ <literal>$theClass</literal> という名前のクラスのインスタンスを含む、<literal>$name</literal> という名前のテストスイートを返します。</entry>
          </row>
          <row>
            <entry><literal>__construct(ReflectionClass $theClass)</literal></entry>
            <entry><literal>test*</literal> という名前のメソッドを持つ、<literal>$theClass</literal> が指すクラスのインスタンスを含むテストスイートを返します。</entry>
          </row>
          <row>
            <entry><literal>__construct(ReflectionClass $theClass, $name)</literal></entry>
            <entry><literal>test*</literal> という名前のメソッドを持つ <literal>$theClass</literal> が指すクラスのインスタンスを含む、<literal>$name</literal> という名前のテストスイートを返します。</entry>
          </row>
          <row>
            <entry><literal>string getName()</literal></entry>
            <entry>テストスイートの名前を返します。</entry>
          </row>
          <row>
            <entry><literal>void setName(string $name)</literal></entry>
            <entry>テストスイートの名前を設定します。</entry>
          </row>
          <row>
            <entry><literal>void markTestSuiteSkipped(string $message)</literal></entry>
            <entry>現在処理中のテストスイートを、処理をスキップするように設定します。<literal>$message</literal> はオプションです。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <literal>PHPUnit_Framework_TestSuite</literal> には、
      <literal>PHPUnit_Framework_Test</literal>
      を追加したり取得したりするためのメソッドも用意されています。これを
      <xref linkend="api.testsuite.tables.api" />
      にまとめます。
    </para>

    <table id="api.testsuite.tables.api">
      <title>テストの追加、取得</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>メソッド</entry>
            <entry>意味</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <indexterm><primary>addTestSuite()</primary></indexterm>
            <entry><literal>void addTestSuite(PHPUnit_Framework_TestSuite $suite)</literal></entry>
            <entry>別のテストスイートを、このテストスイートに追加します。</entry>
          </row>
          <row>
            <entry><literal>void addTestSuite(string $theClass)</literal></entry>
            <entry><literal>test*</literal> という名前のテストメソッドを持つ <literal>$theClass</literal> という名前のクラスのインスタンスを含むテストスイートを、このテストスイートに追加します。</entry>
          </row>
          <row>
            <entry><literal>void addTestSuite(ReflectionClass $theClass)</literal></entry>
            <entry><literal>test*</literal> という名前のテストメソッドを持つ <literal>$theClass</literal> で表されるクラスのインスタンスを含むテストスイートを、このテストスイートに追加します。</entry>
          </row>
          <row>
            <indexterm><primary>addTest()</primary></indexterm>
            <entry><literal>void addTest(PHPUnit_Framework_Test $test)</literal></entry>
            <entry>テストスイートに <literal>$test</literal> を追加します。</entry>
          </row>
          <row>
            <indexterm><primary>addTestFile()</primary></indexterm>
            <entry><literal>void addTestFile(string $filename)</literal></entry>
            <entry>指定したソースファイルで定義されているクラスをテストスイートに追加します。</entry>
          </row>
          <row>
            <indexterm><primary>addTestFiles()</primary></indexterm>
            <entry><literal>void addTestFiles(array $filenames)</literal></entry>
            <entry>指定したソースファイルで定義されているクラスをテストスイートに追加します。</entry>
          </row>
          <row>
            <entry><literal>int testCount()</literal></entry>
            <entry>このテストスイートに直接登録されているテストの数を返します (再帰的には検索しません)。</entry>
          </row>
          <row>
            <entry><literal>PHPUnit_Framework_Test[] tests()</literal></entry>
            <entry>このテストスイートに直接登録されているテストを返します。</entry>
          </row>
          <row>
            <entry><literal>PHPUnit_Framework_Test testAt(int $index)</literal></entry>
            <entry><literal>$index</literal> 番目のテストを返します。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <xref linkend="api.testsuite.examples.TestSuite-example.php" />
      に、テストスイートを作成して実行する方法を示します。
    </para>

    <example id="api.testsuite.examples.TestSuite-example.php">
      <title>テストスイートの作成および実行</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';

require_once 'ArrayTest.php';

// ArrayTest クラスのテストを含む
// テストスイートを作成します。
$suite = new PHPUnit_Framework_TestSuite('ArrayTest');

// テストを実行します。
$suite->run();
?>]]></programlisting>
    </example>

    <para>
      <xref linkend="organizing-tests" /> では、
      <literal>PHPUnit_Framework_TestSuite</literal> クラスを使用して
      階層化されたテストケースを組み合わせる例を示します。
    </para>

    <para>
      <literal>PHPUnit_Framework_TestSuite</literal> クラスには、
      ふたつのテンプレートメソッド <literal>setUp()</literal>
      および <literal>tearDown()</literal> が存在します。
      これらはそれぞれ、テストスイートのテストが実行される前と後にコールされます。
    </para>

    <table id="api.testsuite.tables.template-methods">
      <title>テンプレートメソッド</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>メソッド</entry>
            <entry>意味</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <indexterm><primary>setUp()</primary></indexterm>
            <entry><literal>void setUp()</literal></entry>
            <entry>テストスイートの最初のテストを実行する前にコールされます。</entry>
          </row>
          <row>
            <indexterm><primary>tearDown()</primary></indexterm>
            <entry><literal>void tearDown()</literal></entry>
            <entry>テストスイートの最後のテストをコールした後でコールされます。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="api.testresult">
    <title>PHPUnit_Framework_TestResult</title>
    <indexterm><primary>PHPUnit_Framework_TestResult</primary></indexterm>

    <para>
      これらのテストを実行している間は、実行したテストの数・失敗したテスト・
      テストの所要時間などをどこかに保存しておかなければなりません。
      これらの結果を収集するのが <literal>PHPUnit_Framework_TestResult</literal>
      です。ひとつの <literal>PHPUnit_Framework_TestResult</literal> が、
      テスト全体で使いまわされます。テストの実行結果や失敗の内容は
      <literal>PHPUnit_Framework_TestResult</literal> に記録されていき、
      実行が終了すると、<literal>PHPUnit_Framework_TestResult</literal>
      には全てのテストの概要が含まれるようになります。
    </para>

    <para>
      <literal>PHPUnit_Framework_TestResult</literal> は、
      テストの進行状況を知りたい他のオブジェクトから参照されることもあります。
      例えば、グラフィカルなテストランナーは <literal>PHPUnit_Framework_TestResult</literal>
      を監視し、各テストの開始時にプログレスバーを更新するでしょう。
    </para>

    <para>
      <xref linkend="api.testresult.tables.api" /> は、
      <literal>PHPUnit_Framework_TestResult</literal>
      の API をまとめたものです。
    </para>

    <table id="api.testresult.tables.api">
      <title>TestResult</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>メソッド</entry>
            <entry>意味</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void addError(PHPUnit_Framework_Test $test, Exception $e)</literal></entry>
            <entry>実行中の <literal>$test</literal> から予期せぬ <literal>$e</literal> がスローされたことを記録します。</entry>
          </row>
          <row>
            <entry><literal>void addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e)</literal></entry>
            <entry>実行中の <literal>$test</literal> から予期せぬ <literal>$e</literal> がスローされたことを記録します。</entry>
          </row>
          <row>
            <entry><literal>PHPUnit_Framework_TestFailure[] errors()</literal></entry>
            <entry>記録されたエラーを返します。</entry>
          </row>
          <row>
            <entry><literal>PHPUnit_Framework_TestFailure[] failures()</literal></entry>
            <entry>記録された失敗を返します。</entry>
          </row>
          <row>
            <entry><literal>PHPUnit_Framework_TestFailure[] notImplemented()</literal></entry>
            <entry>記録された未完了テストを返します。</entry>
          </row>
          <row>
            <entry><literal>int errorCount()</literal></entry>
            <entry>記録されたエラーの数を返します。</entry>
          </row>
          <row>
            <entry><literal>int failureCount()</literal></entry>
            <entry>記録された失敗の数を返します。</entry>
          </row>
          <row>
            <entry><literal>int notImplementedCount()</literal></entry>
            <entry>未完了のテストケースの数を返します。</entry>
          </row>
          <row>
            <entry><literal>int count()</literal></entry>
            <entry>実行したテストケースの総数を返します。</entry>
          </row>
          <row>
            <entry><literal>boolean wasSuccessful()</literal></entry>
            <entry>すべてのテストの実行に成功したかどうかを返します。</entry>
          </row>
          <row>
            <entry><literal>boolean allCompletlyImplemented()</literal></entry>
            <entry>すべてのテストが完全に実装されているかどうかを返します。</entry>
          </row>
          <row>
            <entry><literal>void collectCodeCoverageInformation(bool $flag)</literal></entry>
            <entry>コードカバレッジ情報の収集を有効あるいは無効にします。</entry>
          </row>
          <row>
            <entry><literal>array getCodeCoverageInformation()</literal></entry>
            <entry>収集したコードカバレッジ情報を返します。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <indexterm><primary>Observer Pattern (オブザーバパターン)</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_TestListener</primary></indexterm>

      <literal>PHPUnit_Framework_TestResult</literal>
      のオブザーバを登録したい場合は、<literal>PHPUnit_Framework_TestListener</literal>
      を実装する必要があります。これを登録するには、
      <xref linkend="api.testresult.tables.testresult-testlistener" />
      に示した <literal>addListener()</literal> を使用します。
    </para>

    <table id="api.testresult.tables.testresult-testlistener">
      <title>TestResult および TestListener</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>メソッド</entry>
            <entry>意味</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void addListener(PHPUnit_Framework_TestListener $listener)</literal></entry>
            <entry><literal>$listener</literal> を登録し、テスト結果の内容が更新された場合にその内容を受け取るようにします。</entry>
          </row>
          <row>
            <entry><literal>void removeListener(PHPUnit_Framework_TestListener $listener)</literal></entry>
            <entry>更新を受け取る <literal>$listener</literal> の登録を解除します。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      <xref linkend="api.testresult.tables.testlistener" />
      に、テストリスナーが実装するメソッドを示します。
      <xref linkend="extending-phpunit.examples.SimpleTestListener.php" />
      も参照ください。
    </para>

    <table id="api.testresult.tables.testlistener">
      <title>TestListener のコールバック</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>メソッド</entry>
            <entry>意味</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void addError(PHPUnit_Framework_Test $test, Exception $e)</literal></entry>
            <entry><literal>$test</literal> が <literal>$e</literal> をスローしました。</entry>
          </row>
          <row>
            <entry><literal>void addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e)</literal></entry>
            <entry><literal>$test</literal> がアサーションに失敗し、<literal>PHPUnit_Framework_AssertionFailedError</literal> 系がスローされました。</entry>
          </row>
          <row>
            <entry><literal>void addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e)</literal></entry>
            <entry><literal>$test</literal> は完了しませんでした。</entry>
          </row>
          <row>
            <entry><literal>void addSkippedTest(PHPUnit_Framework_Test $test, Exception $e)</literal></entry>
            <entry><literal>$test</literal> は実行されませんでした。</entry>
          </row>
          <row>
            <entry><literal>void startTestSuite(PHPUnit_Framework_TestSuite $suite)</literal></entry>
            <entry><literal>$suite</literal> の実行が始まります。</entry>
          </row>
          <row>
            <entry><literal>void endTestSuite(PHPUnit_Framework_TestSuite $suite)</literal></entry>
            <entry><literal>$suite</literal> の実行が終了しました。</entry>
          </row>
          <row>
            <entry><literal>void startTest(PHPUnit_Framework_Test $test)</literal></entry>
            <entry><literal>$test</literal> の実行が始まります。</entry>
          </row>
          <row>
            <entry><literal>void endTest(PHPUnit_Framework_Test $test)</literal></entry>
            <entry><literal>$test</literal> の実行が終了しました。</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="api.package-structure">
    <title>パッケージの構成</title>

    <para>
      この本で取り上げたクラスの多くは <literal>PHPUnit/Framework</literal>
      にあるものです。ここには PHPUnit のすべてのパッケージが含まれています。
    </para>

    <itemizedlist>
      <listitem>
        <para><literal>PHPUnit/Framework</literal></para>

        <para>
          PHPUnit の基本クラス。
        </para>
      </listitem>

      <listitem>
        <para><literal>PHPUnit/Extensions</literal></para>

        <para>
          PHPUnit フレームワークの拡張。
        </para>
      </listitem>

      <listitem>
        <para><literal>PHPUnit/Runner</literal></para>

        <para>
          テストの実行を抽象化したクラス。
        </para>
      </listitem>

      <listitem>
        <para><literal>PHPUnit/TextUI</literal></para>

        <para>
          テキストベースのテストランナー。
        </para>
      </listitem>

      <listitem>
        <para><literal>PHPUnit/Util</literal></para>

        <para>
          他のパッケージから使用するユーティリティクラス群。
        </para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
