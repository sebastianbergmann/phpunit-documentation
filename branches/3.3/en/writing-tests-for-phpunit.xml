<?xml version="1.0" encoding="utf-8" ?>

<chapter id="writing-tests-for-phpunit">
  <title>Writing Tests for PHPUnit</title>

  <para>
    <xref linkend="writing-tests-for-phpunit.examples.ArrayTest.php" /> shows how we have to
    rewrite our two tests from
    <xref linkend="automating-tests.examples.array-test4.php" /> so that we
    can use them with PHPUnit.
  </para>

  <example id="writing-tests-for-phpunit.examples.ArrayTest.php">
    <title>Testing Array and sizeof() with PHPUnit</title>
    <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';

class ArrayTest extends PHPUnit_Framework_TestCase
{
    public function testNewArrayIsEmpty()
    {
        // Create the Array fixture.
        $fixture = array();

        // Assert that the size of the Array fixture is 0.
        $this->assertEquals(0, sizeof($fixture));
    }

    public function testArrayContainsAnElement()
    {
        // Create the Array fixture.
        $fixture = array();

        // Add an element to the Array fixture.
        $fixture[] = 'Element';

        // Assert that the size of the Array fixture is 1.
        $this->assertEquals(1, sizeof($fixture));
    }
}
?>]]></programlisting>
  </example>

  <blockquote>
    <attribution>Martin Fowler</attribution>
    <para>
      Whenever you are tempted to type something into a
      <literal>print</literal> statement or a debugger expression, write it
      as a test instead.
    </para>
  </blockquote>

  <para>
    <indexterm><primary>PHPUnit_Framework_TestCase</primary></indexterm>

    <xref linkend="writing-tests-for-phpunit.examples.ArrayTest.php" /> shows the basic steps
    for writing tests with PHPUnit:
  </para>

  <orderedlist>
    <listitem><para>The tests for a class <literal>Class</literal> go into a class <literal>ClassTest</literal>.</para></listitem>
    <listitem><para><literal>ClassTest</literal> inherits (most of the time) from <literal>PHPUnit_Framework_TestCase</literal>.</para></listitem>
    <listitem><indexterm><primary>Annotation</primary></indexterm><indexterm><primary>@test</primary></indexterm><para>The tests are public methods that are named <literal>test*</literal>.</para><para><indexterm><primary>Annotation</primary></indexterm>Alternatively, you can use the <literal>@test</literal> annotation in a method's docblock to mark it as a test method.</para></listitem>
    <listitem><para>Inside the test methods, assertion methods such as <literal>assertEquals()</literal> (see <xref linkend="api.assert" />) are used to assert that an actual value matches an expected value.</para></listitem>
  </orderedlist>

  <section id="writing-tests-for-phpunit.data-providers">
    <title>Data Providers</title>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@dataProvider</primary></indexterm>
      A test method can accept arbitrary arguments. These arguments are to be
      provided by a data provider method (<literal>provider()</literal> in
      <xref linkend="writing-tests-for-phpunit.data-providers.examples.DataTest.php" />).
      The data provider method to be used is specified using the
      <literal>@dataProvider</literal> annotation.
    </para>

    <para>
      A data provider method must be <literal>public</literal> and either return
      an array of arrays or an object that implements the <literal>Iterator</literal>
      interface and yields an array for each iteration step. For each array that
      is part of the collection the test method will be called with the contents
      of the array as its arguments.
    </para>

    <example id="writing-tests-for-phpunit.data-providers.examples.DataTest.php">
      <title>Using data providers</title>
      <programlisting><![CDATA[<?php
class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider provider
     */
    public function testAdd($a, $b, $c)
    {
        $this->assertEquals($c, $a + $b);
    }

    public function provider()
    {
        return array(
          array(0, 0, 0),
          array(0, 1, 1),
          array(1, 0, 1),
          array(1, 1, 3)
        );
    }
}
?>]]></programlisting>

    <screen><userinput>phpunit DataTest</userinput>
<![CDATA[PHPUnit 3.3.0 by Sebastian Bergmann.

...F

Time: 0 seconds

There was 1 failure:

1) testAdd(DataTest) with data (1, 1, 3)
Failed asserting that <integer:2> matches expected value <integer:3>.
/home/sb/DataTest.php:21

FAILURES!
Tests: 4, Assertions: 4, Failures: 1.
]]></screen>
    </example>
  </section>

  <section id="writing-tests-for-phpunit.exceptions">
    <title>Testing Exceptions</title>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@expectedException</primary></indexterm>

      <xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php" />
      shows how to use the <literal>@expectedException</literal> annotation to
      test whether an exception is thrown inside the tested code.
    </para>

    <example id="writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php">
      <title>Using the @expectedException annotation</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';

class ExceptionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException InvalidArgumentException
     */
    public function testException()
    {
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ExceptionTest</userinput>
PHPUnit 3.3.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) testException(ExceptionTest)
Expected exception InvalidArgumentException

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>

    <para>
      Alternatively, you can use the <literal>setExpectedException()</literal>
      method to set the expected exception as shown in <xref
      linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php"/>.
    </para>

    <example id="writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php">
      <title>Expecting an exception to be raised by the tested code</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';

class ExceptionTest extends PHPUnit_Framework_TestCase
{
    public function testException()
    {
        $this->setExpectedException('InvalidArgumentException');
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ExceptionTest</userinput>
PHPUnit 3.3.0 by Sebastian Bergmann.

F

Time: 0 seconds

There was 1 failure:

1) testException(ExceptionTest)
Expected exception InvalidArgumentException

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.</screen>
    </example>

    <para>
      <xref linkend="writing-tests-for-phpunit.exceptions.tables.api" />
      shows the methods provided for testing exceptions.
    </para>

    <table id="writing-tests-for-phpunit.exceptions.tables.api">
      <title>Methods for testing exceptions</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Meaning</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void setExpectedException(string $exceptionName)</literal></entry>
            <entry>Set the name of the expected exception to <literal>$exceptionName</literal>.</entry>
          </row>
          <row>
            <entry><literal>String getExpectedException()</literal></entry>
            <entry>Return the name of the expected exception.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      You can also use the approach shown in
      <xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest3.php" />
      to test exceptions.
    </para>

    <example id="writing-tests-for-phpunit.exceptions.examples.ExceptionTest3.php">
      <title>Alternative approach to testing exceptions</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Framework.php';

class ExceptionTest extends PHPUnit_Framework_TestCase {
    public function testException() {
        try {
            // ... Code that is expected to raise an exception ...
        }

        catch (InvalidArgumentException $expected) {
            return;
        }

        $this->fail('An expected exception has not been raised.');
    }
}
?>]]></programlisting>
    </example>

    <para>
      If the code that is expected to raise an exception in
      <xref linkend="writing-tests-for-phpunit.exceptions.examples.ExceptionTest3.php" />
      does not raise the expected exception, the subsequent call to
      <literal>fail()</literal> (see
      <xref linkend="api.assert.tables.bottleneck-methods" />) will halt the
      test and signal a problem with the test. If the expected exception is
      raised, the <literal>catch</literal> block will be executed, and the
      test will end successfully.
    </para>
  </section>

  <section id="writing-tests-for-phpunit.errors">
    <title>Testing PHP Errors</title>
    <para>
      <indexterm><primary>Error Handler</primary></indexterm>
      <indexterm><primary>PHP Error</primary></indexterm>
      <indexterm><primary>PHP Notice</primary></indexterm>
      <indexterm><primary>PHP Warning</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_Error</primary></indexterm>

      By default, PHPUnit converts PHP errors, warnings, and notices that are
      triggered during the execution of a test to an exception. Using these
      exceptions, you can, for instance, expect a test to trigger a PHP error as
      shown in <xref linkend="writing-tests-for-phpunit.exceptions.examples.ErrorTest.php"/>.
    </para>

    <example id="writing-tests-for-phpunit.exceptions.examples.ErrorTest.php">
      <title>Expecting a PHP error using @expectedException</title>
      <programlisting><![CDATA[<?php
class ExpectedErrorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException PHPUnit_Framework_Error
     */
    public function testFailingInclude()
    {
        include 'not_existing_file.php';
    }
}
?>]]></programlisting>
      <screen><userinput>phpunit ExpectedErrorTest</userinput>
PHPUnit 3.3.13 by Sebastian Bergmann.

.

Time: 0 seconds

OK (1 test, 1 assertion)</screen>
    </example>

    <para>
      <indexterm><primary>PHPUnit_Framework_Error_Notice</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_Error_Warning</primary></indexterm>

      <literal>PHPUnit_Framework_Error_Notice</literal> and
      <literal>PHPUnit_Framework_Error_Warning</literal> represent PHP notices
      and warning, respectively.
    </para>

    <note>
      <para>
        You should be as specific as possible when testing exceptions.  Testing
        for the <literal>Exception</literal> class, for instance, is too
        general in most cases and may have undesirable side-effects.
      </para>
    </note>
  </section>
</chapter>
